/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "../client/src/js/AutoBindMethods.js":
/*!*******************************************!*\
  !*** ../client/src/js/AutoBindMethods.js ***!
  \*******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return AutoBindMethods; });
function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var AutoBindMethods = function AutoBindMethods() {
  var _this = this;

  _classCallCheck(this, AutoBindMethods);

  var functionNames = [];
  var obj = Object.getPrototypeOf(this);

  while (obj) {
    if (obj === Object.prototype || obj === AutoBindMethods.prototype) {
      obj = Object.getPrototypeOf(obj);
      continue;
    }

    functionNames = functionNames.concat(Object.getOwnPropertyNames(obj).filter(function (name) {
      return name !== 'constructor' && functionNames.indexOf(name) === -1 && typeof _this[name] === 'function';
    }));
    obj = Object.getPrototypeOf(obj);
  }

  var _iterator = _createForOfIteratorHelper(functionNames),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var functionName = _step.value;
      this[functionName] = this[functionName].bind(this);
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
};



/***/ }),

/***/ "../client/src/js/Camera.js":
/*!**********************************!*\
  !*** ../client/src/js/Camera.js ***!
  \**********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Camera; });
/* harmony import */ var _AutoBindMethods__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AutoBindMethods */ "../client/src/js/AutoBindMethods.js");
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }



var Camera = /*#__PURE__*/function (_AutoBindMethods) {
  _inherits(Camera, _AutoBindMethods);

  var _super = _createSuper(Camera);

  /**
   * @param {Scene} scene
   */
  function Camera(scene) {
    var _this;

    _classCallCheck(this, Camera);

    _this = _super.call(this);
    _this.scene = scene;

    var ratio = _this.getWidth() / _this.getHeight();

    _this.camera = new THREE.PerspectiveCamera(45, ratio, 1, 100);

    _this.camera.position.set(5, 3, 15);

    _this.deltaY = 10;
    _this.rotateY = 0.25;
    _this.defaultDistance = 10;
    _this.distance = _this.defaultDistance;
    _this.raycaster = new THREE.Raycaster();
    return _this;
  }

  _createClass(Camera, [{
    key: "update",
    value: function update(gameTime, deltaTime) {
      var input = this.scene.input;
      var player = this.scene.getPlayer();
      if (!player) return; // Enabled if "F" is pressed

      if (input.look.cinematic) {
        this.camera.position.set(-40, 15, 10);
        this.camera.lookAt(new THREE.Vector3(-50, 0, 0));
        return;
      }

      var rotateY = this.rotateY + input.look.sensitivity * input.look.vertical / 2000;

      if (rotateY > -0.75 && rotateY < 1.25) {
        this.rotateY = rotateY;
      }

      if (input.isThirdPerson) {
        this.updateThirdPerson(player);
      } else {
        this.camera.position.copy(player.position.clone().add(new THREE.Vector3(7.5, this.deltaY, 0)));
        this.camera.lookAt(player.position);
      }
    }
  }, {
    key: "addY",
    value: function addY(y) {
      if (this.deltaY + y > 1 && this.deltaY + y < 25) {
        this.deltaY += y;
      }
    }
  }, {
    key: "getWidth",
    value: function getWidth() {
      var renderer = this.scene.renderer.renderer;
      return renderer.getContext().canvas.width;
    }
  }, {
    key: "getHeight",
    value: function getHeight() {
      var renderer = this.scene.renderer.renderer;
      return renderer.getContext().canvas.height;
    }
  }, {
    key: "updateThirdPerson",
    value: function updateThirdPerson(player) {
      var _this2 = this;

      var children = this.scene.scene.children,
          deltaY = this.deltaY,
          playerHeadPosition = player.position.clone().add(new THREE.Vector3(0, 1.5, 0)),
          origin = playerHeadPosition,
          destination = this.camera.position,
          direction = new THREE.Vector3();

      var getChildrenFlat = function getChildrenFlat(objects) {
        var _ref;

        return (_ref = []).concat.apply(_ref, _toConsumableArray(objects.map(function (obj) {
          return obj.children ? [obj].concat(_toConsumableArray(getChildrenFlat(obj.children))) : [obj];
        })));
      };

      var environment = [children.find(function (c) {
        return c.name === 'LEVEL_ENVIRONMENT';
      })];
      var flatChildrenMeshes = getChildrenFlat(environment).filter(function (obj) {
        return obj.type === 'Mesh';
      });
      this.raycaster.set(origin, direction.subVectors(destination, origin).normalize());
      this.raycaster.far = deltaY * 1.5;
      var intersects = this.raycaster.intersectObjects(flatChildrenMeshes);
      var distance = Math.min.apply(Math, [deltaY].concat(_toConsumableArray(intersects.map(function (i) {
        return i.distance - _this2.distance * 0.5;
      }))));
      this.distance += (distance - this.distance) / 2;
      var playerForward = player.getForward().multiplyScalar(this.scene.input.look.back ? 1 : -1);
      playerForward.y = this.rotateY;
      this.camera.position.copy(playerHeadPosition.clone().add(playerForward));
      this.camera.lookAt(playerHeadPosition);
      var cameraForward = new THREE.Vector3(0, 0, -1);
      cameraForward.applyQuaternion(this.camera.quaternion);
      this.camera.position.sub(cameraForward.multiplyScalar(this.distance));
    }
  }, {
    key: "toScreenPosition",
    value: function toScreenPosition(position) {
      var widthHalf = 0.5 * this.getWidth();
      var heightHalf = 0.5 * this.getHeight();
      var copiedProjectVector = position.clone().project(this.camera);
      return {
        x: Math.round((copiedProjectVector.x + 1) * widthHalf),
        y: Math.round((-copiedProjectVector.y + 1) * heightHalf),
        z: copiedProjectVector.z
      };
    }
  }]);

  return Camera;
}(_AutoBindMethods__WEBPACK_IMPORTED_MODULE_0__["default"]);



/***/ }),

/***/ "../client/src/js/Colliders.js":
/*!*************************************!*\
  !*** ../client/src/js/Colliders.js ***!
  \*************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Colliders; });
/* harmony import */ var _AutoBindMethods__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AutoBindMethods */ "../client/src/js/AutoBindMethods.js");
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }



var Colliders = /*#__PURE__*/function (_AutoBindMethods) {
  _inherits(Colliders, _AutoBindMethods);

  var _super = _createSuper(Colliders);

  function Colliders(scene) {
    var _this;

    _classCallCheck(this, Colliders);

    _this = _super.call(this);
    _this.scene = scene;
    _this.colliders = [];
    _this.nextId = 0;
    return _this;
  }

  _createClass(Colliders, [{
    key: "checkWay",
    value: function checkWay(position, gameObject) {
      var _iterator = _createForOfIteratorHelper(this.colliders),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var collider = _step.value;

          if (collider.fn(position, gameObject)) {
            return false;
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      return true;
    }
  }, {
    key: "resetColliders",
    value: function resetColliders() {
      this.colliders = [];
    }
  }, {
    key: "removeCollider",
    value: function removeCollider(id) {
      var idx = this.colliders.findIndex(function (c) {
        return c.id === id;
      });

      if (idx > -1) {
        this.colliders.splice(idx, 1);
      }
    }
  }, {
    key: "addColliderFunction",
    value: function addColliderFunction(fn) {
      this.colliders.push({
        id: this.nextId++,
        fn: fn
      });
      this.scene.pathFinder.rebuildAreas();
    }
  }]);

  return Colliders;
}(_AutoBindMethods__WEBPACK_IMPORTED_MODULE_0__["default"]);



/***/ }),

/***/ "../client/src/js/Connection.js":
/*!**************************************!*\
  !*** ../client/src/js/Connection.js ***!
  \**************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Connection; });
/* harmony import */ var _AutoBindMethods__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AutoBindMethods */ "../client/src/js/AutoBindMethods.js");
/* harmony import */ var _GameObjects__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./GameObjects */ "../client/src/js/GameObjects.js");
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }




var Connection = /*#__PURE__*/function (_AutoBindMethods) {
  _inherits(Connection, _AutoBindMethods);

  var _super = _createSuper(Connection);

  /**
   * @param {Scene} scene
   * @param {string|number} ip
   * @param {string|number} port
   * @param {boolean} isSecure
   */
  function Connection(scene) {
    var _this;

    var ip = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'localhost';
    var port = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '1337';
    var isSecure = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;

    _classCallCheck(this, Connection);

    _this = _super.call(this);
    _this.scene = scene;
    _this.meta = {};
    _this.networkPlayers = {};
    _this.networkAIs = {};
    _this.lastRequest = Date.now();
    _this.ping = 0;
    var WebSocket = window.WebSocket || window.MozWebSocket;
    _this.connection = new WebSocket("".concat(isSecure ? 'wss' : 'ws', "://").concat(ip, ":").concat(port));

    _this.connection.onopen = function () {
      return console.log('open connection');
    };

    _this.connection.onerror = function (error) {
      return console.log('error connection', error);
    };

    _this.connection.onmessage = _this.onMessage;

    _this.scene.intervals.setInterval(function () {
      _this.sendGameObjects();

      _this.lastRequest = Date.now();
    }, 100);

    return _this;
  }

  _createClass(Connection, [{
    key: "update",
    value: function update() {}
  }, {
    key: "onMessage",
    value: function onMessage(_ref) {
      var data = _ref.data;

      /**
       * @param {object} meta
       * @param {any} response
       * @param {string} messageType
       */
      var _JSON$parse = JSON.parse(data),
          meta = _JSON$parse.meta,
          response = _JSON$parse.data,
          messageType = _JSON$parse.messageType;

      if (meta.role && this.meta.role !== meta.role) {
        this.scene.ui.setConnectionRole(meta.role);

        if (this.meta.role && meta.role === 'host') {
          this.hostUnitsFromNetwork();
        } else if (!this.meta.debug) {
          this.clearLocalGameObjects();
        }
      }

      this.meta = meta;

      try {
        switch (messageType) {
          case 'handshake':
            {
              this.processHandshake();
              break;
            }

          case 'restartServer':
            {
              window.location.reload();
              break;
            }

          case 'setUserPlayer':
            {
              var player = this.scene.getPlayer();

              if (player) {
                this.setPlayerParams(player, response);
              } else {
                this.scene.units.setDefaultPlayerParams(response);
              }

              break;
            }

          case 'updateGameObjects':
            {
              this.ping = Date.now() - this.lastRequest;
              this.updateGameObjects(response);
              break;
            }

          case 'disconnected':
            {
              this.removeDisconnectedPlayer(response);
              break;
            }
        }
      } catch (e) {
        console.log('Connection error', e);
      }
    }
  }, {
    key: "takeHost",
    value: function takeHost() {
      this.send('takeHost');
    }
  }, {
    key: "restartServer",
    value: function restartServer() {
      this.send('restartServer');
    } // There is race condition between
    // clearLocalGameObjects and Location.createInteractiveGameObjects

  }, {
    key: "clearLocalGameObjects",
    value: function clearLocalGameObjects() {
      var gameObjectsService = this.scene.gameObjectsService;
      var player = this.scene.getPlayer(); // Clear local gameObjects to replace them by network units (except player)

      gameObjectsService.getUnits().forEach(function (unit) {
        if (!unit.params.fromNetwork && unit !== player) {
          gameObjectsService.destroyGameObject(unit);
        }
      });
    }
  }, {
    key: "send",
    value: function send(messageType, data) {
      var _this$scene$user = this.scene.user,
          userName = _this$scene$user.userName,
          password = _this$scene$user.password;
      var meta = {
        token: this.getHash(userName + password)
      };
      this.connection.send(JSON.stringify({
        messageType: messageType,
        meta: meta,
        data: data
      }));
    }
  }, {
    key: "processHandshake",
    value: function processHandshake() {
      this.send('loadCurrentUser');
    }
  }, {
    key: "updateGameObjects",
    value: function updateGameObjects(gameObjects) {
      var _this2 = this;

      gameObjects.forEach(function (gameObject) {
        switch (gameObject.type) {
          case 'player':
            {
              _this2.updateNetworkPlayer(gameObject);

              break;
            }

          case 'ai':
            {
              _this2.updateNetworkAI(gameObject);

              break;
            }
        }
      });
    }
  }, {
    key: "removeDisconnectedPlayer",
    value: function removeDisconnectedPlayer(_ref2) {
      var connectionId = _ref2.connectionId;
      var gameObjectsService = this.scene.gameObjectsService;
      var disconnectedPlayer = gameObjectsService.getUnits().find(function (unit) {
        return unit instanceof _GameObjects__WEBPACK_IMPORTED_MODULE_1__["Player"] && unit.params.connectionId === connectionId;
      });
      console.log('Player disconnected', connectionId);

      if (disconnectedPlayer) {
        disconnectedPlayer.die();
      }
    }
    /**
     * @param {String} str
     * @returns {string}
     */

  }, {
    key: "getHash",
    value: function getHash(str) {
      function hash32(str) {
        var i;
        var l;
        var hval = 0x811c9dc5;

        for (i = 0, l = str.length; i < l; i++) {
          hval ^= str.charCodeAt(i);
          hval += (hval << 1) + (hval << 4) + (hval << 7) + (hval << 8) + (hval << 24);
        }

        return ("0000000" + (hval >>> 0).toString(16)).substr(-8);
      }

      var h1 = hash32(str);
      return h1 + hash32(h1 + str);
    }
  }, {
    key: "hostUnitsFromNetwork",
    value: function hostUnitsFromNetwork() {
      this.scene.units.getAliveUnits().forEach(function (unit) {
        if (unit.params.fromNetwork) {
          unit.params.fromNetwork = false;
        }
      });
    }
  }, {
    key: "updateNetworkPlayer",
    value: function updateNetworkPlayer(playerData) {
      var _this3 = this;

      var locationName = playerData.locationName,
          position = playerData.position,
          rotation = playerData.rotation,
          animationState = playerData.animationState,
          params = playerData.params;
      var unitNetworkId = playerData.params.unitNetworkId;

      if (unitNetworkId === this.meta.unitNetworkId && !this.meta.debug) {
        return;
      }

      if (locationName !== this.scene.location.getLocationName()) {
        return;
      }
      /**
       * @type Player | string
       */


      var networkPlayer = this.networkPlayers[unitNetworkId];

      if (!networkPlayer) {
        this.networkPlayers[unitNetworkId] = 'loading';
        this.scene.units.createNetworkPlayer(playerData, function (networkPlayer) {
          _this3.networkPlayers[unitNetworkId] = networkPlayer;
        });
      } else if (networkPlayer !== 'loading') {
        this.setPlayerParams(networkPlayer, {
          position: position,
          rotation: rotation,
          animationState: animationState,
          params: params
        });
      }
    }
  }, {
    key: "setPlayerParams",
    value: function setPlayerParams(player, _ref3) {
      var position = _ref3.position,
          rotation = _ref3.rotation,
          animationState = _ref3.animationState,
          params = _ref3.params;
      player.position.set(position.x, position.y, position.z);
      player.rotation.set(rotation.x, rotation.y, rotation.z);
      player.animationState = animationState;

      if (params) {
        var input = params.input,
            acceleration = params.acceleration;
        var playerParams = player.params;
        playerParams.input.vertical = input.vertical;
        playerParams.input.horizontal = input.horizontal;
        playerParams.input.attack1 = input.attack1;
        playerParams.input.attack2 = input.attack2;
        playerParams.hp = params.hp;
        playerParams.hpMax = params.hpMax;
        playerParams.fraction = params.fraction;
        playerParams.damage = params.damage;
        playerParams.speed = params.speed;
        playerParams.money = params.money;
        playerParams.level = params.level;
        playerParams.unspentTalents = params.unspentTalents;
        playerParams.experience = params.experience;
        playerParams.acceleration.set(acceleration.x, acceleration.y, acceleration.z);
      }
    }
  }, {
    key: "updateNetworkAI",
    value: function updateNetworkAI(unitData) {
      var _this4 = this;

      var locationName = unitData.locationName,
          position = unitData.position,
          rotation = unitData.rotation,
          isRunning = unitData.isRunning,
          isAttack = unitData.isAttack,
          animationState = unitData.animationState,
          scale = unitData.scale,
          params = unitData.params;
      var unitNetworkId = params.unitNetworkId;

      if (locationName !== this.scene.location.getLocationName()) {
        return;
      }
      /**
       * @type AI | string
       */


      var networkAI = this.networkAIs[unitNetworkId];

      if (!networkAI) {
        this.networkAIs[unitNetworkId] = 'loading';
        this.scene.units.createNetworkAI(unitData, function (networkAI) {
          _this4.networkAIs[unitNetworkId] = networkAI;
        });
      } else if (networkAI !== 'loading') {
        networkAI.position.set(position.x, position.y, position.z);
        networkAI.rotation.set(rotation.x, rotation.y, rotation.z);
        networkAI.object.scale.set(scale.x, scale.y, scale.z);
        networkAI.isRunning = isRunning;
        networkAI.isAttack = isAttack;
        networkAI.animationState = animationState;

        if (params) {
          var acceleration = params.acceleration;
          var networkAIParams = networkAI.params;
          networkAIParams.hp = params.hp;
          networkAIParams.hpMax = params.hpMax;
          networkAIParams.fraction = params.fraction;
          networkAIParams.damage = params.damage;
          networkAIParams.level = params.level;
          networkAIParams.acceleration.set(acceleration.x, acceleration.y, acceleration.z);
        }
      }
    }
  }, {
    key: "sendGameObjects",
    value: function sendGameObjects() {
      var _this5 = this;

      var connectionId = this.meta.id;

      if (this.connection.readyState !== 1 || !connectionId) {
        return;
      }

      var player = this.scene.getPlayer();
      var units = this.meta.role === 'host' ? [player].concat(_toConsumableArray(this.scene.units.getAliveUnits().filter(function (unit) {
        return !unit.params.fromNetwork;
      }))) : [player];
      var data = [];
      units.forEach(function (unit) {
        var unitData = Connection.unitToNetwork(unit, connectionId, _this5.scene.location.getLocationName());

        if (unitData) {
          data.push(unitData);
        }
      });

      if (this.meta.role === 'host') {
        this.send('updateGameObjects', data);
      } else if (data[0]) {
        this.send('updatePlayer', data[0]);
      }
    }
  }], [{
    key: "unitToNetwork",
    value: function unitToNetwork(unit, connectionId, locationName) {
      if (unit) {
        var unitRotation = unit.object.rotation.toVector3();

        if (!unit.params.unitNetworkId) {
          var getRandomString = function getRandomString() {
            return Math.random().toString(36).substr(2);
          };

          unit.params.unitNetworkId = getRandomString() + getRandomString();
        }

        var unitNetworkId = unit.params.unitNetworkId;
        var isRunning = unit.isRunning,
            isAttack = unit.isAttack;
        var _unit$params = unit.params,
            hp = _unit$params.hp,
            hpMax = _unit$params.hpMax,
            acceleration = _unit$params.acceleration,
            damage = _unit$params.damage,
            level = _unit$params.level,
            experience = _unit$params.experience,
            fraction = _unit$params.fraction,
            name = _unit$params.name,
            speed = _unit$params.speed,
            unspentTalents = _unit$params.unspentTalents,
            money = _unit$params.money;

        var _ref4 = unit.params.input || {},
            vertical = _ref4.vertical,
            horizontal = _ref4.horizontal,
            attack1 = _ref4.attack1,
            attack2 = _ref4.attack2;

        var vectorToObject = function vectorToObject(vector) {
          var eps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1000;
          return {
            x: Math.round(vector.x * eps) / eps,
            y: Math.round(vector.y * eps) / eps,
            z: Math.round(vector.z * eps) / eps
          };
        };

        return {
          type: unit instanceof _GameObjects__WEBPACK_IMPORTED_MODULE_1__["Player"] ? 'player' : 'ai',
          locationName: locationName,
          animationState: unit.animationState,
          isRunning: isRunning,
          isAttack: isAttack,
          position: vectorToObject(unit.position),
          rotation: vectorToObject(unitRotation),
          scale: vectorToObject(unit.object.scale),
          params: {
            connectionId: connectionId,
            unitNetworkId: unitNetworkId,
            name: name,
            hp: hp,
            hpMax: hpMax,
            fraction: fraction,
            damage: damage,
            level: level,
            experience: experience,
            speed: speed,
            money: money,
            unspentTalents: unspentTalents,
            acceleration: vectorToObject(acceleration),
            input: {
              vertical: vertical,
              horizontal: horizontal,
              attack1: attack1,
              attack2: attack2
            }
          }
        };
      }
    }
  }]);

  return Connection;
}(_AutoBindMethods__WEBPACK_IMPORTED_MODULE_0__["default"]);



/***/ }),

/***/ "../client/src/js/GameObjects.js":
/*!***************************************!*\
  !*** ../client/src/js/GameObjects.js ***!
  \***************************************/
/*! exports provided: AI, Player, Fire, Unit, AnimatedGameObject, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return GameObjectsService; });
/* harmony import */ var _AutoBindMethods__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AutoBindMethods */ "../client/src/js/AutoBindMethods.js");
/* harmony import */ var _GameObjects_AI__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./GameObjects/AI */ "../client/src/js/GameObjects/AI.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AI", function() { return _GameObjects_AI__WEBPACK_IMPORTED_MODULE_1__["default"]; });

/* harmony import */ var _GameObjects_Player__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./GameObjects/Player */ "../client/src/js/GameObjects/Player.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Player", function() { return _GameObjects_Player__WEBPACK_IMPORTED_MODULE_2__["default"]; });

/* harmony import */ var _GameObjects_Fire__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./GameObjects/Fire */ "../client/src/js/GameObjects/Fire.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Fire", function() { return _GameObjects_Fire__WEBPACK_IMPORTED_MODULE_3__["default"]; });

/* harmony import */ var _GameObjects_Unit__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./GameObjects/Unit */ "../client/src/js/GameObjects/Unit.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Unit", function() { return _GameObjects_Unit__WEBPACK_IMPORTED_MODULE_4__["default"]; });

/* harmony import */ var _GameObjects_AnimatedGameObject__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./GameObjects/AnimatedGameObject */ "../client/src/js/GameObjects/AnimatedGameObject.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AnimatedGameObject", function() { return _GameObjects_AnimatedGameObject__WEBPACK_IMPORTED_MODULE_5__["default"]; });

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }









var GameObjectsService = /*#__PURE__*/function (_AutoBindMethods) {
  _inherits(GameObjectsService, _AutoBindMethods);

  var _super = _createSuper(GameObjectsService);

  /**
   * @param {Scene} scene
   */
  function GameObjectsService(scene) {
    var _this;

    _classCallCheck(this, GameObjectsService);

    _this = _super.call(this);
    _this.gameObjects = [];
    _this.nextGameObjectId = 0;
    _this.scene = scene;
    return _this;
  }

  _createClass(GameObjectsService, [{
    key: "update",
    value: function update(time, deltaTime) {
      this.gameObjects.forEach(function (gameObject) {
        return gameObject.update(time, deltaTime);
      });
    }
    /**
     * @param {Unit} attackingUnit
     */

  }, {
    key: "attack",
    value: function attack(attackingUnit) {
      var _this2 = this;

      if (attackingUnit.isDead()) {
        return;
      }

      this.scene.intervals.setTimeout(function () {
        var gameTime = _this2.scene.intervals.getTimePassed();

        if (attackingUnit.isAttackInterrupted(gameTime)) {
          attackingUnit.releaseAttack(gameTime);
          return;
        }

        var attackedUnits = _this2.getUnits().filter(function (gameObject) {
          return gameObject !== attackingUnit && gameObject.isAlive() && gameObject.isEnemy(attackingUnit) && gameObject.position.distanceTo(attackingUnit.position) < 2;
        });

        attackedUnits.forEach(function (collisionGameObject) {
          collisionGameObject.damageTaken({
            damage: attackingUnit.params.damage,
            unit: attackingUnit
          }, gameTime);
        }); // if (attackedUnits.length) {
        //     this.scene.audio.playSound(attackingUnit.position, 'Attack Soft');
        // }
      }, attackingUnit.getAttackTimeout());
    }
    /**
     * @param {Unit} firingGameObject
     */

  }, {
    key: "fire",
    value: function fire(firingGameObject) {
      var _this3 = this;

      if (firingGameObject.isDead()) {
        return;
      }

      var createLightCube = function createLightCube(left) {
        return _this3.scene.models.createCube({
          x: 0.02,
          y: 0.02,
          z: 0.3,
          emissive: '#ff0000',
          position: new THREE.Vector3(0.05 - Number(left) * 0.1, 0, 0),
          noScene: true
        });
      };

      var object = new THREE.Object3D();
      object.position.copy(firingGameObject.getFireInitialPosition());
      object.quaternion.copy(firingGameObject.getFireInitialRotation());
      object.add(createLightCube(true));
      object.add(createLightCube(false));
      this.scene.add(object);
      var fireGameObject = this.hookGameObject(new _GameObjects_Fire__WEBPACK_IMPORTED_MODULE_3__["default"]({
        object: object,
        throttling: new THREE.Vector3(1, 1, 1),
        speed: firingGameObject.params.fireShellSpeed,
        damage: firingGameObject.params.fireDamage,
        parent: firingGameObject,
        checkWay: this.scene.colliders.checkWay,
        getCollisions: function getCollisions() {
          return _this3.gameObjects.filter(function (gameObject) {
            return gameObject instanceof _GameObjects_Unit__WEBPACK_IMPORTED_MODULE_4__["default"] && gameObject.isAlive() && fireGameObject.params.parent !== gameObject && fireGameObject.position.distanceTo(gameObject.position) < 3;
          });
        },
        destroy: function destroy() {
          return _this3.destroyGameObject(fireGameObject);
        }
      }));
      this.scene.intervals.setTimeout(function () {
        return _this3.destroyGameObject(fireGameObject);
      }, 2000); // this.scene.audio.playSound(firingGameObject.position, 'Lasers');
    }
  }, {
    key: "createItem",
    value: function createItem(_ref) {
      var _this4 = this;

      var _ref$scale = _ref.scale,
          scale = _ref$scale === void 0 ? 1.5 : _ref$scale,
          _ref$model = _ref.model,
          model = _ref$model === void 0 ? 'item-heal' : _ref$model,
          _ref$position = _ref.position,
          position = _ref$position === void 0 ? {} : _ref$position,
          canPickup = _ref.canPickup,
          onPickup = _ref.onPickup;
      this.scene.models.loadGLTF({
        baseUrl: './assets/models/items/' + model,
        noScene: true,
        callback: function callback(loadedObject) {
          var positionVector = new THREE.Vector3(position.x || 0, position.y || 0, position.z || 0);
          loadedObject.scene.scale.set(scale, scale, scale);
          loadedObject.scene.traverse(function (child) {
            if (child.isMesh) {
              child.material.transparent = true;
              child.material.alphaTest = 0.5;
            }
          });
          loadedObject.scene.position.set(positionVector.x, positionVector.y, positionVector.z);

          _this4.scene.scene.add(loadedObject.scene);

          var gameItem = new _GameObjects_AnimatedGameObject__WEBPACK_IMPORTED_MODULE_5__["default"]({
            object: loadedObject.scene,
            animations: loadedObject.animations
          });

          _this4.scene.gameObjectsService.hookGameObject(gameItem);

          var checkPickup = function checkPickup() {
            _this4.scene.intervals.setTimeout(function () {
              var getPriority = function getPriority(unit) {
                return 1 / Math.ceil(positionVector.distanceTo(unit.position));
              };

              var nearUnits = _this4.scene.units.getAliveUnits().filter(function (unit) {
                return (!canPickup || canPickup(unit)) && positionVector.distanceTo(unit.position) < 2;
              }).sort(function (unitA, unitB) {
                return getPriority(unitB) - getPriority(unitA);
              });

              if (nearUnits.length) {
                if (onPickup) {
                  onPickup(nearUnits[0]);
                }

                gameItem.animationState.isDie = true;

                _this4.scene.intervals.setTimeout(function () {
                  return _this4.scene.gameObjectsService.destroyGameObject(gameItem);
                }, 500);
              } else {
                checkPickup();
              }
            }, 1000);
          };

          checkPickup();
        }
      });
    }
    /**
     * @param {GameObject} gameObject
     */

  }, {
    key: "hookGameObject",
    value: function hookGameObject(gameObject) {
      this.gameObjects.push(gameObject);
      gameObject.__game_object_id = this.nextGameObjectId++;
      return gameObject;
    }
  }, {
    key: "removeAll",
    value: function removeAll() {
      while (this.gameObjects.length) {
        this.destroyGameObject(this.gameObjects[0]);
      }
    }
  }, {
    key: "removeAllExceptPlayer",
    value: function removeAllExceptPlayer() {
      var _this5 = this;

      var getNextNonPlayerIndex = function getNextNonPlayerIndex() {
        return _this5.gameObjects.findIndex(function (go) {
          return go !== _this5.scene.getPlayer();
        });
      };

      var removeIdx = getNextNonPlayerIndex();

      while (removeIdx > -1) {
        var gameObject = this.gameObjects[removeIdx];
        this.gameObjects.splice(removeIdx, 1);
        this.removeGameObjectFromScene(gameObject);
        removeIdx = getNextNonPlayerIndex();
      }
    }
    /**
     * @param {GameObject} gameObject
     */

  }, {
    key: "destroyGameObject",
    value: function destroyGameObject(gameObject) {
      var index = this.gameObjects.indexOf(gameObject);

      if (index > -1) {
        this.gameObjects.splice(index, 1);
      }

      this.removeGameObjectFromScene(gameObject);
    }
    /**
     * @param {GameObject} gameObject
     */

  }, {
    key: "removeGameObjectFromScene",
    value: function removeGameObjectFromScene(gameObject) {
      var parent = gameObject.object && gameObject.object.parent || this.scene;

      if (parent.remove) {
        parent.remove(gameObject.object);
      } else {
        console.error('Cannot find object parent to remove the object', gameObject);
      }
    }
  }, {
    key: "getUnits",
    value: function getUnits() {
      return this.gameObjects.filter(function (go) {
        return go instanceof _GameObjects_Unit__WEBPACK_IMPORTED_MODULE_4__["default"];
      });
    }
  }]);

  return GameObjectsService;
}(_AutoBindMethods__WEBPACK_IMPORTED_MODULE_0__["default"]);



/***/ }),

/***/ "../client/src/js/GameObjects/AI.js":
/*!******************************************!*\
  !*** ../client/src/js/GameObjects/AI.js ***!
  \******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return AI; });
/* harmony import */ var _FiringUnit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./FiringUnit */ "../client/src/js/GameObjects/FiringUnit.js");
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }



var AI = /*#__PURE__*/function (_FiringUnit) {
  _inherits(AI, _FiringUnit);

  var _super = _createSuper(AI);

  function AI() {
    var _this;

    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, AI);

    _this = _super.call(this, _objectSpread({
      speed: 0.5,
      damage: 10,
      mas: 1,
      hp: 100,
      name: 'Unnamed Unit',
      fraction: 'neutral',
      fireTimeout: 1.5,
      attackTimeout: 1.5,
      jumpTimeout: 1.5,
      startRunTimeout: 1,
      nextPointUpdateTimeout: 0.1,
      updateTargetTimeout: 3
    }, params));
    var _this$params = _this.params,
        hp = _this$params.hp,
        damage = _this$params.damage,
        speed = _this$params.speed;
    _this.params.bounty = hp / 4 + damage + speed * 30;
    _this.lastRun = 0;
    _this.lastTargetUpdate = 0;
    _this.lastNextPointUpdate = 0;
    _this.lastJumpTimestamp = 0;
    _this.isRunning = false;
    _this.isAttack = false;
    return _this;
  }

  _createClass(AI, [{
    key: "update",
    value: function update(time, deltaTime) {
      var _this2 = this;

      _get(_getPrototypeOf(AI.prototype), "update", this).call(this, time, deltaTime);

      if (this.isDead()) {
        return;
      }

      if (this.params.findTarget && this.isUpdateTargetReleased(time)) {
        this.params.target = this.params.findTarget();
      }

      var _this$params2 = this.params,
          object = _this$params2.object,
          target = _this$params2.target,
          acceleration = _this$params2.acceleration,
          speed = _this$params2.speed,
          getNextPoint = _this$params2.getNextPoint;

      if (!this.params.fromNetwork) {
        if (target) {
          if (getNextPoint) {
            if (this.isNextPointUpdateReleased(time)) {
              this.lastNextPointUpdate = time;
              this.nextPoint = getNextPoint(this.position, target.position);
            }
          } else {
            this.nextPoint = target.position;
          }
        }

        var isTargetNear = target && object.position.distanceTo(target.position) < 1.75;
        this.isAttack = isTargetNear && this.isEnemy(target) && target.isAlive();

        if (this.isAttack) {
          this.rotateToPosition(target.position);
        } else if (this.nextPoint) {
          this.rotateToPosition(this.nextPoint);
        }

        var isNextPointNear = !this.nextPoint;
        this.isRunning = target && !isTargetNear && !isNextPointNear && (this.isRunning || this.isRunReleased(time)) && this.isAttackReleased(time) && this.isHitReleased(time);
      }

      if (this.isAttack) {
        this.attack();
      }

      this.animationState.isMovingForward = this.isRunning && this.isAcceleration();

      if (this.isRunning) {
        var checkWay = function checkWay(jumpHeight) {
          var _this2$params$acceler = _this2.params.acceleration,
              dx = _this2$params$acceler.x,
              dy = _this2$params$acceler.y,
              dz = _this2$params$acceler.z;
          return _this2.checkWay(dx, dy + jumpHeight, dz);
        };

        this.lastRun = time;
        acceleration.add(this.getForward().multiplyScalar(speed * 0.1 * (deltaTime * 0.06)));
        var isJumpNeeded = this.isGrounded && (acceleration.x || acceleration.z) && time - this.lastJumpTimestamp > this.params.jumpTimeout * 1000 && !checkWay(0.1) && checkWay(1.5);

        if (isJumpNeeded) {
          this.lastJumpTimestamp = time;
          acceleration.y += 0.25;
        }
      }
    }
  }, {
    key: "rotateToPosition",
    value: function rotateToPosition(position) {
      var object = this.params.object;
      var rotationToTargetRadians = Math.atan2(position.x - object.position.x, position.z - object.position.z); // this.animationState.isRotateLeft = rotationToTargetRadians - object.rotation.y > 0.1;
      // this.animationState.isRotateRight = rotationToTargetRadians - object.rotation.y < -0.1;

      var targetQuaternion = new THREE.Quaternion();
      targetQuaternion.setFromEuler(object.rotation.clone().set(0, rotationToTargetRadians, 0));
      object.quaternion.slerp(targetQuaternion, 0.1);
    }
  }, {
    key: "isAcceleration",
    value: function isAcceleration() {
      return Math.abs(this.params.acceleration.x) + Math.abs(this.params.acceleration.y) + Math.abs(this.params.acceleration.z) > 0.01;
    }
  }, {
    key: "isRunReleased",
    value: function isRunReleased(time) {
      return time - this.lastRun > this.params.startRunTimeout * 1000;
    }
  }, {
    key: "isNextPointUpdateReleased",
    value: function isNextPointUpdateReleased(time) {
      return time - this.lastNextPointUpdate > this.params.nextPointUpdateTimeout * 1000;
    }
  }, {
    key: "isUpdateTargetReleased",
    value: function isUpdateTargetReleased(time) {
      return time - this.lastTargetUpdate > this.params.updateTargetTimeout * 1000;
    }
  }, {
    key: "damageTaken",
    value: function damageTaken() {
      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          damage = _ref.damage,
          attacker = _ref.unit;

      var time = arguments.length > 1 ? arguments[1] : undefined;

      _get(_getPrototypeOf(AI.prototype), "damageTaken", this).call(this, {
        damage: damage,
        unit: attacker
      }, time);

      if (!this.params.target) {
        this.params.target = attacker;
        this.lastTargetUpdate = time;
      }
    }
  }]);

  return AI;
}(_FiringUnit__WEBPACK_IMPORTED_MODULE_0__["default"]);



/***/ }),

/***/ "../client/src/js/GameObjects/AnimatedGameObject.js":
/*!**********************************************************!*\
  !*** ../client/src/js/GameObjects/AnimatedGameObject.js ***!
  \**********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return AnimatedGameObject; });
/* harmony import */ var _GameObject__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./GameObject */ "../client/src/js/GameObjects/GameObject.js");
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }


var animationNames = {
  stand: 'Stand',
  run: 'Run',
  jump: 'Jump',
  attack: 'Attack',
  rotateLeft: 'Rotate Left',
  rotateRight: 'Rotate Right',
  runLeft: 'Run Left',
  runRight: 'Run Right',
  walkBack: 'Walk Back',
  die: 'Die',
  spawn: 'Spawn',
  hit: 'Hit',
  // Complex animimations
  topRun: 'Top Run',
  bottomRun: 'Bottom Run',
  topWalkBack: 'Top Walk Back',
  bottomWalkBack: 'Bottom Walk Back',
  topAttack: 'Top Attack',
  bottomAttack: 'Bottom Attack',
  topStand: 'Top Stand',
  bottomStand: 'Bottom Stand',
  topRunRight: 'Top Run Right',
  topRunLeft: 'Top Run Left',
  topJump: 'Top Jump',
  topHit: 'Top Hit',
  bottomRunRight: 'Bottom Run Right',
  bottomRunLeft: 'Bottom Run Left',
  bottomJump: 'Bottom Jump',
  bottomHit: 'Bottom Hit',
  topDie: 'Top Die',
  bottomDie: 'Bottom Die',
  topSpawn: 'Top Spawn',
  bottomSpawn: 'Bottom Spawn'
};
var topAnimations = ['topRun', 'topWalkBack', 'topAttack', 'topStand', 'topRunRight', 'topRunLeft', 'topJump', 'topHit', 'topDie'];
var bottomAnimations = ['bottomRun', 'bottomWalkBack', 'bottomAttack', 'bottomStand', 'bottomRunRight', 'bottomRunLeft', 'bottomJump', 'bottomHit', 'bottomDie'];
var topBones = ['Right_Forearm', 'Right_Arm', 'Right_Hand', 'Right_Hand_end', 'Right_Shoulder', 'Left_Shoulder', 'Left_Forearm', 'Left_Arm', 'Left_Hand', 'Left_Hand_end', 'Chest', 'Neck', 'Head', 'Head_end'];
var bottomBones = ['Main_Bone', 'Right_Leg', 'Right_Middle_Foot', 'Right_Foot', 'Right_Foot_end', 'Left_Leg', 'Left_Middle_Foot', 'Left_Foot', 'Left_Foot_end', 'Legs_Rotation'];

var AnimatedGameObject = /*#__PURE__*/function (_GameObject) {
  _inherits(AnimatedGameObject, _GameObject);

  var _super = _createSuper(AnimatedGameObject);

  function AnimatedGameObject() {
    var _this;

    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, AnimatedGameObject);

    _this = _super.call(this, _objectSpread({
      animationNames: _objectSpread({}, animationNames),
      topBones: [].concat(topBones),
      bottomBones: [].concat(bottomBones),
      topAnimations: [].concat(topAnimations),
      bottomAnimations: [].concat(bottomAnimations),
      spawnTimeout: 1
    }, params));
    _this.animationState = {
      isMovingForward: false,
      isMovingRight: false,
      isMovingLeft: false,
      isMovingBackward: false,
      isRotateLeft: false,
      isRotateRight: false,
      isAttack: false,
      isJump: false,
      isDie: false,
      isHit: false,
      isSpawn: true
    };
    _this.playingAnimations = {};
    _this.legsRotationY = 0;
    _this.spawnTime = 0;
    _this.mixer = new THREE.AnimationMixer(_this.params.object);

    _this.initAnimations(_this.params.animationNames);

    return _this;
  }

  _createClass(AnimatedGameObject, [{
    key: "update",
    value: function update(time, deltaTime) {
      _get(_getPrototypeOf(AnimatedGameObject.prototype), "update", this).call(this, time, deltaTime);

      if (!this.spawnTime) {
        this.spawnTime = time;
      } else if (this.animationState.isSpawn && this.isSpawnFinished(time)) {
        this.animationState.isSpawn = false;
      }

      if (this.mixer) {
        this.mixer.update(deltaTime / 1000);
      }

      if (this.params.complexAnimations) {
        this.updateComplexAnimations();
      } else {
        var animation = this.getCurrentAnimation();
        animation && this.playAnimation(animation);
      }
    }
  }, {
    key: "playAnimation",
    value: function playAnimation(animation) {
      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
          force = _ref.force;

      if (!animation || !animation._clip) return;
      var animationName = animation._clip.name;
      var shouldUpdate = this.playingAnimationName !== animationName || force;

      if (shouldUpdate) {
        this.playingAnimationName = animationName;
        animation.reset();
        animation.play();

        if (this.playingAnimation) {
          var from = this.playingAnimation;
          from.enabled = true;
          animation.enabled = true;
          from.crossFadeTo(animation, 0.3);
        }

        this.playingAnimation = animation;
      }
    }
  }, {
    key: "initAnimations",
    value: function initAnimations(animationNames) {
      var _this2 = this;

      var _this$params = this.params,
          topAnimations = _this$params.topAnimations,
          bottomAnimations = _this$params.bottomAnimations,
          topBones = _this$params.topBones,
          bottomBones = _this$params.bottomBones,
          complexAnimations = _this$params.complexAnimations;
      this.animations = Object.keys(animationNames).reduce(function (result, key) {
        var excludedBones = [];

        if (complexAnimations) {
          if (topAnimations.includes(key)) {
            excludedBones = bottomBones;
          } else if (bottomAnimations.includes(key)) {
            excludedBones = topBones;
          }
        }

        var modelAnimation = _this2.findModelAnimation(animationNames[key], {
          excludedBones: excludedBones
        });

        var initedAnimation = _this2.createClipAction(modelAnimation);

        return _objectSpread(_objectSpread({}, result), {}, _defineProperty({}, key, initedAnimation));
      }, {});
      var _this$animations = this.animations;
      _this$animations = _this$animations === void 0 ? {} : _this$animations;
      var jump = _this$animations.jump,
          attack = _this$animations.attack,
          topAttack = _this$animations.topAttack,
          die = _this$animations.die,
          spawn = _this$animations.spawn,
          topDie = _this$animations.topDie,
          bottomDie = _this$animations.bottomDie,
          topJump = _this$animations.topJump,
          bottomJump = _this$animations.bottomJump,
          bottomAttack = _this$animations.bottomAttack;
      [jump, die, spawn, topDie, bottomDie, topJump, bottomJump].forEach(function (clampAnimation) {
        if (clampAnimation) {
          clampAnimation.setLoop(THREE.LoopOnce, 0);
          clampAnimation.clampWhenFinished = true;
        }
      });
      [attack, topAttack, bottomAttack].forEach(function (attackAnimation) {
        if (attackAnimation) {
          attackAnimation.setDuration(_this2.params.attackTimeout);
        }
      });
    }
  }, {
    key: "createClipAction",
    value: function createClipAction(action) {
      return action && this.mixer.clipAction(action).stop();
    }
  }, {
    key: "findModelAnimation",
    value: function findModelAnimation(name) {
      var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
          _ref2$excludedBones = _ref2.excludedBones,
          excludedBones = _ref2$excludedBones === void 0 ? [] : _ref2$excludedBones;

      var _this$params$animatio = this.params.animations,
          animations = _this$params$animatio === void 0 ? [] : _this$params$animatio;
      var animation = animations.find(function (animation) {
        return animation.name === name;
      });

      if (animation && excludedBones.length) {
        return this.clearAnimationBones(animation, excludedBones);
      }

      return animation;
    }
  }, {
    key: "isMoving",
    value: function isMoving() {
      return this.animationState.isMovingLeft || this.animationState.isMovingRight || this.animationState.isMovingForward || this.animationState.isMovingBackward;
    }
  }, {
    key: "isSpawnFinished",
    value: function isSpawnFinished(time) {
      return time - this.spawnTime > this.params.spawnTimeout * 1000;
    }
  }, {
    key: "clearAnimationBones",
    value: function clearAnimationBones(animation, bones) {
      if (animation) {
        var getBoneName = function getBoneName(item) {
          return item.name.split('.')[0];
        },
            isNotExcluded = function isNotExcluded(item) {
          return !bones.includes(getBoneName(item));
        };

        animation.tracks = animation.tracks.filter(isNotExcluded);
        return animation;
      }
    }
  }, {
    key: "updateComplexAnimations",
    value: function updateComplexAnimations() {
      var _this$animations2 = this.animations;
      _this$animations2 = _this$animations2 === void 0 ? {} : _this$animations2;
      var topAttack = _this$animations2.topAttack,
          bottomAttack = _this$animations2.bottomAttack,
          topWalkBack = _this$animations2.topWalkBack,
          bottomWalkBack = _this$animations2.bottomWalkBack,
          topRun = _this$animations2.topRun,
          bottomRun = _this$animations2.bottomRun,
          topRunRight = _this$animations2.topRunRight,
          topRunLeft = _this$animations2.topRunLeft,
          topStand = _this$animations2.topStand,
          bottomStand = _this$animations2.bottomStand,
          topJump = _this$animations2.topJump,
          bottomJump = _this$animations2.bottomJump,
          topHit = _this$animations2.topHit,
          bottomHit = _this$animations2.bottomHit,
          topDie = _this$animations2.topDie,
          bottomDie = _this$animations2.bottomDie,
          topSpawn = _this$animations2.topSpawn,
          bottomSpawn = _this$animations2.bottomSpawn;
      var _this$animationState = this.animationState,
          isAttack = _this$animationState.isAttack,
          isMovingRight = _this$animationState.isMovingRight,
          isMovingLeft = _this$animationState.isMovingLeft,
          isMovingBackward = _this$animationState.isMovingBackward,
          isMovingForward = _this$animationState.isMovingForward,
          isJump = _this$animationState.isJump,
          isDie = _this$animationState.isDie,
          isHit = _this$animationState.isHit,
          isSpawn = _this$animationState.isSpawn;
      var playingAnimations = {
        top: isDie && topDie || isHit && topHit || isAttack && topAttack || isJump && topJump || isMovingBackward && isMovingRight && topRunLeft || isMovingBackward && isMovingLeft && topRunRight || isMovingBackward && topWalkBack || isMovingRight && topRunRight || isMovingLeft && topRunLeft || isMovingForward && topRun || isSpawn && topSpawn || topStand,
        bottom: isDie && bottomDie || isJump && bottomJump || isMovingBackward && isMovingRight && bottomWalkBack || isMovingBackward && isMovingLeft && bottomWalkBack || isMovingBackward && bottomWalkBack || isMovingRight && bottomRun || isMovingLeft && bottomRun || isMovingForward && bottomRun || isAttack && bottomAttack || isHit && bottomHit || isSpawn && bottomSpawn || bottomStand
      };
      var legsRotationBone = this.getChildByName('Legs_Rotation');

      if (legsRotationBone) {
        var rotation = legsRotationBone.rotation;
        var y = -0.3;

        if (isMovingLeft) {
          y = isMovingForward ? 0.5 : isMovingBackward ? -0.7 : 1;
        } else if (isMovingRight) {
          y = isMovingForward ? -1.2 : isMovingBackward ? 0.4 : -1.7;
        }

        this.legsRotationY = this.legsRotationY - (this.legsRotationY - y) / 10;
        rotation.set(rotation.x, this.legsRotationY, rotation.z);
      }

      this.blendAnimations(playingAnimations);
    }
  }, {
    key: "blendAnimations",
    value: function blendAnimations(_ref3) {
      var top = _ref3.top,
          bottom = _ref3.bottom;
      if (!(top && bottom && top._clip && bottom._clip)) return;

      var getAnimationName = function getAnimationName(a) {
        return a._clip.name;
      },
          playAnimation = function playAnimation(fromAnimation, animation) {
        var animationName = getAnimationName(animation);
        var fromAnimationName = fromAnimation && getAnimationName(fromAnimation);

        if (fromAnimationName !== animationName) {
          animation.reset();
          animation.play();

          if (fromAnimation) {
            fromAnimation.crossFadeTo(animation, 0.3);
          }
        }
      };

      playAnimation(this.playingAnimations.top, top);
      playAnimation(this.playingAnimations.bottom, bottom);
      this.playingAnimations.top = top;
      this.playingAnimations.bottom = bottom;
    }
  }, {
    key: "getCurrentAnimation",
    value: function getCurrentAnimation() {
      var _this$animations3 = this.animations;
      _this$animations3 = _this$animations3 === void 0 ? {} : _this$animations3;
      var stand = _this$animations3.stand,
          attack = _this$animations3.attack,
          walkBack = _this$animations3.walkBack,
          runLeft = _this$animations3.runLeft,
          runRight = _this$animations3.runRight,
          run = _this$animations3.run,
          jump = _this$animations3.jump,
          hit = _this$animations3.hit,
          rotateLeft = _this$animations3.rotateLeft,
          rotateRight = _this$animations3.rotateRight,
          die = _this$animations3.die,
          spawn = _this$animations3.spawn;
      var _this$animationState2 = this.animationState,
          isAttack = _this$animationState2.isAttack,
          isMovingForward = _this$animationState2.isMovingForward,
          isJump = _this$animationState2.isJump,
          isMovingLeft = _this$animationState2.isMovingLeft,
          isMovingRight = _this$animationState2.isMovingRight,
          isMovingBackward = _this$animationState2.isMovingBackward,
          isRotateLeft = _this$animationState2.isRotateLeft,
          isRotateRight = _this$animationState2.isRotateRight,
          isDie = _this$animationState2.isDie,
          isHit = _this$animationState2.isHit,
          isSpawn = _this$animationState2.isSpawn;
      return isDie && die || isHit && hit || isAttack && attack || isJump && jump || isMovingBackward && walkBack || isMovingLeft && runLeft || isMovingRight && runRight || isMovingForward && run || isRotateLeft && rotateLeft || isRotateRight && rotateRight || isSpawn && spawn || stand;
    }
  }]);

  return AnimatedGameObject;
}(_GameObject__WEBPACK_IMPORTED_MODULE_0__["default"]);



/***/ }),

/***/ "../client/src/js/GameObjects/Fire.js":
/*!********************************************!*\
  !*** ../client/src/js/GameObjects/Fire.js ***!
  \********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Fire; });
/* harmony import */ var _Unit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Unit */ "../client/src/js/GameObjects/Unit.js");
/* harmony import */ var _MovingGameObject__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./MovingGameObject */ "../client/src/js/GameObjects/MovingGameObject.js");
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }




var Fire = /*#__PURE__*/function (_MovingGameObject) {
  _inherits(Fire, _MovingGameObject);

  var _super = _createSuper(Fire);

  function Fire() {
    var _this;

    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, Fire);

    _this = _super.call(this, params);

    _this.params.acceleration.add(_this.getForward().multiplyScalar(_this.params.speed * 0.1));

    return _this;
  }

  _createClass(Fire, [{
    key: "update",
    value: function update(time, deltaTime) {
      var _this2 = this;

      _get(_getPrototypeOf(Fire.prototype), "update", this).call(this, time, deltaTime);

      if (this.params.getCollisions) {
        var collisions = this.params.getCollisions(this);
        collisions.filter(function (collisionGameObject) {
          return collisionGameObject instanceof _Unit__WEBPACK_IMPORTED_MODULE_0__["default"] && collisionGameObject.isEnemy(_this2.params.parent);
        }).forEach(function (collisionGameObject) {
          return collisionGameObject.damageTaken({
            damage: _this2.params.damage,
            unit: _this2.params.parent
          }, time);
        });

        if (collisions.length && this.params.destroy) {
          this.params.destroy(this);
        }
      }
    }
  }]);

  return Fire;
}(_MovingGameObject__WEBPACK_IMPORTED_MODULE_1__["default"]);



/***/ }),

/***/ "../client/src/js/GameObjects/FiringUnit.js":
/*!**************************************************!*\
  !*** ../client/src/js/GameObjects/FiringUnit.js ***!
  \**************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return FiringUnit; });
/* harmony import */ var _Unit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Unit */ "../client/src/js/GameObjects/Unit.js");
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }



var FiringUnit = /*#__PURE__*/function (_Unit) {
  _inherits(FiringUnit, _Unit);

  var _super = _createSuper(FiringUnit);

  function FiringUnit() {
    var _this;

    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, FiringUnit);

    _this = _super.call(this, _objectSpread({
      fireDamage: 10,
      fireTimeout: 1.5,
      fireShellSpeed: 3
    }, params));
    _this.shouldFire = false;
    _this.latestFire = 0;
    return _this;
  }

  _createClass(FiringUnit, [{
    key: "getFireInitialPosition",
    value: function getFireInitialPosition() {
      return this.position.clone().add(this.getUp().multiplyScalar(1.5).add(this.getForward().multiplyScalar(0.3)));
    }
  }, {
    key: "update",
    value: function update(time, deltaTime) {
      _get(_getPrototypeOf(FiringUnit.prototype), "update", this).call(this, time, deltaTime);

      if (this.isDead()) {
        return;
      }

      this.isFire = false;

      if (this.shouldFire && this.params.fire && this.isFireReleased(time) && this.isAttackReleased(time)) {
        this.isFire = true;
        this.shouldFire = false;
        this.latestFire = time;
        this.params.fire();
      } else {
        this.shouldFire = false;
      }
    }
  }, {
    key: "isFireReleased",
    value: function isFireReleased(time) {
      return time - this.latestFire >= this.params.fireTimeout * 1000;
    }
  }, {
    key: "fire",
    value: function fire() {
      this.shouldFire = true;
    }
  }]);

  return FiringUnit;
}(_Unit__WEBPACK_IMPORTED_MODULE_0__["default"]);



/***/ }),

/***/ "../client/src/js/GameObjects/GameObject.js":
/*!**************************************************!*\
  !*** ../client/src/js/GameObjects/GameObject.js ***!
  \**************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return GameObject; });
/* harmony import */ var _AutoBindMethods__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../AutoBindMethods */ "../client/src/js/AutoBindMethods.js");
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }



var GameObject = /*#__PURE__*/function (_AutoBindMethods) {
  _inherits(GameObject, _AutoBindMethods);

  var _super = _createSuper(GameObject);

  function GameObject() {
    var _this;

    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, GameObject);

    _this = _super.call(this);
    _this.params = _objectSpread({}, params);
    _this.object = params.object;

    if (params.object) {
      _this.position = params.object.position;
      _this.rotation = params.object.rotation;
    }

    _this.events = {};
    return _this;
  }

  _createClass(GameObject, [{
    key: "update",
    value: function update() {}
    /**
     * @param {string} eventName
     * @param {object[]} args
     */

  }, {
    key: "dispatchEvent",
    value: function dispatchEvent(eventName) {
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      if (this.events[eventName]) {
        this.events[eventName].forEach(function (callback) {
          return callback.apply(void 0, args);
        });
      }
    }
    /**
     * @param {string} eventName
     * @param {function} callback
     */

  }, {
    key: "addEventListener",
    value: function addEventListener(eventName, callback) {
      if (typeof callback === 'function') {
        if (this.events[eventName]) {
          this.events[eventName].push(callback);
        } else {
          this.events[eventName] = [callback];
        }
      }
    }
  }, {
    key: "getChildByName",
    value: function getChildByName(name) {
      return this.object.getObjectByName(name, true);
    }
  }, {
    key: "getChildDirection",
    value: function getChildDirection(arg) {
      var vector = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new THREE.Vector3(0, 0, 1);
      var child = typeof arg === 'string' ? this.getChildByName(arg) : arg;
      return vector.applyQuaternion(this.getChildRotation(child));
    }
  }, {
    key: "getChildPosition",
    value: function getChildPosition(arg) {
      var child = typeof arg === 'string' ? this.getChildByName(arg) : arg;
      return new THREE.Vector3().setFromMatrixPosition(child.matrixWorld);
    }
  }, {
    key: "getChildRotation",
    value: function getChildRotation(arg) {
      var child = typeof arg === 'string' ? this.getChildByName(arg) : arg;
      var target = new THREE.Quaternion();
      child.getWorldQuaternion(target);
      return target;
    }
  }]);

  return GameObject;
}(_AutoBindMethods__WEBPACK_IMPORTED_MODULE_0__["default"]);



/***/ }),

/***/ "../client/src/js/GameObjects/MovingGameObject.js":
/*!********************************************************!*\
  !*** ../client/src/js/GameObjects/MovingGameObject.js ***!
  \********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return MovingGameObject; });
/* harmony import */ var _AnimatedGameObject__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AnimatedGameObject */ "../client/src/js/GameObjects/AnimatedGameObject.js");
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }



var MovingGameObject = /*#__PURE__*/function (_AnimatedGameObject) {
  _inherits(MovingGameObject, _AnimatedGameObject);

  var _super = _createSuper(MovingGameObject);

  function MovingGameObject() {
    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, MovingGameObject);

    return _super.call(this, _objectSpread({
      speed: 0.1,
      throttling: new THREE.Vector3(0.5, 0.95, 0.5),
      acceleration: new THREE.Vector3(),
      mas: 0,
      checkWay: function checkWay() {
        return true;
      }
    }, params));
  }

  _createClass(MovingGameObject, [{
    key: "update",
    value: function update(time, deltaTime) {
      _get(_getPrototypeOf(MovingGameObject.prototype), "update", this).call(this, time, deltaTime);

      var _this$params = this.params,
          acceleration = _this$params.acceleration,
          throttling = _this$params.throttling;

      if (this.params.mas) {
        acceleration.y -= 0.01;
        this.isGrounded = !this.checkWay(0, -0.2, 0);
        this.animationState.isJump = !this.isGrounded;
      }

      var isX = Boolean(acceleration.x) && this.checkWay(acceleration.x, 0, 0);
      var isY = Boolean(acceleration.y) && this.checkWay(0, acceleration.y, 0);
      var isZ = Boolean(acceleration.z) && this.checkWay(0, 0, acceleration.z);

      if (!isX || !isY || !isZ) {
        if (!this.params.mas) {
          // Stop object smoothly because of Collider hit
          acceleration.multiplyScalar(0.75);
        }

        if (!isX) {
          var isClimbing = acceleration.x && acceleration.y <= 0 && this.checkWay(acceleration.x, 0.04, 0);

          if (isClimbing) {
            acceleration.y = 0.04 / throttling.y;
          } else {
            acceleration.x = 0;
          }
        }

        if (!isY) {
          acceleration.y = 0;
        }

        if (!isZ) {
          var _isClimbing = acceleration.z && acceleration.y <= 0 && this.checkWay(0, 0.04, acceleration.z);

          if (_isClimbing) {
            acceleration.y = 0.04 / throttling.y;
          } else {
            acceleration.z = 0;
          }
        }
      }

      acceleration.x *= throttling.x;
      acceleration.y *= throttling.y;
      acceleration.z *= throttling.z;
      var isMoving = Math.abs(acceleration.x) > 0.001 || Math.abs(acceleration.y) > 0.001 || Math.abs(acceleration.z) > 0.001;

      if (isMoving) {
        // acceleration.multiplyScalar(deltaTime * 60)
        this.position.add(acceleration);
      }
    }
  }, {
    key: "checkWay",
    value: function checkWay() {
      var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var z = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      var position = this.position,
          checkWay = this.params.checkWay;
      var nextPosition = new THREE.Vector3(position.x + x, position.y + y + 0.1, position.z + z);
      return checkWay(nextPosition, this);
    }
  }, {
    key: "getLeft",
    value: function getLeft() {
      return this.getDirection(new THREE.Vector3(1, 0, 0));
    }
  }, {
    key: "getUp",
    value: function getUp() {
      return this.getDirection(new THREE.Vector3(0, 1, 0));
    }
  }, {
    key: "getForward",
    value: function getForward() {
      return this.getDirection(new THREE.Vector3(0, 0, 1));
    }
    /**
     * @param {THREE.Vector3} direction
     */

  }, {
    key: "getDirection",
    value: function getDirection(direction) {
      direction.applyQuaternion(this.object.quaternion);
      return direction;
    }
  }, {
    key: "getScalarAcceleration",
    value: function getScalarAcceleration() {
      return this.params.acceleration.toArray().map(Math.abs).reduce(function (r, v) {
        return r + v;
      }, 0);
    }
  }]);

  return MovingGameObject;
}(_AnimatedGameObject__WEBPACK_IMPORTED_MODULE_0__["default"]);



/***/ }),

/***/ "../client/src/js/GameObjects/Player.js":
/*!**********************************************!*\
  !*** ../client/src/js/GameObjects/Player.js ***!
  \**********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Player; });
/* harmony import */ var _FiringUnit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./FiringUnit */ "../client/src/js/GameObjects/FiringUnit.js");
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }



var Player = /*#__PURE__*/function (_FiringUnit) {
  _inherits(Player, _FiringUnit);

  var _super = _createSuper(Player);

  function Player() {
    var _this;

    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, Player);

    _this = _super.call(this, _objectSpread({
      speed: 0.54,
      fireTimeout: 1,
      fireDamage: 25,
      damage: 50,
      hp: 100,
      experience: 0,
      unspentTalents: 0,
      money: 500,
      isFire: false,
      mas: 1,
      level: 1,
      jumpTimeout: 0.9,
      fraction: 'friendly',
      sensitivity: 1
    }, params));
    _this.lastJumpTimestamp = 0;
    _this.rotationAcceleration = 0; // console.log('Player', this);

    params.onLevelUp && _this.addEventListener('onLevelUp', params.onLevelUp);
    return _this;
  }

  _createClass(Player, [{
    key: "update",
    value: function update(time, deltaTime) {
      _get(_getPrototypeOf(Player.prototype), "update", this).call(this, time, deltaTime);

      if (this.isDead()) {
        return;
      }

      var _this$params = this.params,
          input = _this$params.input,
          object = _this$params.object,
          acceleration = _this$params.acceleration,
          fromNetwork = _this$params.fromNetwork;
      acceleration.add(this.getMovingAcceleration(time, deltaTime));

      if (input.attack1) {
        this.attack();
      }

      if (input.attack2) {
        this.fire();
      }

      this.animationState.isMovingLeft = input.horizontal === -1;
      this.animationState.isMovingRight = input.horizontal === 1;
      this.animationState.isMovingForward = input.vertical === 1;
      this.animationState.isMovingBackward = input.vertical === -1;

      if (!fromNetwork) {
        if (input.isThirdPerson) {
          if (input.look.horizontal) {
            var horizontalLook = input.look.horizontal;
            this.animationState.isRotateLeft = horizontalLook < 0;
            this.animationState.isRotateRight = horizontalLook > 0;
            this.rotationAcceleration += -horizontalLook / 5000 * input.look.sensitivity;
            input.resetHorizontalLook();
          }

          var CALC_ROTATE_THRESHOLD = 0.0000001;

          if (Math.abs(this.rotationAcceleration) > CALC_ROTATE_THRESHOLD) {
            object.rotateOnWorldAxis(new THREE.Vector3(0, 1, 0), this.rotationAcceleration);
            this.rotationAcceleration *= 0.7;
          }
        } else {
          var deltaX = window.innerWidth / 2 - input.cursor.x;
          var deltaY = input.cursor.y - window.innerHeight / 2;
          var rotationY = Math.atan2(deltaY, deltaX);
          this.animationState.isRotateLeft = rotationY > object.rotation.y;
          this.animationState.isRotateRight = rotationY < object.rotation.y;
          object.rotation.set(0, rotationY, 0);
        }
      }
    }
  }, {
    key: "getUnspentTalents",
    value: function getUnspentTalents() {
      return this.params.unspentTalents;
    }
  }, {
    key: "decreaseUnspentTalents",
    value: function decreaseUnspentTalents() {
      return this.params.unspentTalents--;
    }
  }, {
    key: "getFireInitialPosition",
    value: function getFireInitialPosition() {
      var head = this.getChildByName('Head');
      var headForward = this.getChildDirection(head, new THREE.Vector3(0, 0, 1));
      var headUp = new THREE.Vector3(0, 1, 0);
      headUp.applyQuaternion(head.quaternion);
      return this.getChildPosition(head).add(headUp.multiplyScalar(0.15)).add(headForward.multiplyScalar(0.25));
    }
  }, {
    key: "getFireInitialRotation",
    value: function getFireInitialRotation() {
      return this.getChildRotation('Head');
    }
  }, {
    key: "addExperience",
    value: function addExperience(experience) {
      this.params.experience += experience;
      var level = this.getLevel();

      if (this.params.level !== level) {
        var levelsUp = level - this.params.level;
        this.params.level = level;
        this.params.unspentTalents += 3 * levelsUp;
        this.params.hp = this.params.hpMax;
        this.dispatchEvent('onLevelUp', level);
      }
    }
  }, {
    key: "getExperience",
    value: function getExperience() {
      return this.params.experience;
    }
  }, {
    key: "getLevelExperience",
    value: function getLevelExperience() {
      return Math.pow(this.getLevel(), 2) * 100;
    }
  }, {
    key: "getLevel",
    value: function getLevel() {
      return Math.floor(Math.sqrt(this.params.experience / 100)) + 1;
    }
  }, {
    key: "getMovingAcceleration",
    value: function getMovingAcceleration(time, deltaTime) {
      var _this$params$input = this.params.input,
          horizontal = _this$params$input.horizontal,
          vertical = _this$params$input.vertical,
          jump = _this$params$input.jump;
      var speed = vertical && horizontal ? this.params.speed * 0.1 * 0.7 * (deltaTime * 0.06) : this.params.speed * 0.1 * (deltaTime * 0.06);
      var addForward = vertical === 1 ? speed : vertical === -1 ? -speed * 0.6 : 0;
      var addSide = vertical === -1 ? -horizontal * speed * 0.6 : -horizontal * speed;
      var isJump = time - this.lastJumpTimestamp > this.params.jumpTimeout * 1000 && jump && this.isGrounded;

      if (isJump) {
        this.lastJumpTimestamp = time;
      }

      return this.getDirection(new THREE.Vector3(addSide, Number(isJump) * 0.25, addForward));
    }
  }]);

  return Player;
}(_FiringUnit__WEBPACK_IMPORTED_MODULE_0__["default"]);



/***/ }),

/***/ "../client/src/js/GameObjects/Unit.js":
/*!********************************************!*\
  !*** ../client/src/js/GameObjects/Unit.js ***!
  \********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Unit; });
/* harmony import */ var _MovingGameObject__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./MovingGameObject */ "../client/src/js/GameObjects/MovingGameObject.js");
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }



var Unit = /*#__PURE__*/function (_MovingGameObject) {
  _inherits(Unit, _MovingGameObject);

  var _super = _createSuper(Unit);

  function Unit() {
    var _this;

    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, Unit);

    _this = _super.call(this, _objectSpread({
      hp: 100,
      hpMax: params.hp || 100,
      damage: 10,
      attackTimeout: 0.9,
      hitTime: 0.3,
      attackDamageTimeout: 0.3
    }, params));
    _this.shouldAttack = false;
    _this.latestAttackTimestamp = 0;
    _this.latestHitTimestamp = 0;
    ['onDamageTaken', 'onDamageDeal', 'onKill', 'onDie'].forEach(function (eventName) {
      if (typeof params[eventName] === 'function') {
        _this.addEventListener(eventName, params[eventName]);
      }
    });
    return _this;
  }

  _createClass(Unit, [{
    key: "update",
    value: function update(time, deltaTime) {
      _get(_getPrototypeOf(Unit.prototype), "update", this).call(this, time, deltaTime);

      if (this.isDead()) {
        return;
      }

      var hitReleased = this.isHitReleased(time);
      this.animationState.isHit = !hitReleased;

      if (this.isAttackReleased(time) && hitReleased) {
        this.animationState.isAttack = false;

        if (this.shouldAttack) {
          this.animationState.isAttack = true;
          this.latestAttackTimestamp = time;
          this.params.attack && this.params.attack();
        }
      } else {
        this.shouldAttack = false;
      }
    }
  }, {
    key: "getFraction",
    value: function getFraction() {
      return this.params.fraction;
    }
  }, {
    key: "getCollider",
    value: function getCollider(position) {
      var diffY = position.y - this.position.y;
      return Math.sqrt(Math.pow(position.x - this.position.x, 2) + Math.pow(position.z - this.position.z, 2)) < 1 && diffY >= 0 && diffY < 1.7;
    }
  }, {
    key: "releaseAttack",
    value: function releaseAttack(time) {
      this.latestAttackTimestamp = time - this.params.attackTimeout * 1000;
      this.animationState.isAttack = false;
    }
  }, {
    key: "isAttackReleased",
    value: function isAttackReleased(time) {
      return time - this.latestAttackTimestamp >= this.params.attackTimeout * 1000;
    }
  }, {
    key: "isAttackInterrupted",
    value: function isAttackInterrupted(time) {
      return time - this.latestHitTimestamp <= this.params.attackDamageTimeout * 1000;
    }
  }, {
    key: "isHitReleased",
    value: function isHitReleased(time) {
      return time - this.latestHitTimestamp >= this.params.hitTime * 1000;
    }
  }, {
    key: "attack",
    value: function attack() {
      this.shouldAttack = true;
    }
  }, {
    key: "isDead",
    value: function isDead() {
      return this.params.hp <= 0;
    }
  }, {
    key: "isAlive",
    value: function isAlive() {
      return !this.isDead();
    }
  }, {
    key: "isEnemy",
    value: function isEnemy(unit) {
      return unit.params.fraction !== this.params.fraction && unit.params.fraction !== 'neutral' && this.params.fraction !== 'neutral';
    }
  }, {
    key: "getLevel",
    value: function getLevel() {
      return this.params.level;
    }
  }, {
    key: "getName",
    value: function getName() {
      return this.params.name;
    }
  }, {
    key: "getAttackTimeout",
    value: function getAttackTimeout() {
      return this.params.attackDamageTimeout * 1000;
    }
  }, {
    key: "damageTaken",
    value: function damageTaken() {
      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          damage = _ref.damage,
          attacker = _ref.unit;

      var time = arguments.length > 1 ? arguments[1] : undefined;

      if (damage && attacker) {
        this.params.hp -= damage;
        this.dispatchEvent('onDamageTaken', attacker);

        if (attacker) {
          attacker.dispatchEvent('onDamageDeal', this);
        }

        var interruptByChance = Math.random() < 0.33;
        var interruptByLevel = attacker.getLevel() - this.getLevel() > 2;
        var shouldBeInterrupted = interruptByLevel || interruptByChance;

        if (shouldBeInterrupted) {
          this.latestHitTimestamp = time;
        }

        if (this.isDead()) {
          this.die(attacker);
        }
      }
    }
  }, {
    key: "die",
    value: function die(killingUnit) {
      this.params.hp = 0;
      this.dispatchEvent('onDie', killingUnit);
      this.animationState.isDie = true;

      if (killingUnit) {
        killingUnit.dispatchEvent('onKill', this);
      }
    }
  }, {
    key: "addSpeed",
    value: function addSpeed(speed) {
      this.params.speed += speed;
    }
  }, {
    key: "addDamage",
    value: function addDamage(damage) {
      this.params.damage += damage;
    }
  }, {
    key: "addHP",
    value: function addHP(hp) {
      if (this.isAlive()) {
        this.params.hp = Math.min(this.params.hp + hp, this.params.hpMax);
      }
    }
  }, {
    key: "getMoney",
    value: function getMoney() {
      return this.params.money;
    }
  }, {
    key: "addMoney",
    value: function addMoney(money) {
      this.params.money += money;
    }
  }, {
    key: "addMaxHP",
    value: function addMaxHP(hp) {
      if (this.isAlive()) {
        this.params.hpMax += hp;
        this.params.hp += hp;
      }
    }
  }, {
    key: "getHP",
    value: function getHP() {
      return this.params.hp;
    }
  }, {
    key: "getMaxHP",
    value: function getMaxHP() {
      return this.params.hpMax;
    }
  }, {
    key: "getSpeed",
    value: function getSpeed() {
      return this.params.speed;
    }
  }, {
    key: "getDamage",
    value: function getDamage() {
      return this.params.damage;
    }
  }]);

  return Unit;
}(_MovingGameObject__WEBPACK_IMPORTED_MODULE_0__["default"]);



/***/ }),

/***/ "../client/src/js/Input.js":
/*!*********************************!*\
  !*** ../client/src/js/Input.js ***!
  \*********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Input; });
/* harmony import */ var _AutoBindMethods__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AutoBindMethods */ "../client/src/js/AutoBindMethods.js");
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }


var KEYS = {
  MOUSE_LEFT: 1,
  MOUSE_RIGHT: 3,
  SPACE: 32,
  ENTER: 13,
  ESC: 27,
  C: 67,
  W: 87,
  A: 65,
  S: 83,
  D: 68,
  X: 88,
  Z: 90,
  Q: 81,
  E: 69,
  R: 82,
  F: 70,
  V: 86,
  1: 49,
  2: 50,
  ARROW_LEFT: 37,
  ARROW_RIGHT: 39,
  ARROW_UP: 38,
  ARROW_DOWN: 40
};

var Input = /*#__PURE__*/function (_AutoBindMethods) {
  _inherits(Input, _AutoBindMethods);

  var _super = _createSuper(Input);

  function Input(params) {
    var _this;

    _classCallCheck(this, Input);

    _this = _super.call(this);
    _this.params = params;
    _this.vertical = 0;
    _this.horizontal = 0;
    _this.attack1 = false;
    _this.attack2 = false;
    _this.look = {
      vertical: 0,
      horizontal: 0,
      back: false,
      sensitivity: 1
    };

    _this.resetHorizontalLook = function () {
      return _this.look.horizontal = 0;
    };

    _this.isThirdPerson = true;
    _this.cursor = {
      x: 0,
      y: 0
    };
    _this.mouse = {
      x: 0,
      y: 0
    };

    _this.addEventListeners();

    return _this;
  }

  _createClass(Input, [{
    key: "update",
    value: function update() {
      this.look.horizontal = 0;
      this.look.vertical = 0;
    }
  }, {
    key: "addEventListeners",
    value: function addEventListeners() {
      var _this2 = this;

      document.addEventListener('mousedown', function (e) {
        if (e.which === KEYS.MOUSE_LEFT) {
          _this2.attack1 = true;
        }

        if (e.which === KEYS.MOUSE_RIGHT) {
          _this2.attack2 = true;
        }
      });
      document.addEventListener('mouseup', function (e) {
        if (e.which === KEYS.MOUSE_LEFT) {
          _this2.attack1 = false;
        }

        if (e.which === KEYS.MOUSE_RIGHT) {
          _this2.attack2 = false;
        }
      });
      var timeout;
      document.addEventListener('mousemove', function (e) {
        _this2.look.horizontal += e.movementX || 0;
        _this2.look.vertical += e.movementY || 0;
        _this2.mouse.x = e.x;
        _this2.mouse.y = e.y;
        var cursorX = _this2.cursor.x + (e.movementX || 0);
        var cursorY = _this2.cursor.y + (e.movementY || 0);

        if (cursorX > 0 && cursorX < window.innerWidth) {
          _this2.cursor.x = cursorX;
        }

        if (cursorY > 0 && cursorY < window.innerHeight) {
          _this2.cursor.y = cursorY;
        }

        if (timeout !== undefined) {
          window.clearTimeout(timeout);
        }

        timeout = window.setTimeout(function () {
          document.dispatchEvent(new Event('onmousemoveend'));
        }, 100);
      });
      document.addEventListener('onmousemoveend', function (e) {
        // Horizontal look is cleaning by Player.update after rotation is applied
        // this.look.horizontal = 0;
        _this2.look.vertical = 0;
      });
      document.addEventListener('keydown', function (e) {
        switch (e.which) {
          case KEYS.ENTER:
            _this2.params.onAction && _this2.params.onAction();
            break;

          case KEYS.ESC:
            _this2.params.onExit && _this2.params.onExit();
            break;

          case KEYS.C:
            _this2.params.onSwitchCamera && _this2.params.onSwitchCamera();
            break;

          case KEYS.W:
          case KEYS.ARROW_UP:
            _this2.vertical = 1;
            break;

          case KEYS.S:
          case KEYS.ARROW_DOWN:
            _this2.vertical = -1;
            break;

          case KEYS.A:
          case KEYS.ARROW_LEFT:
            _this2.horizontal = -1;
            break;

          case KEYS.D:
          case KEYS.ARROW_RIGHT:
            _this2.horizontal = 1;
            break;

          case KEYS.X:
            _this2.look.back = true;
            break;

          case KEYS.F:
            _this2.look.cinematic = true;
            break;

          case KEYS.SPACE:
            _this2.jump = 1;
            break;
        }
      });
      document.addEventListener('keyup', function (e) {
        switch (e.which) {
          case KEYS.W:
          case KEYS.ARROW_UP:
            if (_this2.vertical === 1) {
              _this2.vertical = 0;
            }

            break;

          case KEYS.S:
          case KEYS.ARROW_DOWN:
            if (_this2.vertical === -1) {
              _this2.vertical = 0;
            }

            break;

          case KEYS.A:
          case KEYS.ARROW_LEFT:
            if (_this2.horizontal === -1) {
              _this2.horizontal = 0;
            }

            break;

          case KEYS.D:
          case KEYS.ARROW_RIGHT:
            if (_this2.horizontal === 1) {
              _this2.horizontal = 0;
            }

            break;

          case KEYS.X:
            _this2.look.back = false;
            break;

          case KEYS.F:
            _this2.look.cinematic = false;
            break;

          case KEYS.SPACE:
            _this2.jump = 0;
            break;
        }
      });
      window.addEventListener('wheel', function (e) {
        return _this2.params.onZoom && _this2.params.onZoom(e.deltaY / 100);
      });
      return this;
    }
  }]);

  return Input;
}(_AutoBindMethods__WEBPACK_IMPORTED_MODULE_0__["default"]);



/***/ }),

/***/ "../client/src/js/Intervals.js":
/*!*************************************!*\
  !*** ../client/src/js/Intervals.js ***!
  \*************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Intervals; });
/* harmony import */ var _AutoBindMethods__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AutoBindMethods */ "../client/src/js/AutoBindMethods.js");
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }



var Intervals = /*#__PURE__*/function (_AutoBindMethods) {
  _inherits(Intervals, _AutoBindMethods);

  var _super = _createSuper(Intervals);

  function Intervals(scene) {
    var _this;

    _classCallCheck(this, Intervals);

    _this = _super.call(this);
    _this.scene = scene;
    _this.timePassed = 0;
    _this.lastFrame = 0;
    _this.intervals = [];
    _this.intervalIndex = 0;
    return _this;
  }

  _createClass(Intervals, [{
    key: "update",
    value: function update(now) {
      var _this2 = this;

      this.timePassed += now - this.lastFrame;
      this.intervals.filter(function (i) {
        return _this2.timePassed - i.calledAt > i.interval;
      }).forEach(function (interval) {
        interval.calledAt = _this2.timePassed;
        interval.fn();

        if (interval.loops && --interval.loops === 0) {
          _this2.clearInterval(interval.id);
        }
      });
      this.lastFrame = now;
    }
  }, {
    key: "getTimePassed",
    value: function getTimePassed() {
      return this.timePassed;
    }
  }, {
    key: "getDeltaTime",
    value: function getDeltaTime(now) {
      return now - this.lastFrame;
    }
  }, {
    key: "setInterval",
    value: function setInterval(fn, interval, immediately, loops) {
      if (fn && interval) {
        var calledAt = immediately ? this.timePassed - interval : this.timePassed;
        this.intervals.push({
          fn: fn,
          interval: interval,
          calledAt: calledAt,
          loops: loops,
          id: ++this.intervalIndex
        });
      }
    }
  }, {
    key: "setTimeout",
    value: function setTimeout(fn, timeout) {
      if (fn && timeout) {
        this.intervals.push({
          fn: fn,
          interval: timeout,
          loops: 1,
          calledAt: this.timePassed,
          id: ++this.intervalIndex
        });
      }
    }
  }, {
    key: "clearInterval",
    value: function clearInterval(id) {
      var intervalIdx = this.intervals.findIndex(function (i) {
        return i.id === id;
      });

      if (intervalIdx > -1) {
        this.intervals.splice(intervalIdx, 1);
      }
    }
  }]);

  return Intervals;
}(_AutoBindMethods__WEBPACK_IMPORTED_MODULE_0__["default"]);



/***/ }),

/***/ "../client/src/js/Locations/AbstractLocation.js":
/*!******************************************************!*\
  !*** ../client/src/js/Locations/AbstractLocation.js ***!
  \******************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return AbstractLocation; });
/* harmony import */ var _AutoBindMethods__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../AutoBindMethods */ "../client/src/js/AutoBindMethods.js");
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }



var AbstractLocation = /*#__PURE__*/function (_AutoBindMethods) {
  _inherits(AbstractLocation, _AutoBindMethods);

  var _super = _createSuper(AbstractLocation);

  /**
   * @param {Scene} scene
   */
  function AbstractLocation(scene) {
    var _this;

    var id = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'unknown-level';

    _classCallCheck(this, AbstractLocation);

    _this = _super.call(this);
    _this.scene = scene;
    _this.id = id;
    return _this;
  }

  _createClass(AbstractLocation, [{
    key: "update",
    value: function update() {}
  }, {
    key: "startLocation",
    value: function startLocation() {}
  }, {
    key: "restartLocation",
    value: function restartLocation() {}
  }, {
    key: "stopLocation",
    value: function stopLocation() {}
  }, {
    key: "onAction",
    value: function onAction() {}
  }, {
    key: "getLocationName",
    value: function getLocationName() {
      return this.id;
    }
  }, {
    key: "createAmbientLight",
    value: function createAmbientLight() {
      var ambientLight = new THREE.AmbientLight(0x888888);
      ambientLight.castShadow = false;
      return ambientLight;
    }
  }, {
    key: "createShadowLight",
    value: function createShadowLight() {
      var light = new THREE.DirectionalLight(0xffffff, 10, 150);
      light.intensity = 1;
      light.shadow.bias = -0.00001;
      var shadowSize = 25;
      light.castShadow = true;
      light.shadow.camera.left = -shadowSize;
      light.shadow.camera.right = shadowSize;
      light.shadow.camera.top = shadowSize;
      light.shadow.camera.bottom = -shadowSize;
      light.shadow.mapSize.width = 512;
      light.shadow.mapSize.height = 512;
      light.shadow.camera.near = 10;
      light.shadow.camera.far = 150;
      light.shadow.camera.visible = true;
      return light;
    }
  }, {
    key: "createSkybox",
    value: function createSkybox() {
      var materialArray = ['xpos', 'xneg', 'ypos', 'yneg', 'zpos', 'zneg'].map(function (direction) {
        var url = "./assets/textures/sky-nebula/nebula-".concat(direction, ".png");
        return new THREE.MeshBasicMaterial({
          map: new THREE.TextureLoader().load(url),
          side: THREE.BackSide,
          fog: false
        });
      });
      var skyGeometry = new THREE.CubeGeometry(75000, 75000, 75000);
      var skyMaterial = new THREE.MeshFaceMaterial(materialArray);
      return new THREE.Mesh(skyGeometry, skyMaterial);
    }
  }]);

  return AbstractLocation;
}(_AutoBindMethods__WEBPACK_IMPORTED_MODULE_0__["default"]);



/***/ }),

/***/ "../client/src/js/Locations/DreamTown/Areas.js":
/*!*****************************************************!*\
  !*** ../client/src/js/Locations/DreamTown/Areas.js ***!
  \*****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var buildArea = function buildArea(areaId, map) {
  var _AreaSizes$areaId = AreaSizes[areaId],
      width = _AreaSizes$areaId.width,
      height = _AreaSizes$areaId.height;

  var waypointXToWorldX = function waypointXToWorldX(position) {
    return position - width / 2;
  };

  var waypointYToWorldZ = function waypointYToWorldZ(position) {
    return position - height / 2;
  };

  var worldXToWaypointX = function worldXToWaypointX(position) {
    var graphX = Math.round(position + width / 2);
    return Math.min(Math.max(graphX, 4), width - 5);
  };

  var worldZToWaypointY = function worldZToWaypointY(position) {
    var graphY = Math.round(position + height / 2);
    return Math.min(Math.max(graphY, 4), height - 5);
  };

  var area = {
    id: areaId,
    waypointXToWorldX: waypointXToWorldX,
    waypointYToWorldZ: waypointYToWorldZ,
    worldXToWaypointX: worldXToWaypointX,
    worldZToWaypointY: worldZToWaypointY,
    width: width,
    height: height
  };
  return map(area);
};

var AreaSizes = {
  FLOOR_0: {
    width: 150,
    height: 150
  },
  FLOOR_1: {
    width: 270,
    height: 270
  },
  FLOOR_2: {
    width: 270,
    height: 270
  }
};
var Areas = {
  FLOOR_0: buildArea('FLOOR_0', function (area) {
    return _objectSpread(_objectSpread({}, area), {}, {
      includesPosition: function includesPosition(position) {
        return position.y < 100;
      },
      getWorldWaypointByXY: function getWorldWaypointByXY(x, y) {
        return {
          x: area.waypointXToWorldX(x),
          y: 0.2,
          z: area.waypointYToWorldZ(y)
        };
      },
      getWaypointPortals: function getWaypointPortals() {
        return [{
          from: {
            x: area.worldXToWaypointX(-49),
            y: area.worldZToWaypointY(0)
          },
          to: {
            x: area.worldXToWaypointX(-49),
            y: area.worldZToWaypointY(0),
            areaId: 'FLOOR_1'
          }
        }, {
          from: {
            x: area.worldXToWaypointX(-49),
            y: area.worldZToWaypointY(0)
          },
          to: {
            x: area.worldXToWaypointX(-49),
            y: area.worldZToWaypointY(0),
            areaId: 'FLOOR_2'
          }
        }];
      }
    });
  }),
  FLOOR_1: buildArea('FLOOR_1', function (area) {
    return _objectSpread(_objectSpread({}, area), {}, {
      includesPosition: function includesPosition(position) {
        return position.y < 200;
      },
      getWorldWaypointByXY: function getWorldWaypointByXY(x, y) {
        return {
          x: area.waypointXToWorldX(x),
          y: 100.2,
          z: area.waypointYToWorldZ(y)
        };
      },
      getWaypointPortals: function getWaypointPortals() {
        return [{
          from: {
            x: area.worldXToWaypointX(-48),
            y: area.worldZToWaypointY(0)
          },
          to: {
            x: area.worldXToWaypointX(-48),
            y: area.worldZToWaypointY(0),
            areaId: 'FLOOR_0'
          }
        }, {
          from: {
            x: area.worldXToWaypointX(-48),
            y: area.worldZToWaypointY(0)
          },
          to: {
            x: area.worldXToWaypointX(-48),
            y: area.worldZToWaypointY(0),
            areaId: 'FLOOR_2'
          }
        }];
      }
    });
  }),
  FLOOR_2: buildArea('FLOOR_2', function (area) {
    return _objectSpread(_objectSpread({}, area), {}, {
      includesPosition: function includesPosition(position) {
        return position.y >= 200;
      },
      getWorldWaypointByXY: function getWorldWaypointByXY(x, y) {
        return {
          x: area.waypointXToWorldX(x),
          y: 200.2,
          z: area.waypointYToWorldZ(y)
        };
      },
      getWaypointPortals: function getWaypointPortals() {
        return [{
          from: {
            x: area.worldXToWaypointX(-48),
            y: area.worldZToWaypointY(0)
          },
          to: {
            x: area.worldXToWaypointX(-48),
            y: area.worldZToWaypointY(0),
            areaId: 'FLOOR_0'
          }
        }, {
          from: {
            x: area.worldXToWaypointX(-48),
            y: area.worldZToWaypointY(0)
          },
          to: {
            x: area.worldXToWaypointX(-48),
            y: area.worldZToWaypointY(0),
            areaId: 'FLOOR_1'
          }
        }];
      }
    });
  })
};
/* harmony default export */ __webpack_exports__["default"] = (Areas);

/***/ }),

/***/ "../client/src/js/Locations/DreamTown/Elevator.js":
/*!********************************************************!*\
  !*** ../client/src/js/Locations/DreamTown/Elevator.js ***!
  \********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Elevator; });
/* harmony import */ var _AutoBindMethods__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../AutoBindMethods */ "../client/src/js/AutoBindMethods.js");
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }



var Elevator = /*#__PURE__*/function (_AutoBindMethods) {
  _inherits(Elevator, _AutoBindMethods);

  var _super = _createSuper(Elevator);

  function Elevator(scene, params) {
    var _this;

    _classCallCheck(this, Elevator);

    _this = _super.call(this);
    _this.scene = scene;
    _this.params = params;
    _this.currentFloor = 1;
    _this.target = 0;
    _this.direction = -1;
    _this.speed = 0.3;
    _this.standTime = 10;
    _this.object = _this.scene.models.createCube(params);
    _this.standAt = _this.scene.intervals.getTimePassed();
    return _this;
  }

  _createClass(Elevator, [{
    key: "isReleased",
    value: function isReleased() {
      return this.scene.intervals.getTimePassed() - this.standAt > this.standTime * 1000;
    }
  }, {
    key: "isCarrying",
    value: function isCarrying(_ref) {
      var x = _ref.x,
          y = _ref.y,
          z = _ref.z;
      var _this$object = this.object,
          position = _this$object.position,
          scale = _this$object.scale;
      return Math.abs(x - position.x) < scale.x / 2 && Math.abs(z - position.z) < scale.z / 2 && y - position.y < scale.y / 2 // && (y + 1.7) - position.y > -scale.y / 2
      ;
    }
  }, {
    key: "getFloor",
    value: function getFloor() {
      return this.direction > 0 ? this.object.position.y >= 200 && 2 || this.object.position.y >= 100 && 1 || 0 : this.object.position.y > 100 && 2 || this.object.position.y > 0 && 1 || 0;
    }
  }, {
    key: "update",
    value: function update() {
      var _this2 = this;

      if (this.isReleased()) {
        var floor = this.getFloor();

        if (floor !== this.currentFloor) {
          this.standAt = this.scene.intervals.getTimePassed();
          this.currentFloor = floor;

          if (floor === 2) {
            this.direction = -1;
          } else if (floor === 0) {
            this.direction = 1;
          }

          this.target = floor + this.direction;
        } else {
          var getCarryingPosition = function getCarryingPosition(unit) {
            return _objectSpread(_objectSpread({}, unit.position), {}, {
              y: unit.position.y - (_this2.direction > 0 ? 2 : 0.1)
            });
          };

          var carryingUnits = this.scene.gameObjectsService.getUnits().filter(function (unit) {
            return _this2.isCarrying(getCarryingPosition(unit));
          });
          var thisAcceleration = this.speed * this.direction;
          carryingUnits.forEach(function (unit) {
            unit.position.y += thisAcceleration;
          });
          this.object.position.y += thisAcceleration;
        }
      }
    }
  }]);

  return Elevator;
}(_AutoBindMethods__WEBPACK_IMPORTED_MODULE_0__["default"]);



/***/ }),

/***/ "../client/src/js/Locations/DreamTown/Environment.js":
/*!***********************************************************!*\
  !*** ../client/src/js/Locations/DreamTown/Environment.js ***!
  \***********************************************************/
/*! exports provided: createEnvironment */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createEnvironment", function() { return createEnvironment; });
var createEnvironment = function createEnvironment(_ref) {
  var load = _ref.load,
      trees = _ref.trees,
      houses = _ref.houses,
      addColliderFunction = _ref.addColliderFunction,
      onLoad = _ref.onLoad;
  var pivot = new THREE.Object3D();
  pivot.matrixAutoUpdate = false;
  pivot.name = 'LEVEL_ENVIRONMENT';
  var isEnvironmentLoaded = false;
  var isTreeLoaded = false;
  var isHouseLoaded = false;

  var checkIsAllLoaded = function checkIsAllLoaded() {
    if (isEnvironmentLoaded && isTreeLoaded && isHouseLoaded) {
      onLoad && onLoad();
    }
  };

  load({
    baseUrl: './assets/models/environment/enviroment',
    noScene: true,
    castShadow: false,
    callback: function callback(object) {
      pivot.add(object.scene);
      object.scene.matrixAutoUpdate = false;
      object.scene.updateMatrix();
      isEnvironmentLoaded = true;
      checkIsAllLoaded();
    }
  });
  load({
    baseUrl: './assets/models/environment/tree',
    noScene: true,
    receiveShadow: false,
    callback: function callback(loadedModel) {
      isTreeLoaded = true;
      checkIsAllLoaded();
      trees.forEach(function (position) {
        var model = loadedModel.scene.clone();
        model.name = 'Tree';
        model.position.set(position.x, position.y, position.z);
        model.matrixAutoUpdate = false;
        model.updateMatrix();
        var _model$position = model.position,
            x = _model$position.x,
            z = _model$position.z;
        addColliderFunction(function (position) {
          return Math.abs(position.x - x) < 2 && Math.abs(position.z - z) < 2;
        });
        pivot.add(model);
      });
    }
  });
  load({
    baseUrl: './assets/models/environment/house1',
    receiveShadow: false,
    noScene: true,
    callback: function callback(loadedModel) {
      isHouseLoaded = true;
      checkIsAllLoaded();
      houses.forEach(function (position) {
        var model = loadedModel.scene.clone();
        model.name = 'House1';
        model.position.set(position.x, position.y, position.z);
        model.rotation.set(position.rx || 0, position.ry || 0, position.rz || 0);
        model.matrixAutoUpdate = false;
        model.updateMatrix();
        var _model$position2 = model.position,
            x = _model$position2.x,
            z = _model$position2.z;
        addColliderFunction(function (unitPosition) {
          return Math.abs(unitPosition.x - x) < (position.ry < -3.13 ? 4 : 3) && Math.abs(unitPosition.z - z) < (position.ry < -3.13 ? 3 : 4);
        });
        pivot.add(model);
      });
    }
  });
  return pivot;
};



/***/ }),

/***/ "../client/src/js/Locations/DreamTown/Location.js":
/*!********************************************************!*\
  !*** ../client/src/js/Locations/DreamTown/Location.js ***!
  \********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Location; });
/* harmony import */ var _AbstractLocation__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../AbstractLocation */ "../client/src/js/Locations/AbstractLocation.js");
/* harmony import */ var _GameObjects__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../GameObjects */ "../client/src/js/GameObjects.js");
/* harmony import */ var _Elevator__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Elevator */ "../client/src/js/Locations/DreamTown/Elevator.js");
/* harmony import */ var _Environment__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Environment */ "../client/src/js/Locations/DreamTown/Environment.js");
/* harmony import */ var _Areas__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Areas */ "../client/src/js/Locations/DreamTown/Areas.js");
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }







var Location = /*#__PURE__*/function (_AbstractLocation) {
  _inherits(Location, _AbstractLocation);

  var _super = _createSuper(Location);

  /**
   * @param {Scene} scene
   */
  function Location(scene) {
    var _this;

    _classCallCheck(this, Location);

    _this = _super.call(this, scene);
    _this.id = 'dream-town';
    _this.shadowLightPosition = new THREE.Vector3(25, 50, 25);

    _this.scene.ui.setLoading(true);

    _this.scene.ui.setPause(true);

    _this.environment = Object(_Environment__WEBPACK_IMPORTED_MODULE_3__["createEnvironment"])({
      load: _this.scene.models.loadGLTF,
      addColliderFunction: _this.scene.colliders.addColliderFunction,
      trees: [{
        x: 0,
        y: 0,
        z: 15
      }, {
        x: 0,
        y: 0,
        z: -15
      }, {
        x: 15,
        y: 0,
        z: 0
      }, {
        x: -15,
        y: 0,
        z: 0
      }, {
        x: 15,
        y: 0,
        z: 15
      }, {
        x: 15,
        y: 0,
        z: -15
      }, {
        x: 30,
        y: 0,
        z: 20
      }, {
        x: 30,
        y: 0,
        z: -20
      }, {
        x: 45,
        y: 0,
        z: -35
      }, {
        x: 45,
        y: 0,
        z: 35
      }],
      houses: [{
        x: 0,
        y: 0,
        z: 40,
        ry: -Math.PI
      }, {
        x: -10,
        y: 0,
        z: 30,
        ry: Math.PI / 2
      }, {
        x: 10,
        y: 0,
        z: 30,
        ry: -Math.PI / 2
      } // { x: 75, y: 100, z: 75 },
      // { x: 75, y: 200, z: 75 },
      ],
      onLoad: function onLoad() {
        _this.scene.ui.setLoading(false);

        _this.scene.ui.setPause(false);

        _this.scene.notify('Dream Town');

        _this.startLocation();
      }
    });
    _this.ambientLight = _this.createAmbientLight();
    _this.shadowLight = _this.createShadowLight();

    _this.scene.add(_this.environment);

    _this.scene.add(_this.ambientLight);

    _this.scene.add(_this.shadowLight);

    _this.elevator = new _Elevator__WEBPACK_IMPORTED_MODULE_2__["default"](scene, {
      position: {
        x: -48,
        y: 100,
        z: 0
      },
      x: 4,
      y: 1,
      z: 4
    });
    var color = 0x000000;
    var near = 10;
    var far = 100;
    _this.scene.scene.fog = new THREE.Fog(color, near, far);

    _this.createLocationColliders();

    return _this;
  }

  _createClass(Location, [{
    key: "update",
    value: function update() {
      _get(_getPrototypeOf(Location.prototype), "update", this).call(this);

      var player = this.scene.getPlayer();

      if (player) {
        this.elevator.update();
        this.shadowLight.position.copy(player.position).add(this.shadowLightPosition);

        if (this.shadowLight.target !== player.object) {
          this.shadowLight.target = player.object;
        }
      }
    }
  }, {
    key: "reviveHero",
    value: function reviveHero() {
      var player = this.scene.getPlayer();
      player.params.hp = 10;
      player.position.set(0, 0.3, 30);
      player.animationState.isDie = false;
      this.scene.particles.createEffect({
        effect: 'level-up/level-up',
        scale: 1.5,
        attachTo: player.object
      });
    }
  }, {
    key: "afterClear",
    value: function afterClear() {
      var _this2 = this;

      this.scene.units.createPlayer({
        /**
         * @param {Player} player
         */
        onCreate: function onCreate(player) {
          _this2.scene.camera.player = player;

          _this2.scene.ui.updatePlayerParams();

          player.position.set(0, 0.3, 30);
        },
        onDie: function onDie() {
          return window.setTimeout(function () {
            _this2.scene.ui.setPause(true);
          }, 2500);
        },
        onKill: function onKill(object) {
          var player = _this2.scene.getPlayer();

          player.addExperience(object.params.bounty);
          player.addMoney(object.params.bounty);
        },
        onDamageTaken: function onDamageTaken() {
          return _this2.scene.ui.updatePlayerParams();
        },
        onLocationUp: function onLocationUp() {
          return _this2.scene.ui.updatePlayerParams();
        }
      });
      this.createInteractiveGameObjects();
    }
  }, {
    key: "startLocation",
    value: function startLocation() {
      if (this.interval) {
        clearInterval(this.interval);
      }
    }
  }, {
    key: "restartLocation",
    value: function restartLocation() {
      this.scene.clearScene();
    }
  }, {
    key: "stopLocation",
    value: function stopLocation() {
      this.scene.remove(this.environment); // this.scene.remove(this.skybox);

      this.scene.remove(this.ambientLight);
      this.scene.remove(this.shadowLight);
      this.scene.gameObjectsService.removeAllExceptPlayer();

      if (this.interval) {
        clearInterval(this.interval);
      }
    }
  }, {
    key: "createInteractiveGameObjects",
    value: function createInteractiveGameObjects() {
      var _this3 = this;

      var createHealItem = function createHealItem() {
        return _this3.scene.intervals.setTimeout(function () {
          var itemHealPosition = new THREE.Vector3(-6.5, 0.1, 32.8);

          _this3.scene.gameObjectsService.createItem({
            model: 'item-heal',
            position: itemHealPosition,
            canPickup: function canPickup(unit) {
              return unit.getMaxHP() - unit.getHP() > 0;
            },
            onPickup: function onPickup(unit) {
              unit.addHP(25);
              createHealItem();
            }
          });
        }, 10000);
      };

      createHealItem();

      var getAIParams = function getAIParams(_ref) {
        var level = _ref.level,
            params = _objectWithoutProperties(_ref, ["level"]);

        return _objectSpread(_objectSpread({}, params), {}, {
          level: level,
          scale: 0.7 + level / 10,
          onDie: function onDie() {
            return _this3.scene.units.createAI(getAIParams(_objectSpread(_objectSpread({}, params), {}, {
              level: level + 1 + Math.round(Math.random() * level)
            })));
          }
        });
      };

      var getGoatsParams = function getGoatsParams(level, position) {
        return getAIParams({
          level: level,
          position: position,
          fraction: 'goats',
          name: level <= 10 ? 'Goat Warrior' : level <= 20 ? 'Goat Elite' : 'Goat Destroyer'
        });
      };

      var getFriendlyParams = function getFriendlyParams(level, position, rotation) {
        return getAIParams({
          level: level,
          position: position,
          rotation: rotation,
          fraction: 'friendly',
          name: 'Friendly Citizen'
        });
      };

      this.units = [getGoatsParams(3, {
        x: -17,
        y: 0.2,
        z: -5
      }), getGoatsParams(3, {
        x: 17,
        y: 0.2,
        z: -5
      }), getGoatsParams(2, {
        x: -15,
        y: 0.2,
        z: -30
      }), getGoatsParams(2, {
        x: 15,
        y: 0.2,
        z: -30
      }), getGoatsParams(5, {
        x: -30,
        y: 0.2,
        z: -9
      }), getGoatsParams(5, {
        x: 30,
        y: 0.2,
        z: -9
      }), getGoatsParams(4, {
        x: -45,
        y: 0.2,
        z: -30
      }), getGoatsParams(4, {
        x: 45,
        y: 0.2,
        z: -30
      }), getGoatsParams(1, {
        x: 45,
        y: 0.2,
        z: 45
      }), getGoatsParams(1, {
        x: 45,
        y: 0.2,
        z: -45
      }), getGoatsParams(25, {
        x: 0,
        y: 0.2,
        z: 0
      }), getFriendlyParams(5, {
        x: -0.8,
        y: 0.2,
        z: 40 - 4.03
      }, {
        y: Math.PI
      }), getFriendlyParams(5, {
        x: -10 + 3.5,
        y: 0.2,
        z: 29.2
      }, {
        y: Math.PI / 2
      }), getFriendlyParams(5, {
        x: 10 - 3.5,
        y: 0.2,
        z: 30.8
      }, {
        y: -Math.PI / 2
      })].forEach(this.scene.units.createAI);
    }
  }, {
    key: "createLocationColliders",
    value: function createLocationColliders() {
      var _this4 = this;

      var isBetween = function isBetween(v, min, max) {
        return v > min && v < max;
      };

      this.scene.colliders.addColliderFunction(function (position, gameObject) {
        var x = position.x,
            y = position.y,
            z = position.z;
        var absX = Math.abs(x);
        var absZ = Math.abs(z);

        if (y < 0.1 && absX < 50 && absZ < 50 || // floor 0
        y < (absX - 50) / 1.5 && absX > 50 || y < (absZ - 50) / 1.5 && absZ > 50 // out of floor 0
        || y < 90 && absX > 96 && absZ > 96 // out of floor 0
        || isBetween(y, 90, 100) && (absX > 50 || absZ > 50) // floor 1
        || isBetween(y, 90, 190) && (absX > 135 || absZ > 135) // out of floor 1
        || isBetween(y, 190, 200) && (absX > 50 || absZ > 50) // floor 2
        || y > 190 && (absX > 133 || absZ > 133) // out of floor 2
        || _this4.elevator.isCarrying(position)) {
          return true;
        } // TODO: Check if we need units colliders
        // const units = this.scene.units.getAliveUnits();
        //
        // for(let unit of units) {
        //     if (
        //         unit !== gameObject
        //         && (
        //             !(gameObject instanceof Fire)
        //             || gameObject.params.parent !== unit
        //         )
        //         && unit.getCollider(position)
        //     ) {
        //         return true;
        //     }
        // }


        return false;
      });
    }
  }, {
    key: "getAreas",
    value: function getAreas() {
      var _this5 = this;

      var areas = Object.values(_Areas__WEBPACK_IMPORTED_MODULE_4__["default"]);

      var generateWaypoints = function generateWaypoints(width, height, map) {
        return new Array(width).fill(null).map(function (null1, x) {
          return new Array(height).fill(null).map(function (null2, y) {
            return map(x, y);
          });
        });
      };

      return areas.map(function (area) {
        var result = _objectSpread({}, area);

        result.getWaypoints = function () {
          return generateWaypoints(area.width, area.height, function (x, y) {
            if ( // Elevator
            Math.abs(area.waypointXToWorldX(x) - _this5.elevator.params.position.x) <= 5 && Math.abs(area.waypointYToWorldZ(y) - _this5.elevator.params.position.z) <= 1) {
              return 1;
            }

            if (area.id !== 'FLOOR_0' && ( // Center hole
            Math.abs(area.waypointXToWorldX(x)) < 51 && Math.abs(area.waypointYToWorldZ(y)) < 51 || Math.abs(area.waypointXToWorldX(x)) <= 51 && Math.abs(area.waypointYToWorldZ(y)) <= 51 && Math.abs(area.waypointXToWorldX(x)) >= 50 && Math.abs(area.waypointYToWorldZ(y)) >= 50)) {
              return 0;
            }

            if (area.id === 'FLOOR_0' && ( // Floor out
            Math.abs(area.waypointXToWorldX(x)) >= 49 || Math.abs(area.waypointYToWorldZ(y)) >= 49)) {
              return 1;
            }

            return Number(_this5.checkWayForWaypoint(area.getWorldWaypointByXY(x, y)));
          });
        };

        return result;
      });
    }
  }, {
    key: "checkWayForWaypoint",
    value: function checkWayForWaypoint(_ref2) {
      var x = _ref2.x,
          y = _ref2.y,
          z = _ref2.z;
      var checkWay = this.scene.colliders.checkWay;

      var checkNear = function checkNear(range, diagonal) {
        return checkWay(new THREE.Vector3(x + range, y, z)) && checkWay(new THREE.Vector3(x - range, y, z)) && checkWay(new THREE.Vector3(x, y, z + range)) && checkWay(new THREE.Vector3(x, y, z - range)) && (!diagonal || checkWay(new THREE.Vector3(x + range, y, z + range)) && checkWay(new THREE.Vector3(x - range, y, z - range)) && checkWay(new THREE.Vector3(x - range, y, z + range)) && checkWay(new THREE.Vector3(x + range, y, z - range)));
      };

      return checkWay(new THREE.Vector3(x, y, z)) && checkNear(1, true) && checkNear(2);
    }
  }]);

  return Location;
}(_AbstractLocation__WEBPACK_IMPORTED_MODULE_0__["default"]);



/***/ }),

/***/ "../client/src/js/Locations/DreamTown/index.js":
/*!*****************************************************!*\
  !*** ../client/src/js/Locations/DreamTown/index.js ***!
  \*****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _Location__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Location */ "../client/src/js/Locations/DreamTown/Location.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "default", function() { return _Location__WEBPACK_IMPORTED_MODULE_0__["default"]; });



/***/ }),

/***/ "../client/src/js/Models.js":
/*!**********************************!*\
  !*** ../client/src/js/Models.js ***!
  \**********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Models; });
/* harmony import */ var _AutoBindMethods__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AutoBindMethods */ "../client/src/js/AutoBindMethods.js");
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }



var Models = /*#__PURE__*/function (_AutoBindMethods) {
  _inherits(Models, _AutoBindMethods);

  var _super = _createSuper(Models);

  function Models(scene) {
    var _this;

    _classCallCheck(this, Models);

    _this = _super.call(this);
    _this.scene = scene;
    return _this;
  }
  /**
   * @param {Object} params
   * @param {number} params.repeatX
   * @param {number} params.repeatY
   * @param {number} params.emissive
   * @param {THREE.Vector3} params.position
   * @returns {THREE.Mesh}
   */


  _createClass(Models, [{
    key: "createCube",
    value: function createCube(params) {
      params = params || {};
      var materialParams = {};

      if (params.image) {
        var texture = new THREE.TextureLoader().load(params.image);
        texture.wrapS = THREE.RepeatWrapping;
        texture.wrapT = THREE.RepeatWrapping;
        texture.repeat.set(params.repeatX || 1, params.repeatY || 1);
        materialParams.map = texture;
      }

      if (params.emissive) {
        materialParams.emissive = new THREE.Color(params.emissive);
        materialParams.emissiveIntensity = 1.0;
        materialParams.emissiveMap = null;
      }

      var cube = new THREE.Mesh(new THREE.CubeGeometry(1, 1, 1), new THREE.MeshLambertMaterial(materialParams));
      cube.scale.set(params.x || 1, params.y || 1, params.z || 1);

      if (params.position) {
        cube.position.set(params.position.x || 0, params.position.y || 0, params.position.z || 0);
      }

      if (params.rotation) {
        cube.rotation.set(params.rotation.x || 0, params.rotation.y || 0, params.rotation.z || 0);
      }

      if (!params.noScene) {
        this.scene.add(cube);
      }

      return cube;
    }
  }, {
    key: "loadGLTF",
    value: function loadGLTF(_ref) {
      var _this2 = this;

      var baseUrl = _ref.baseUrl,
          _ref$isGLTF = _ref.isGLTF,
          isGLTF = _ref$isGLTF === void 0 ? false : _ref$isGLTF,
          _ref$noScene = _ref.noScene,
          noScene = _ref$noScene === void 0 ? false : _ref$noScene,
          _ref$callback = _ref.callback,
          callback = _ref$callback === void 0 ? function () {
        return null;
      } : _ref$callback,
          _ref$castShadow = _ref.castShadow,
          castShadow = _ref$castShadow === void 0 ? true : _ref$castShadow,
          _ref$receiveShadow = _ref.receiveShadow,
          receiveShadow = _ref$receiveShadow === void 0 ? true : _ref$receiveShadow;
      var loader = new GLTFLoader();
      var url = "".concat(baseUrl, ".glb").concat(isGLTF ? '.gltf' : '');
      loader.load(url, function (loadedModel) {
        loadedModel.scene.traverse(function (child) {
          if (child instanceof THREE.Mesh) {
            child.castShadow = castShadow;
            child.receiveShadow = receiveShadow;
          }
        });
        callback(loadedModel);

        if (!noScene) {
          _this2.scene.add(loadedModel.scene);
        }
      });
    }
  }]);

  return Models;
}(_AutoBindMethods__WEBPACK_IMPORTED_MODULE_0__["default"]);



/***/ }),

/***/ "../client/src/js/Particles.js":
/*!*************************************!*\
  !*** ../client/src/js/Particles.js ***!
  \*************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Particles; });
/* harmony import */ var _Scene__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Scene */ "../client/src/js/Scene.js");
/* harmony import */ var _AutoBindMethods__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./AutoBindMethods */ "../client/src/js/AutoBindMethods.js");
/* harmony import */ var _GameObjects_AnimatedGameObject__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./GameObjects/AnimatedGameObject */ "../client/src/js/GameObjects/AnimatedGameObject.js");
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }





var Particles = /*#__PURE__*/function (_AutoBindMethods) {
  _inherits(Particles, _AutoBindMethods);

  var _super = _createSuper(Particles);

  /**
   * @param {Scene} scene
   */
  function Particles(scene) {
    var _this;

    _classCallCheck(this, Particles);

    _this = _super.call(this);
    _this.scene = scene;
    _this.particles = [];
    return _this;
  }

  _createClass(Particles, [{
    key: "update",
    value: function update() {
      this.particles.forEach(function (p) {
        return p.update();
      });
    }
  }, {
    key: "createSnow",
    value: function createSnow() {
      var _this2 = this;

      var area = new THREE.Vector3(100, 25, 100);
      this.createParticles({
        particleCount: 10000,
        color: 0x888888,
        blending: THREE.NormalBlending,
        position: new THREE.Vector3(-area.x / 2, 0, -area.z / 2),
        getParticlePosition: function getParticlePosition(i) {
          var position = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _this2.getRandomPosition(area);

          if (position.y < 0) {
            var newPosition = _this2.getRandomPosition(area);

            position.x = newPosition.x;
            position.y = area.y;
            position.z = newPosition.z;
          }

          return position;
        }
      });
    }
  }, {
    key: "createEffect",
    value: function createEffect(_ref) {
      var _this3 = this;

      var _ref$scale = _ref.scale,
          scale = _ref$scale === void 0 ? 1.5 : _ref$scale,
          _ref$effect = _ref.effect,
          effect = _ref$effect === void 0 ? 'level-up-alt/level-up' : _ref$effect,
          _ref$position = _ref.position,
          position = _ref$position === void 0 ? {} : _ref$position,
          attachTo = _ref.attachTo,
          _ref$lifeTime = _ref.lifeTime,
          lifeTime = _ref$lifeTime === void 0 ? 2080 : _ref$lifeTime;
      this.scene.models.loadGLTF({
        baseUrl: './assets/models/effects/' + effect,
        noScene: true,
        castShadow: false,
        receiveShadow: false,
        callback: function callback(loadedObject) {
          loadedObject.scene.scale.set(scale, scale, scale);
          loadedObject.scene.traverse(function (child) {
            if (child.isMesh) {
              child.material.transparent = true;
              child.material.alphaTest = 0.5;
            }
          });
          loadedObject.scene.position.set(position.x || 0, position.y || 0, position.z || 0);

          if (attachTo) {
            attachTo.add(loadedObject.scene);
          }

          var effect = new _GameObjects_AnimatedGameObject__WEBPACK_IMPORTED_MODULE_2__["default"]({
            object: loadedObject.scene,
            animations: loadedObject.animations
          });

          _this3.scene.gameObjectsService.hookGameObject(effect);

          _this3.scene.intervals.setTimeout(function () {
            return _this3.scene.gameObjectsService.destroyGameObject(effect);
          }, lifeTime);
        }
      });
    }
  }, {
    key: "loadEffect",
    value: function loadEffect() {
      var _this4 = this;

      var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          _ref2$particleName = _ref2.particleName,
          particleName = _ref2$particleName === void 0 ? 'blood' : _ref2$particleName,
          _ref2$position = _ref2.position,
          position = _ref2$position === void 0 ? new THREE.Vector3() : _ref2$position,
          _ref2$scale = _ref2.scale,
          scale = _ref2$scale === void 0 ? new THREE.Vector3(1, 1, 1) : _ref2$scale;

      var gameObjectsService = this.scene.gameObjectsService;
      return this.scene.models.loadGLTF({
        baseUrl: "./assets/models/effects/".concat(particleName),
        castShadow: false,
        receiveShadow: false,
        callback: function callback(gltf) {
          gltf.scene.position.copy(position);
          gltf.scene.scale.copy(scale);
          gltf.scene.rotation.set(0, Math.random() * Math.PI, 0);
          var particleSystem = gameObjectsService.hookGameObject(new _GameObjects_AnimatedGameObject__WEBPACK_IMPORTED_MODULE_2__["default"]({
            object: gltf.scene,
            animations: gltf.animations
          }));

          _this4.scene.intervals.setTimeout(function () {
            return _this4.scene.gameObjectsService.destroyGameObject(particleSystem);
          }, 625);
        }
      });
    }
  }, {
    key: "getRandomPosition",
    value: function getRandomPosition(area) {
      var random = function random(from, to) {
        return Math.random() * (to - from) + from;
      };

      return new THREE.Vector3(random(0, area.x), random(0, area.y), random(0, area.z));
    }
  }, {
    key: "createParticles",
    value: function createParticles() {
      var _this5 = this;

      var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          _ref3$particleCount = _ref3.particleCount,
          particleCount = _ref3$particleCount === void 0 ? 1000 : _ref3$particleCount,
          _ref3$noScene = _ref3.noScene,
          noScene = _ref3$noScene === void 0 ? false : _ref3$noScene,
          _ref3$position = _ref3.position,
          position = _ref3$position === void 0 ? new THREE.Vector3(0, 5, 0) : _ref3$position,
          _ref3$size = _ref3.size,
          size = _ref3$size === void 0 ? 0.01 : _ref3$size,
          _ref3$color = _ref3.color,
          color = _ref3$color === void 0 ? 0xFFFFFF : _ref3$color,
          _ref3$blending = _ref3.blending,
          blending = _ref3$blending === void 0 ? THREE.AdditiveBlending : _ref3$blending,
          _ref3$depthTest = _ref3.depthTest,
          depthTest = _ref3$depthTest === void 0 ? true : _ref3$depthTest,
          _ref3$transparent = _ref3.transparent,
          transparent = _ref3$transparent === void 0 ? true : _ref3$transparent,
          _ref3$area = _ref3.area,
          area = _ref3$area === void 0 ? new THREE.Vector3(10, 5, 10) : _ref3$area,
          _ref3$getParticleVelo = _ref3.getParticleVelocity,
          getParticleVelocity = _ref3$getParticleVelo === void 0 ? function () {
        return new THREE.Vector3(-0.01, -0.01, 0);
      } : _ref3$getParticleVelo,
          _ref3$getParticlePosi = _ref3.getParticlePosition,
          getParticlePosition = _ref3$getParticlePosi === void 0 ? function (i) {
        var position = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _this5.getRandomPosition(area);
        return position;
      } : _ref3$getParticlePosi;

      var particles = new THREE.Geometry();
      var material = new THREE.PointCloudMaterial({
        color: color,
        size: size,
        blending: blending,
        depthTest: depthTest,
        transparent: transparent
      });

      for (var i = 0; i < particleCount; i++) {
        var particle = getParticlePosition(i);
        particles.velocity = getParticleVelocity(i, particle);
        particles.vertices.push(particle);
      }

      var particleSystem = new THREE.PointCloud(particles, material);
      particleSystem.position.copy(position);
      this.particles.push({
        object: particleSystem,
        update: function update() {
          var index = particleCount;

          while (index--) {
            var _particle = particles.vertices[index];
            _particle.velocity = getParticleVelocity(index, _particle);
            _particle.x += _particle.velocity.x;
            _particle.y += _particle.velocity.y;
            _particle.z += _particle.velocity.z;
            var particlePosition = getParticlePosition(index, _particle);
            _particle.x = particlePosition.x;
            _particle.y = particlePosition.y;
            _particle.z = particlePosition.z;
          }

          particles.verticesNeedUpdate = true;
        }
      });

      if (!noScene) {
        this.scene.add(particleSystem);
      }

      return particleSystem;
    }
  }]);

  return Particles;
}(_AutoBindMethods__WEBPACK_IMPORTED_MODULE_1__["default"]);



/***/ }),

/***/ "../client/src/js/PathFinder.js":
/*!**************************************!*\
  !*** ../client/src/js/PathFinder.js ***!
  \**************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Colliders; });
/* harmony import */ var _AutoBindMethods__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AutoBindMethods */ "../client/src/js/AutoBindMethods.js");
/* harmony import */ var _Utils_AStar__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Utils/AStar */ "../client/src/js/Utils/AStar.js");
/* harmony import */ var _Utils_AStar__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_Utils_AStar__WEBPACK_IMPORTED_MODULE_1__);
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }




var Colliders = /*#__PURE__*/function (_AutoBindMethods) {
  _inherits(Colliders, _AutoBindMethods);

  var _super = _createSuper(Colliders);

  function Colliders(scene) {
    var _this;

    _classCallCheck(this, Colliders);

    _this = _super.call(this);
    _this.scene = scene;
    _this.areas = [];
    return _this;
  }

  _createClass(Colliders, [{
    key: "getNextPoint",
    value: function getNextPoint(from, to) {
      var area = this.getAreaByPosition(from),
          fromX = area.worldXToWaypointX(from.x),
          fromY = area.worldZToWaypointY(from.z),
          areaTo = this.getAreaByPosition(to);
      var toX;
      var toY;
      var portal;

      if (area.id === areaTo.id) {
        toX = area.worldXToWaypointX(to.x);
        toY = area.worldZToWaypointY(to.z);
      } else {
        portal = area.getWaypointPortals().find(function (portal) {
          return portal.to.areaId === areaTo.id;
        });

        if (portal) {
          toX = portal.from.x;
          toY = portal.from.y;
        } else {
          return to;
        }
      }

      var start = this.getFreeGraphPoint(area.graph, fromX, fromY);
      var end = this.getFreeGraphPoint(area.graph, toX, toY);

      if (start && end) {
        var result = _Utils_AStar__WEBPACK_IMPORTED_MODULE_1___default.a.astar.search(area.graph, start, end, {
          heuristic: _Utils_AStar__WEBPACK_IMPORTED_MODULE_1___default.a.astar.heuristics.diagonal
        });
        var nextGraphPoint = result[2] || result[1];

        if (nextGraphPoint) {
          var nextWorldPoint = new THREE.Vector3(area.waypointXToWorldX(nextGraphPoint.x), to.y, area.waypointYToWorldZ(nextGraphPoint.y));
          return nextWorldPoint;
        } else {
          return null;
        }
      }

      return to;
    }
  }, {
    key: "getFreeGraphPoint",
    value: function getFreeGraphPoint(graph, x, y) {
      var grid = graph.grid;

      var getWeight = function getWeight(x, y) {
        return grid[x] && grid[x][y] && grid[x][y].weight;
      };

      var getNearFreePoint = function getNearFreePoint(range) {
        return getWeight(x + range, y) && grid[x + range][y] || getWeight(x - range, y) && grid[x - range][y] || getWeight(x, y + range) && grid[x][y + range] || getWeight(x, y - range) && grid[x][y - range];
      };

      return getWeight(grid[x][y]) && grid[x][y] || getNearFreePoint(1) || getNearFreePoint(2) || getNearFreePoint(3) || getNearFreePoint(4) || null;
    }
  }, {
    key: "rebuildAreas",
    value: function rebuildAreas() {
      if (this.scene.location) {
        this.areas = this.scene.location.getAreas().map(function (area) {
          return _objectSpread(_objectSpread({}, area), {}, {
            graph: new _Utils_AStar__WEBPACK_IMPORTED_MODULE_1___default.a.Graph(area.getWaypoints(), {
              diagonal: true
            })
          });
        });
      }
    }
  }, {
    key: "getAreaByPosition",
    value: function getAreaByPosition(position) {
      return this.areas.find(function (area) {
        return area.includesPosition(position);
      });
    }
  }]);

  return Colliders;
}(_AutoBindMethods__WEBPACK_IMPORTED_MODULE_0__["default"]);



/***/ }),

/***/ "../client/src/js/Scene.js":
/*!*********************************!*\
  !*** ../client/src/js/Scene.js ***!
  \*********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Scene; });
/* harmony import */ var _GameObjects__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./GameObjects */ "../client/src/js/GameObjects.js");
/* harmony import */ var _AutoBindMethods__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./AutoBindMethods */ "../client/src/js/AutoBindMethods.js");
/* harmony import */ var _Camera__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Camera */ "../client/src/js/Camera.js");
/* harmony import */ var _Connection__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Connection */ "../client/src/js/Connection.js");
/* harmony import */ var _Input__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Input */ "../client/src/js/Input.js");
/* harmony import */ var _Intervals__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Intervals */ "../client/src/js/Intervals.js");
/* harmony import */ var _Locations_DreamTown__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Locations/DreamTown */ "../client/src/js/Locations/DreamTown/index.js");
/* harmony import */ var _Colliders__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./Colliders */ "../client/src/js/Colliders.js");
/* harmony import */ var _Models__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./Models */ "../client/src/js/Models.js");
/* harmony import */ var _Particles__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./Particles */ "../client/src/js/Particles.js");
/* harmony import */ var _PathFinder__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./PathFinder */ "../client/src/js/PathFinder.js");
/* harmony import */ var _Units__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./Units */ "../client/src/js/Units.js");
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

 // import Audio from './Audio';














var Scene = /*#__PURE__*/function (_AutoBindMethods) {
  _inherits(Scene, _AutoBindMethods);

  var _super = _createSuper(Scene);

  /**
   * @param {Renderer} renderer
   * @param {{
   *  setRestartButtonVisible: function,
   *  setPause: function,
   *  restartGame: function,
   *  isPause: function,
   *  isThirdPerson: function,
   *  update: function,
   *  updatePlayerParams: function,
   *  clearHpBars: function,
   *  switchCamera: function,
   *  setFps: function,
   *  notify: function,
   * }} ui
   */
  function Scene(renderer, ui) {
    var _this;

    _classCallCheck(this, Scene);

    _this = _super.call(this);
    _this.clock = new THREE.Clock();
    _this.intervals = new _Intervals__WEBPACK_IMPORTED_MODULE_5__["default"](_assertThisInitialized(_this));
    _this.renderer = renderer;
    _this.ui = ui;
    _this.models = new _Models__WEBPACK_IMPORTED_MODULE_8__["default"](_assertThisInitialized(_this));
    _this.scene = new THREE.Scene();
    _this.pathFinder = new _PathFinder__WEBPACK_IMPORTED_MODULE_10__["default"](_assertThisInitialized(_this));
    _this.colliders = new _Colliders__WEBPACK_IMPORTED_MODULE_7__["default"](_assertThisInitialized(_this));
    _this.units = new _Units__WEBPACK_IMPORTED_MODULE_11__["default"](_assertThisInitialized(_this));
    _this.camera = new _Camera__WEBPACK_IMPORTED_MODULE_2__["default"](_assertThisInitialized(_this)); // this.audio = new Audio(this);

    _this.input = new _Input__WEBPACK_IMPORTED_MODULE_4__["default"]({
      onAction: function onAction() {
        return _this.level.onAction();
      },
      onExit: function onExit() {
        return _this.ui.setPause(!_this.ui.isPause());
      },
      onZoom: function onZoom(zoom) {
        return _this.camera.addY(zoom);
      },
      onSwitchCamera: function onSwitchCamera() {
        return _this.ui.switchCamera();
      }
    });
    _this.gameObjectsService = new _GameObjects__WEBPACK_IMPORTED_MODULE_0__["default"](_assertThisInitialized(_this));
    _this.particles = new _Particles__WEBPACK_IMPORTED_MODULE_9__["default"](_assertThisInitialized(_this));
    var connectionHostname = window.location.hostname === 'localhost' ? 'localhost' : 'gohtml.ru';
    var isSSL = window.location.hostname !== 'localhost';
    _this.connection = new _Connection__WEBPACK_IMPORTED_MODULE_3__["default"](_assertThisInitialized(_this), connectionHostname, 1337, isSSL);
    _this.location = new _Locations_DreamTown__WEBPACK_IMPORTED_MODULE_6__["default"](_assertThisInitialized(_this));

    _this.intervals.setInterval(function () {
      _this.ui.setFps(_this.renderer.fps, _this.renderer.targetFps);

      _this.ui.setPing(_this.connection.ping);

      _this.ui.updatePlayerParams();
    }, 1000);

    _this.input.isThirdPerson = ui.isThirdPerson();

    _this.pathFinder.rebuildAreas();

    _this.clearScene();

    _this.animate(); // console.log('Scene', this);


    return _this;
  }

  _createClass(Scene, [{
    key: "clearScene",
    value: function clearScene() {
      this.gameObjectsService.removeAll();
      this.location.afterClear();
    }
  }, {
    key: "animate",
    value: function animate() {
      var now = Date.now();
      var deltaTime = this.intervals.getDeltaTime(now);
      this.intervals.update(now);
      var gameTime = this.intervals.getTimePassed();
      this.gameObjectsService.update(gameTime, deltaTime);

      if (!this.ui.isPause()) {
        this.camera.update(gameTime, deltaTime);
        this.input.update();
      }

      this.ui.update();
      this.location.update();
      this.particles.update();
      this.connection.update(gameTime, deltaTime);
      this.renderer.render(this.scene, this.camera.camera, deltaTime);
      window.requestAnimationFrame(this.animate);
    }
  }, {
    key: "setLoggedUser",
    value: function setLoggedUser(userName, password) {
      this.user = {
        userName: userName,
        password: password
      };
    }
    /**
     * @returns {Player}
     */

  }, {
    key: "getPlayer",
    value: function getPlayer() {
      return this.units.getPlayer();
    }
    /**
     * @param {THREE.Object3D} object
     */

  }, {
    key: "add",
    value: function add(object) {
      this.scene.add(object);
    }
    /**
     * @param {THREE.Object3D} object
     */

  }, {
    key: "remove",
    value: function remove(object) {
      this.scene.remove(object);
    }
  }, {
    key: "notify",
    value: function notify(text) {
      this.ui.notify(text);
    }
  }]);

  return Scene;
}(_AutoBindMethods__WEBPACK_IMPORTED_MODULE_1__["default"]);



/***/ }),

/***/ "../client/src/js/Units.js":
/*!*********************************!*\
  !*** ../client/src/js/Units.js ***!
  \*********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Units; });
/* harmony import */ var _AutoBindMethods__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AutoBindMethods */ "../client/src/js/AutoBindMethods.js");
/* harmony import */ var _GameObjects__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./GameObjects */ "../client/src/js/GameObjects.js");
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }




var Units = /*#__PURE__*/function (_AutoBindMethods) {
  _inherits(Units, _AutoBindMethods);

  var _super = _createSuper(Units);

  function Units(scene) {
    var _this;

    _classCallCheck(this, Units);

    _this = _super.call(this);
    _this.scene = scene;
    _this.player = undefined;
    return _this;
  }

  _createClass(Units, [{
    key: "getUnits",
    value: function getUnits() {
      return this.scene.gameObjectsService.getUnits();
    }
  }, {
    key: "getAliveUnits",
    value: function getAliveUnits() {
      return this.getUnits().filter(function (gameObject) {
        return gameObject.isAlive();
      });
    }
  }, {
    key: "getPlayer",
    value: function getPlayer() {
      return this.player;
    }
  }, {
    key: "setDefaultPlayerParams",
    value: function setDefaultPlayerParams(defaultParams) {
      this.defaultParams = defaultParams;
    }
  }, {
    key: "createPlayer",
    value: function createPlayer() {
      var _this2 = this;

      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          _ref$onCreate = _ref.onCreate,
          onCreate = _ref$onCreate === void 0 ? function () {
        return null;
      } : _ref$onCreate,
          _ref$onKill = _ref.onKill,
          _onKill = _ref$onKill === void 0 ? function () {
        return null;
      } : _ref$onKill,
          _ref$onDamageDeal = _ref.onDamageDeal,
          _onDamageDeal = _ref$onDamageDeal === void 0 ? function () {
        return null;
      } : _ref$onDamageDeal,
          _ref$onDamageTaken = _ref.onDamageTaken,
          _onDamageTaken = _ref$onDamageTaken === void 0 ? function () {
        return null;
      } : _ref$onDamageTaken,
          _ref$onDie = _ref.onDie,
          _onDie = _ref$onDie === void 0 ? function () {
        return null;
      } : _ref$onDie,
          _ref$onLevelUp = _ref.onLevelUp,
          _onLevelUp = _ref$onLevelUp === void 0 ? function () {
        return null;
      } : _ref$onLevelUp;

      var gameObjectsService = this.scene.gameObjectsService;
      return this.scene.models.loadGLTF({
        baseUrl: './assets/models/units/player',
        callback: function callback(loadedModel) {
          var defaultParams = _this2.defaultParams;
          loadedModel.scene.position.set(0, 0.1, 0);
          /**
           * @type {Player}
           */

          var player = gameObjectsService.hookGameObject(new _GameObjects__WEBPACK_IMPORTED_MODULE_1__["Player"]({
            animations: loadedModel.animations,
            object: loadedModel.scene,
            input: _this2.scene.input,
            complexAnimations: true,
            checkWay: _this2.scene.colliders.checkWay,
            name: _this2.scene.user ? _this2.scene.user.userName : ' ',
            onDamageDeal: function onDamageDeal(damagedUnit) {
              return _onDamageDeal(damagedUnit);
            },
            onDamageTaken: function onDamageTaken(attacker) {
              _onDamageTaken(attacker);

              _this2.scene.particles.loadEffect({
                position: player.position.clone().add(new THREE.Vector3(0, 0.75, 0))
              });
            },
            onKill: function onKill(object) {
              return _onKill(object);
            },
            onDie: function onDie(killer) {
              return _onDie(killer);
            },
            onLevelUp: function onLevelUp() {
              _this2.scene.particles.createEffect({
                effect: 'level-up-alt/level-up',
                scale: 1.5,
                attachTo: _this2.player.object
              });

              _onLevelUp();
            },
            attack: function attack() {
              return gameObjectsService.attack(player);
            },
            fire: function fire() {
              return gameObjectsService.fire(player);
            },
            destroy: function destroy() {
              return gameObjectsService.destroyGameObject(player);
            }
          }));
          _this2.player = player;
          onCreate(player);

          if (defaultParams && defaultParams.params) {
            var position = defaultParams.position,
                rotation = defaultParams.rotation,
                params = defaultParams.params;
            var playerParams = player.params;
            player.position.set(position.x, position.y, position.z);
            player.rotation.set(rotation.x, rotation.y, rotation.z);
            playerParams.hp = params.hp;
            playerParams.hpMax = params.hpMax;
            playerParams.fraction = params.fraction;
            playerParams.level = params.level;
            playerParams.damage = params.damage;
            playerParams.speed = params.speed;
            playerParams.experience = params.experience;
            playerParams.money = params.money;
            playerParams.unspentTalents = params.unspentTalents;

            if (!playerParams.hp) {
              player.animationState.isDie = true;
            }
          }
        }
      });
    }
  }, {
    key: "createAI",
    value: function createAI(_ref2) {
      var _this3 = this;

      var fraction = _ref2.fraction,
          level = _ref2.level,
          _ref2$position = _ref2.position,
          x = _ref2$position.x,
          y = _ref2$position.y,
          z = _ref2$position.z,
          _ref2$rotation = _ref2.rotation,
          rotation = _ref2$rotation === void 0 ? {} : _ref2$rotation,
          scale = _ref2.scale,
          _onDie2 = _ref2.onDie,
          name = _ref2.name;
      var gameObjectsService = this.scene.gameObjectsService;

      var getPriority = function getPriority(unit, target) {
        return (target instanceof _GameObjects__WEBPACK_IMPORTED_MODULE_1__["Player"] ? 0.75 : 0) + 1 / Math.ceil(target.position.distanceTo(unit.position));
      };

      this.scene.models.loadGLTF({
        baseUrl: fraction === 'goats' ? './assets/models/units/goat-warrior' : './assets/models/units/enemy',
        callback: function callback(gltf) {
          var networkConnection = _this3.scene.connection;

          if (!networkConnection || !networkConnection.meta || !networkConnection.meta.role || networkConnection.meta.role === 'host') {
            /** @type {AI} */
            var ai = gameObjectsService.hookGameObject(new _GameObjects__WEBPACK_IMPORTED_MODULE_1__["AI"]({
              animations: gltf.animations,
              object: gltf.scene,
              speed: 0.35 + level * 0.025,
              damage: 5 + level * 1.5,
              hp: 70 + level * 30,
              fraction: fraction,
              name: name,
              level: level,
              checkWay: _this3.scene.colliders.checkWay,
              getNextPoint: _this3.scene.pathFinder.getNextPoint,
              attack: function attack() {
                return gameObjectsService.attack(ai);
              },
              onDamageTaken: function onDamageTaken() {
                return _this3.scene.particles.loadEffect({
                  position: ai.position.clone().add(new THREE.Vector3(0, 0.75, 0))
                });
              },
              onDie: function onDie() {
                return _this3.scene.intervals.setTimeout(function () {
                  if (ai.isDead()) {
                    gameObjectsService.destroyGameObject(ai);

                    if (_onDie2) {
                      _onDie2();
                    }
                  }
                }, 10000);
              },
              findTarget: function findTarget() {
                var nearEnemyUnits = _this3.getAliveUnits().filter(function (unit) {
                  return unit !== ai && unit.getFraction() !== fraction && unit.position.distanceTo(ai.position) < 15;
                }).sort(function (unitA, unitB) {
                  return getPriority(ai, unitB) - getPriority(ai, unitA);
                });

                return nearEnemyUnits.length ? nearEnemyUnits[0] : null;
              }
            }));
            ai.position.set(x || 0, y || 0, z || 0);
            ai.rotation.set(rotation.x || 0, rotation.y || 0, rotation.z || 0);

            if (scale) {
              ai.object.scale.set(scale, scale, scale);
            }
          }
        }
      });
    }
  }, {
    key: "createNetworkAI",
    value: function createNetworkAI(_ref3) {
      var _this4 = this;

      var _ref3$params = _ref3.params,
          fraction = _ref3$params.fraction,
          unitNetworkId = _ref3$params.unitNetworkId,
          level = _ref3$params.level,
          name = _ref3$params.name,
          hp = _ref3$params.hp,
          hpMax = _ref3$params.hpMax,
          damage = _ref3$params.damage,
          _ref3$params$fromNetw = _ref3$params.fromNetwork,
          fromNetwork = _ref3$params$fromNetw === void 0 ? true : _ref3$params$fromNetw,
          position = _ref3.position,
          onDie = _ref3.onDie;

      var _callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {};

      var gameObjectsService = this.scene.gameObjectsService;

      var getPriority = function getPriority(unit, target) {
        return (target instanceof _GameObjects__WEBPACK_IMPORTED_MODULE_1__["Player"] ? 0.75 : 0) + 1 / Math.ceil(target.position.distanceTo(unit.position));
      };

      return this.scene.models.loadGLTF({
        baseUrl: fraction === 'goats' ? './assets/models/units/goat-warrior' : './assets/models/units/enemy',
        callback: function callback(loadedObject) {
          var ai = gameObjectsService.hookGameObject(new _GameObjects__WEBPACK_IMPORTED_MODULE_1__["AI"]({
            object: loadedObject.scene,
            animations: loadedObject.animations,
            unitNetworkId: unitNetworkId,
            fraction: fraction,
            level: level,
            name: name,
            hp: hp,
            hpMax: hpMax,
            damage: damage,
            fromNetwork: fromNetwork,
            checkWay: _this4.scene.colliders.checkWay,
            getNextPoint: _this4.scene.pathFinder.getNextPoint,
            attack: function attack() {
              return gameObjectsService.attack(ai);
            },
            onDamageTaken: function onDamageTaken() {
              return _this4.scene.particles.loadEffect({
                position: ai.position.clone().add(new THREE.Vector3(0, 0.75, 0))
              });
            },
            onDie: function onDie() {
              return _this4.scene.intervals.setTimeout(function () {
                if (ai.isDead()) {
                  gameObjectsService.destroyGameObject(ai);

                  if (!ai.params.fromNetwork) {
                    _this4.createNetworkAI({
                      fraction: fraction,
                      unitNetworkId: unitNetworkId,
                      name: name,
                      hp: hp,
                      hpMax: hpMax,
                      damage: damage,
                      fromNetwork: false,
                      level: level + 1 + Math.round(Math.random() * level)
                    });
                  }
                }
              }, 10000);
            },
            findTarget: function findTarget() {
              if (!ai.params.fromNetwork) {
                var nearEnemyUnits = _this4.getAliveUnits().filter(function (unit) {
                  return unit !== ai && unit.getFraction() !== fraction && unit.position.distanceTo(ai.position) < 15;
                }).sort(function (unitA, unitB) {
                  return getPriority(ai, unitB) - getPriority(ai, unitA);
                });

                return nearEnemyUnits.length ? nearEnemyUnits[0] : null;
              }
            }
          }));

          _callback(ai);
        }
      });
    }
  }, {
    key: "createNetworkPlayer",
    value: function createNetworkPlayer(_ref4, _callback2) {
      var _this5 = this;

      var _ref4$params = _ref4.params,
          connectionId = _ref4$params.connectionId,
          unitNetworkId = _ref4$params.unitNetworkId,
          name = _ref4$params.name,
          _onDamageDeal2 = _ref4.onDamageDeal,
          _onKill2 = _ref4.onKill,
          _onDie3 = _ref4.onDie,
          _onLevelUp2 = _ref4.onLevelUp,
          _onDamageTaken2 = _ref4.onDamageTaken;
      var gameObjectsService = this.scene.gameObjectsService;
      return this.scene.models.loadGLTF({
        baseUrl: './assets/models/units/network-player',
        callback: function callback(loadedObject) {
          /** @type {Player} */
          var player = gameObjectsService.hookGameObject(new _GameObjects__WEBPACK_IMPORTED_MODULE_1__["Player"]({
            object: loadedObject.scene,
            animations: loadedObject.animations,
            unitNetworkId: unitNetworkId,
            connectionId: connectionId,
            name: name,
            fromNetwork: true,
            complexAnimations: true,
            checkWay: _this5.scene.colliders.checkWay,
            input: {
              vertical: 0,
              horizontal: 0,
              jump: false,
              cursor: {
                x: 0,
                y: 0
              },
              look: {
                vertical: 0,
                horizontal: 0
              }
            },
            onDie: function onDie(killer) {
              return _this5.scene.intervals.setTimeout(function () {
                if (player.isDead()) {
                  gameObjectsService.destroyGameObject(player);
                }

                _onDie3 && _onDie3(killer);
              }, 10000);
            },
            onDamageDeal: function onDamageDeal(damagedUnit) {
              return _onDamageDeal2 && _onDamageDeal2(damagedUnit);
            },
            onDamageTaken: function onDamageTaken(attacker) {
              _onDamageTaken2 && _onDamageTaken2(attacker);

              _this5.scene.particles.loadEffect({
                position: player.position.clone().add(new THREE.Vector3(0, 0.75, 0))
              });
            },
            onKill: function onKill(object) {
              return _onKill2 && _onKill2(object);
            },
            onLevelUp: function onLevelUp() {
              _this5.scene.particles.createEffect({
                effect: 'level-up-alt/level-up',
                scale: 1.5,
                attachTo: _this5.player.object
              });

              _onLevelUp2 && _onLevelUp2();
            },
            attack: function attack() {
              return gameObjectsService.attack(player);
            },
            fire: function fire() {
              return gameObjectsService.fire(player);
            },
            destroy: function destroy() {
              return gameObjectsService.destroyGameObject(player);
            }
          }));

          _callback2(player);
        }
      });
    }
  }]);

  return Units;
}(_AutoBindMethods__WEBPACK_IMPORTED_MODULE_0__["default"]);



/***/ }),

/***/ "../client/src/js/Utils/AStar.js":
/*!***************************************!*\
  !*** ../client/src/js/Utils/AStar.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

// javascript-astar 0.4.1
// http://github.com/bgrins/javascript-astar
// Freely distributable under the MIT License.
// Implements the astar search algorithm in javascript using a Binary Heap.
// Includes Binary Heap (with modifications) from Marijn Haverbeke.
// http://eloquentjavascript.net/appendix2.html
(function (definition) {
  /* global module, define */
  if (( false ? undefined : _typeof(module)) === 'object' && _typeof(module.exports) === 'object') {
    module.exports = definition();
  } else if (true) {
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (definition),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else { var exports; }
})(function () {
  function pathTo(node) {
    var curr = node;
    var path = [];

    while (curr.parent) {
      path.unshift(curr);
      curr = curr.parent;
    }

    return path;
  }

  function getHeap() {
    return new BinaryHeap(function (node) {
      return node.f;
    });
  }

  var astar = {
    /**
     * Perform an A* Search on a graph given a start and end node.
     * @param {Graph} graph
     * @param {GridNode} start
     * @param {GridNode} end
     * @param {Object} [options]
     * @param {bool} [options.closest] Specifies whether to return the
     path to the closest node if the target is unreachable.
     * @param {Function} [options.heuristic] Heuristic function (see
     *          astar.heuristics).
     */
    search: function search(graph, start, end, options) {
      graph.cleanDirty();
      options = options || {};
      var heuristic = options.heuristic || astar.heuristics.manhattan;
      var closest = options.closest || false;
      var openHeap = getHeap();
      var closestNode = start; // set the start node to be the closest if required

      start.h = heuristic(start, end);
      graph.markDirty(start);
      openHeap.push(start);

      while (openHeap.size() > 0) {
        // Grab the lowest f(x) to process next.  Heap keeps this sorted for us.
        var currentNode = openHeap.pop(); // End case -- result has been found, return the traced path.

        if (currentNode === end) {
          return pathTo(currentNode);
        } // Normal case -- move currentNode from open to closed, process each of its neighbors.


        currentNode.closed = true; // Find all neighbors for the current node.

        var neighbors = graph.neighbors(currentNode);

        for (var i = 0, il = neighbors.length; i < il; ++i) {
          var neighbor = neighbors[i];

          if (neighbor.closed || neighbor.isWall()) {
            // Not a valid node to process, skip to next neighbor.
            continue;
          } // The g score is the shortest distance from start to current node.
          // We need to check if the path we have arrived at this neighbor is the shortest one we have seen yet.


          var gScore = currentNode.g + neighbor.getCost(currentNode);
          var beenVisited = neighbor.visited;

          if (!beenVisited || gScore < neighbor.g) {
            // Found an optimal (so far) path to this node.  Take score for node to see how good it is.
            neighbor.visited = true;
            neighbor.parent = currentNode;
            neighbor.h = neighbor.h || heuristic(neighbor, end);
            neighbor.g = gScore;
            neighbor.f = neighbor.g + neighbor.h;
            graph.markDirty(neighbor);

            if (closest) {
              // If the neighbour is closer than the current closestNode or if it's equally close but has
              // a cheaper path than the current closest node then it becomes the closest node
              if (neighbor.h < closestNode.h || neighbor.h === closestNode.h && neighbor.g < closestNode.g) {
                closestNode = neighbor;
              }
            }

            if (!beenVisited) {
              // Pushing to heap will put it in proper place based on the 'f' value.
              openHeap.push(neighbor);
            } else {
              // Already seen the node, but since it has been rescored we need to reorder it in the heap
              openHeap.rescoreElement(neighbor);
            }
          }
        }
      }

      if (closest) {
        return pathTo(closestNode);
      } // No result was found - empty array signifies failure to find path.


      return [];
    },
    // See list of heuristics: http://theory.stanford.edu/~amitp/GameProgramming/Heuristics.html
    heuristics: {
      manhattan: function manhattan(pos0, pos1) {
        var d1 = Math.abs(pos1.x - pos0.x);
        var d2 = Math.abs(pos1.y - pos0.y);
        return d1 + d2;
      },
      diagonal: function diagonal(pos0, pos1) {
        var D = 1;
        var D2 = Math.sqrt(2);
        var d1 = Math.abs(pos1.x - pos0.x);
        var d2 = Math.abs(pos1.y - pos0.y);
        return D * (d1 + d2) + (D2 - 2 * D) * Math.min(d1, d2);
      }
    },
    cleanNode: function cleanNode(node) {
      node.f = 0;
      node.g = 0;
      node.h = 0;
      node.visited = false;
      node.closed = false;
      node.parent = null;
    }
  };
  /**
   * A graph memory structure
   * @param {Array} gridIn 2D array of input weights
   * @param {Object} [options]
   * @param {bool} [options.diagonal] Specifies whether diagonal moves are allowed
   */

  function Graph(gridIn, options) {
    options = options || {};
    this.nodes = [];
    this.diagonal = !!options.diagonal;
    this.grid = [];

    for (var x = 0; x < gridIn.length; x++) {
      this.grid[x] = [];

      for (var y = 0, row = gridIn[x]; y < row.length; y++) {
        var node = new GridNode(x, y, row[y]);
        this.grid[x][y] = node;
        this.nodes.push(node);
      }
    }

    this.init();
  }

  Graph.prototype.init = function () {
    this.dirtyNodes = [];

    for (var i = 0; i < this.nodes.length; i++) {
      astar.cleanNode(this.nodes[i]);
    }
  };

  Graph.prototype.cleanDirty = function () {
    for (var i = 0; i < this.dirtyNodes.length; i++) {
      astar.cleanNode(this.dirtyNodes[i]);
    }

    this.dirtyNodes = [];
  };

  Graph.prototype.markDirty = function (node) {
    this.dirtyNodes.push(node);
  };

  Graph.prototype.neighbors = function (node) {
    var ret = [];
    var x = node.x;
    var y = node.y;
    var grid = this.grid; // West

    if (grid[x - 1] && grid[x - 1][y]) {
      ret.push(grid[x - 1][y]);
    } // East


    if (grid[x + 1] && grid[x + 1][y]) {
      ret.push(grid[x + 1][y]);
    } // South


    if (grid[x] && grid[x][y - 1]) {
      ret.push(grid[x][y - 1]);
    } // North


    if (grid[x] && grid[x][y + 1]) {
      ret.push(grid[x][y + 1]);
    }

    if (this.diagonal) {
      // Southwest
      if (grid[x - 1] && grid[x - 1][y - 1]) {
        ret.push(grid[x - 1][y - 1]);
      } // Southeast


      if (grid[x + 1] && grid[x + 1][y - 1]) {
        ret.push(grid[x + 1][y - 1]);
      } // Northwest


      if (grid[x - 1] && grid[x - 1][y + 1]) {
        ret.push(grid[x - 1][y + 1]);
      } // Northeast


      if (grid[x + 1] && grid[x + 1][y + 1]) {
        ret.push(grid[x + 1][y + 1]);
      }
    }

    return ret;
  };

  Graph.prototype.toString = function () {
    var graphString = [];
    var nodes = this.grid;

    for (var x = 0; x < nodes.length; x++) {
      var rowDebug = [];
      var row = nodes[x];

      for (var y = 0; y < row.length; y++) {
        rowDebug.push(row[y].weight);
      }

      graphString.push(rowDebug.join(" "));
    }

    return graphString.join("\n");
  };

  function GridNode(x, y, weight) {
    this.x = x;
    this.y = y;
    this.weight = weight;
  }

  GridNode.prototype.toString = function () {
    return "[" + this.x + " " + this.y + "]";
  };

  GridNode.prototype.getCost = function (fromNeighbor) {
    // Take diagonal weight into consideration.
    if (fromNeighbor && fromNeighbor.x != this.x && fromNeighbor.y != this.y) {
      return this.weight * 1.41421;
    }

    return this.weight;
  };

  GridNode.prototype.isWall = function () {
    return this.weight === 0;
  };

  function BinaryHeap(scoreFunction) {
    this.content = [];
    this.scoreFunction = scoreFunction;
  }

  BinaryHeap.prototype = {
    push: function push(element) {
      // Add the new element to the end of the array.
      this.content.push(element); // Allow it to sink down.

      this.sinkDown(this.content.length - 1);
    },
    pop: function pop() {
      // Store the first element so we can return it later.
      var result = this.content[0]; // Get the element at the end of the array.

      var end = this.content.pop(); // If there are any elements left, put the end element at the
      // start, and let it bubble up.

      if (this.content.length > 0) {
        this.content[0] = end;
        this.bubbleUp(0);
      }

      return result;
    },
    remove: function remove(node) {
      var i = this.content.indexOf(node); // When it is found, the process seen in 'pop' is repeated
      // to fill up the hole.

      var end = this.content.pop();

      if (i !== this.content.length - 1) {
        this.content[i] = end;

        if (this.scoreFunction(end) < this.scoreFunction(node)) {
          this.sinkDown(i);
        } else {
          this.bubbleUp(i);
        }
      }
    },
    size: function size() {
      return this.content.length;
    },
    rescoreElement: function rescoreElement(node) {
      this.sinkDown(this.content.indexOf(node));
    },
    sinkDown: function sinkDown(n) {
      // Fetch the element that has to be sunk.
      var element = this.content[n]; // When at 0, an element can not sink any further.

      while (n > 0) {
        // Compute the parent element's index, and fetch it.
        var parentN = (n + 1 >> 1) - 1;
        var parent = this.content[parentN]; // Swap the elements if the parent is greater.

        if (this.scoreFunction(element) < this.scoreFunction(parent)) {
          this.content[parentN] = element;
          this.content[n] = parent; // Update 'n' to continue at the new position.

          n = parentN;
        } // Found a parent that is less, no need to sink any further.
        else {
            break;
          }
      }
    },
    bubbleUp: function bubbleUp(n) {
      // Look up the target element and its score.
      var length = this.content.length;
      var element = this.content[n];
      var elemScore = this.scoreFunction(element);

      while (true) {
        // Compute the indices of the child elements.
        var child2N = n + 1 << 1;
        var child1N = child2N - 1; // This is used to store the new position of the element, if any.

        var swap = null;
        var child1Score; // If the first child exists (is inside the array)...

        if (child1N < length) {
          // Look it up and compute its score.
          var child1 = this.content[child1N];
          child1Score = this.scoreFunction(child1); // If the score is less than our element's, we need to swap.

          if (child1Score < elemScore) {
            swap = child1N;
          }
        } // Do the same checks for the other child.


        if (child2N < length) {
          var child2 = this.content[child2N];
          var child2Score = this.scoreFunction(child2);

          if (child2Score < (swap === null ? elemScore : child1Score)) {
            swap = child2N;
          }
        } // If the element needs to be moved, swap it, and continue.


        if (swap !== null) {
          this.content[n] = this.content[swap];
          this.content[swap] = element;
          n = swap;
        } // Otherwise, we are done.
        else {
            break;
          }
      }
    }
  };
  return {
    astar: astar,
    Graph: Graph
  };
});
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../server/node_modules/webpack/buildin/module.js */ "./node_modules/webpack/buildin/module.js")(module)))

/***/ }),

/***/ "./index.js":
/*!******************!*\
  !*** ./index.js ***!
  \******************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _standalone_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./standalone-server */ "./standalone-server.js");

/* harmony default export */ __webpack_exports__["default"] = (new _standalone_server__WEBPACK_IMPORTED_MODULE_0__["default"]());

/***/ }),

/***/ "./node_modules/three/src/constants.js":
/*!*********************************************!*\
  !*** ./node_modules/three/src/constants.js ***!
  \*********************************************/
/*! exports provided: REVISION, MOUSE, TOUCH, CullFaceNone, CullFaceBack, CullFaceFront, CullFaceFrontBack, FrontFaceDirectionCW, FrontFaceDirectionCCW, BasicShadowMap, PCFShadowMap, PCFSoftShadowMap, VSMShadowMap, FrontSide, BackSide, DoubleSide, FlatShading, SmoothShading, NoColors, FaceColors, VertexColors, NoBlending, NormalBlending, AdditiveBlending, SubtractiveBlending, MultiplyBlending, CustomBlending, AddEquation, SubtractEquation, ReverseSubtractEquation, MinEquation, MaxEquation, ZeroFactor, OneFactor, SrcColorFactor, OneMinusSrcColorFactor, SrcAlphaFactor, OneMinusSrcAlphaFactor, DstAlphaFactor, OneMinusDstAlphaFactor, DstColorFactor, OneMinusDstColorFactor, SrcAlphaSaturateFactor, NeverDepth, AlwaysDepth, LessDepth, LessEqualDepth, EqualDepth, GreaterEqualDepth, GreaterDepth, NotEqualDepth, MultiplyOperation, MixOperation, AddOperation, NoToneMapping, LinearToneMapping, ReinhardToneMapping, Uncharted2ToneMapping, CineonToneMapping, ACESFilmicToneMapping, UVMapping, CubeReflectionMapping, CubeRefractionMapping, EquirectangularReflectionMapping, EquirectangularRefractionMapping, SphericalReflectionMapping, CubeUVReflectionMapping, CubeUVRefractionMapping, RepeatWrapping, ClampToEdgeWrapping, MirroredRepeatWrapping, NearestFilter, NearestMipmapNearestFilter, NearestMipMapNearestFilter, NearestMipmapLinearFilter, NearestMipMapLinearFilter, LinearFilter, LinearMipmapNearestFilter, LinearMipMapNearestFilter, LinearMipmapLinearFilter, LinearMipMapLinearFilter, UnsignedByteType, ByteType, ShortType, UnsignedShortType, IntType, UnsignedIntType, FloatType, HalfFloatType, UnsignedShort4444Type, UnsignedShort5551Type, UnsignedShort565Type, UnsignedInt248Type, AlphaFormat, RGBFormat, RGBAFormat, LuminanceFormat, LuminanceAlphaFormat, RGBEFormat, DepthFormat, DepthStencilFormat, RedFormat, RGB_S3TC_DXT1_Format, RGBA_S3TC_DXT1_Format, RGBA_S3TC_DXT3_Format, RGBA_S3TC_DXT5_Format, RGB_PVRTC_4BPPV1_Format, RGB_PVRTC_2BPPV1_Format, RGBA_PVRTC_4BPPV1_Format, RGBA_PVRTC_2BPPV1_Format, RGB_ETC1_Format, RGBA_ASTC_4x4_Format, RGBA_ASTC_5x4_Format, RGBA_ASTC_5x5_Format, RGBA_ASTC_6x5_Format, RGBA_ASTC_6x6_Format, RGBA_ASTC_8x5_Format, RGBA_ASTC_8x6_Format, RGBA_ASTC_8x8_Format, RGBA_ASTC_10x5_Format, RGBA_ASTC_10x6_Format, RGBA_ASTC_10x8_Format, RGBA_ASTC_10x10_Format, RGBA_ASTC_12x10_Format, RGBA_ASTC_12x12_Format, LoopOnce, LoopRepeat, LoopPingPong, InterpolateDiscrete, InterpolateLinear, InterpolateSmooth, ZeroCurvatureEnding, ZeroSlopeEnding, WrapAroundEnding, TrianglesDrawMode, TriangleStripDrawMode, TriangleFanDrawMode, LinearEncoding, sRGBEncoding, GammaEncoding, RGBEEncoding, LogLuvEncoding, RGBM7Encoding, RGBM16Encoding, RGBDEncoding, BasicDepthPacking, RGBADepthPacking, TangentSpaceNormalMap, ObjectSpaceNormalMap, ZeroStencilOp, KeepStencilOp, ReplaceStencilOp, IncrementStencilOp, DecrementStencilOp, IncrementWrapStencilOp, DecrementWrapStencilOp, InvertStencilOp, NeverStencilFunc, LessStencilFunc, EqualStencilFunc, LessEqualStencilFunc, GreaterStencilFunc, NotEqualStencilFunc, GreaterEqualStencilFunc, AlwaysStencilFunc, StaticDrawUsage, DynamicDrawUsage, StreamDrawUsage, StaticReadUsage, DynamicReadUsage, StreamReadUsage, StaticCopyUsage, DynamicCopyUsage, StreamCopyUsage */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "REVISION", function() { return REVISION; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MOUSE", function() { return MOUSE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TOUCH", function() { return TOUCH; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CullFaceNone", function() { return CullFaceNone; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CullFaceBack", function() { return CullFaceBack; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CullFaceFront", function() { return CullFaceFront; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CullFaceFrontBack", function() { return CullFaceFrontBack; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FrontFaceDirectionCW", function() { return FrontFaceDirectionCW; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FrontFaceDirectionCCW", function() { return FrontFaceDirectionCCW; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BasicShadowMap", function() { return BasicShadowMap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PCFShadowMap", function() { return PCFShadowMap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PCFSoftShadowMap", function() { return PCFSoftShadowMap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VSMShadowMap", function() { return VSMShadowMap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FrontSide", function() { return FrontSide; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BackSide", function() { return BackSide; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DoubleSide", function() { return DoubleSide; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FlatShading", function() { return FlatShading; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SmoothShading", function() { return SmoothShading; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NoColors", function() { return NoColors; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FaceColors", function() { return FaceColors; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VertexColors", function() { return VertexColors; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NoBlending", function() { return NoBlending; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NormalBlending", function() { return NormalBlending; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AdditiveBlending", function() { return AdditiveBlending; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SubtractiveBlending", function() { return SubtractiveBlending; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MultiplyBlending", function() { return MultiplyBlending; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CustomBlending", function() { return CustomBlending; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AddEquation", function() { return AddEquation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SubtractEquation", function() { return SubtractEquation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ReverseSubtractEquation", function() { return ReverseSubtractEquation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MinEquation", function() { return MinEquation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MaxEquation", function() { return MaxEquation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ZeroFactor", function() { return ZeroFactor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OneFactor", function() { return OneFactor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SrcColorFactor", function() { return SrcColorFactor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OneMinusSrcColorFactor", function() { return OneMinusSrcColorFactor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SrcAlphaFactor", function() { return SrcAlphaFactor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OneMinusSrcAlphaFactor", function() { return OneMinusSrcAlphaFactor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DstAlphaFactor", function() { return DstAlphaFactor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OneMinusDstAlphaFactor", function() { return OneMinusDstAlphaFactor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DstColorFactor", function() { return DstColorFactor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OneMinusDstColorFactor", function() { return OneMinusDstColorFactor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SrcAlphaSaturateFactor", function() { return SrcAlphaSaturateFactor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NeverDepth", function() { return NeverDepth; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AlwaysDepth", function() { return AlwaysDepth; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LessDepth", function() { return LessDepth; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LessEqualDepth", function() { return LessEqualDepth; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EqualDepth", function() { return EqualDepth; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GreaterEqualDepth", function() { return GreaterEqualDepth; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GreaterDepth", function() { return GreaterDepth; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NotEqualDepth", function() { return NotEqualDepth; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MultiplyOperation", function() { return MultiplyOperation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MixOperation", function() { return MixOperation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AddOperation", function() { return AddOperation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NoToneMapping", function() { return NoToneMapping; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LinearToneMapping", function() { return LinearToneMapping; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ReinhardToneMapping", function() { return ReinhardToneMapping; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Uncharted2ToneMapping", function() { return Uncharted2ToneMapping; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CineonToneMapping", function() { return CineonToneMapping; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ACESFilmicToneMapping", function() { return ACESFilmicToneMapping; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UVMapping", function() { return UVMapping; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CubeReflectionMapping", function() { return CubeReflectionMapping; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CubeRefractionMapping", function() { return CubeRefractionMapping; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EquirectangularReflectionMapping", function() { return EquirectangularReflectionMapping; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EquirectangularRefractionMapping", function() { return EquirectangularRefractionMapping; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SphericalReflectionMapping", function() { return SphericalReflectionMapping; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CubeUVReflectionMapping", function() { return CubeUVReflectionMapping; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CubeUVRefractionMapping", function() { return CubeUVRefractionMapping; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RepeatWrapping", function() { return RepeatWrapping; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ClampToEdgeWrapping", function() { return ClampToEdgeWrapping; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MirroredRepeatWrapping", function() { return MirroredRepeatWrapping; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NearestFilter", function() { return NearestFilter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NearestMipmapNearestFilter", function() { return NearestMipmapNearestFilter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NearestMipMapNearestFilter", function() { return NearestMipMapNearestFilter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NearestMipmapLinearFilter", function() { return NearestMipmapLinearFilter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NearestMipMapLinearFilter", function() { return NearestMipMapLinearFilter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LinearFilter", function() { return LinearFilter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LinearMipmapNearestFilter", function() { return LinearMipmapNearestFilter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LinearMipMapNearestFilter", function() { return LinearMipMapNearestFilter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LinearMipmapLinearFilter", function() { return LinearMipmapLinearFilter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LinearMipMapLinearFilter", function() { return LinearMipMapLinearFilter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UnsignedByteType", function() { return UnsignedByteType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ByteType", function() { return ByteType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ShortType", function() { return ShortType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UnsignedShortType", function() { return UnsignedShortType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IntType", function() { return IntType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UnsignedIntType", function() { return UnsignedIntType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FloatType", function() { return FloatType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HalfFloatType", function() { return HalfFloatType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UnsignedShort4444Type", function() { return UnsignedShort4444Type; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UnsignedShort5551Type", function() { return UnsignedShort5551Type; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UnsignedShort565Type", function() { return UnsignedShort565Type; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UnsignedInt248Type", function() { return UnsignedInt248Type; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AlphaFormat", function() { return AlphaFormat; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RGBFormat", function() { return RGBFormat; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RGBAFormat", function() { return RGBAFormat; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LuminanceFormat", function() { return LuminanceFormat; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LuminanceAlphaFormat", function() { return LuminanceAlphaFormat; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RGBEFormat", function() { return RGBEFormat; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DepthFormat", function() { return DepthFormat; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DepthStencilFormat", function() { return DepthStencilFormat; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RedFormat", function() { return RedFormat; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RGB_S3TC_DXT1_Format", function() { return RGB_S3TC_DXT1_Format; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RGBA_S3TC_DXT1_Format", function() { return RGBA_S3TC_DXT1_Format; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RGBA_S3TC_DXT3_Format", function() { return RGBA_S3TC_DXT3_Format; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RGBA_S3TC_DXT5_Format", function() { return RGBA_S3TC_DXT5_Format; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RGB_PVRTC_4BPPV1_Format", function() { return RGB_PVRTC_4BPPV1_Format; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RGB_PVRTC_2BPPV1_Format", function() { return RGB_PVRTC_2BPPV1_Format; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RGBA_PVRTC_4BPPV1_Format", function() { return RGBA_PVRTC_4BPPV1_Format; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RGBA_PVRTC_2BPPV1_Format", function() { return RGBA_PVRTC_2BPPV1_Format; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RGB_ETC1_Format", function() { return RGB_ETC1_Format; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RGBA_ASTC_4x4_Format", function() { return RGBA_ASTC_4x4_Format; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RGBA_ASTC_5x4_Format", function() { return RGBA_ASTC_5x4_Format; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RGBA_ASTC_5x5_Format", function() { return RGBA_ASTC_5x5_Format; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RGBA_ASTC_6x5_Format", function() { return RGBA_ASTC_6x5_Format; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RGBA_ASTC_6x6_Format", function() { return RGBA_ASTC_6x6_Format; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RGBA_ASTC_8x5_Format", function() { return RGBA_ASTC_8x5_Format; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RGBA_ASTC_8x6_Format", function() { return RGBA_ASTC_8x6_Format; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RGBA_ASTC_8x8_Format", function() { return RGBA_ASTC_8x8_Format; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RGBA_ASTC_10x5_Format", function() { return RGBA_ASTC_10x5_Format; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RGBA_ASTC_10x6_Format", function() { return RGBA_ASTC_10x6_Format; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RGBA_ASTC_10x8_Format", function() { return RGBA_ASTC_10x8_Format; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RGBA_ASTC_10x10_Format", function() { return RGBA_ASTC_10x10_Format; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RGBA_ASTC_12x10_Format", function() { return RGBA_ASTC_12x10_Format; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RGBA_ASTC_12x12_Format", function() { return RGBA_ASTC_12x12_Format; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LoopOnce", function() { return LoopOnce; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LoopRepeat", function() { return LoopRepeat; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LoopPingPong", function() { return LoopPingPong; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InterpolateDiscrete", function() { return InterpolateDiscrete; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InterpolateLinear", function() { return InterpolateLinear; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InterpolateSmooth", function() { return InterpolateSmooth; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ZeroCurvatureEnding", function() { return ZeroCurvatureEnding; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ZeroSlopeEnding", function() { return ZeroSlopeEnding; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WrapAroundEnding", function() { return WrapAroundEnding; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TrianglesDrawMode", function() { return TrianglesDrawMode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TriangleStripDrawMode", function() { return TriangleStripDrawMode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TriangleFanDrawMode", function() { return TriangleFanDrawMode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LinearEncoding", function() { return LinearEncoding; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sRGBEncoding", function() { return sRGBEncoding; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GammaEncoding", function() { return GammaEncoding; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RGBEEncoding", function() { return RGBEEncoding; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LogLuvEncoding", function() { return LogLuvEncoding; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RGBM7Encoding", function() { return RGBM7Encoding; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RGBM16Encoding", function() { return RGBM16Encoding; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RGBDEncoding", function() { return RGBDEncoding; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BasicDepthPacking", function() { return BasicDepthPacking; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RGBADepthPacking", function() { return RGBADepthPacking; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TangentSpaceNormalMap", function() { return TangentSpaceNormalMap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ObjectSpaceNormalMap", function() { return ObjectSpaceNormalMap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ZeroStencilOp", function() { return ZeroStencilOp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "KeepStencilOp", function() { return KeepStencilOp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ReplaceStencilOp", function() { return ReplaceStencilOp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IncrementStencilOp", function() { return IncrementStencilOp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DecrementStencilOp", function() { return DecrementStencilOp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IncrementWrapStencilOp", function() { return IncrementWrapStencilOp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DecrementWrapStencilOp", function() { return DecrementWrapStencilOp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InvertStencilOp", function() { return InvertStencilOp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NeverStencilFunc", function() { return NeverStencilFunc; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LessStencilFunc", function() { return LessStencilFunc; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EqualStencilFunc", function() { return EqualStencilFunc; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LessEqualStencilFunc", function() { return LessEqualStencilFunc; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GreaterStencilFunc", function() { return GreaterStencilFunc; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NotEqualStencilFunc", function() { return NotEqualStencilFunc; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GreaterEqualStencilFunc", function() { return GreaterEqualStencilFunc; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AlwaysStencilFunc", function() { return AlwaysStencilFunc; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StaticDrawUsage", function() { return StaticDrawUsage; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DynamicDrawUsage", function() { return DynamicDrawUsage; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StreamDrawUsage", function() { return StreamDrawUsage; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StaticReadUsage", function() { return StaticReadUsage; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DynamicReadUsage", function() { return DynamicReadUsage; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StreamReadUsage", function() { return StreamReadUsage; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StaticCopyUsage", function() { return StaticCopyUsage; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DynamicCopyUsage", function() { return DynamicCopyUsage; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StreamCopyUsage", function() { return StreamCopyUsage; });
var REVISION = '111';
var MOUSE = { LEFT: 0, MIDDLE: 1, RIGHT: 2, ROTATE: 0, DOLLY: 1, PAN: 2 };
var TOUCH = { ROTATE: 0, PAN: 1, DOLLY_PAN: 2, DOLLY_ROTATE: 3 };
var CullFaceNone = 0;
var CullFaceBack = 1;
var CullFaceFront = 2;
var CullFaceFrontBack = 3;
var FrontFaceDirectionCW = 0;
var FrontFaceDirectionCCW = 1;
var BasicShadowMap = 0;
var PCFShadowMap = 1;
var PCFSoftShadowMap = 2;
var VSMShadowMap = 3;
var FrontSide = 0;
var BackSide = 1;
var DoubleSide = 2;
var FlatShading = 1;
var SmoothShading = 2;
var NoColors = 0;
var FaceColors = 1;
var VertexColors = 2;
var NoBlending = 0;
var NormalBlending = 1;
var AdditiveBlending = 2;
var SubtractiveBlending = 3;
var MultiplyBlending = 4;
var CustomBlending = 5;
var AddEquation = 100;
var SubtractEquation = 101;
var ReverseSubtractEquation = 102;
var MinEquation = 103;
var MaxEquation = 104;
var ZeroFactor = 200;
var OneFactor = 201;
var SrcColorFactor = 202;
var OneMinusSrcColorFactor = 203;
var SrcAlphaFactor = 204;
var OneMinusSrcAlphaFactor = 205;
var DstAlphaFactor = 206;
var OneMinusDstAlphaFactor = 207;
var DstColorFactor = 208;
var OneMinusDstColorFactor = 209;
var SrcAlphaSaturateFactor = 210;
var NeverDepth = 0;
var AlwaysDepth = 1;
var LessDepth = 2;
var LessEqualDepth = 3;
var EqualDepth = 4;
var GreaterEqualDepth = 5;
var GreaterDepth = 6;
var NotEqualDepth = 7;
var MultiplyOperation = 0;
var MixOperation = 1;
var AddOperation = 2;
var NoToneMapping = 0;
var LinearToneMapping = 1;
var ReinhardToneMapping = 2;
var Uncharted2ToneMapping = 3;
var CineonToneMapping = 4;
var ACESFilmicToneMapping = 5;

var UVMapping = 300;
var CubeReflectionMapping = 301;
var CubeRefractionMapping = 302;
var EquirectangularReflectionMapping = 303;
var EquirectangularRefractionMapping = 304;
var SphericalReflectionMapping = 305;
var CubeUVReflectionMapping = 306;
var CubeUVRefractionMapping = 307;
var RepeatWrapping = 1000;
var ClampToEdgeWrapping = 1001;
var MirroredRepeatWrapping = 1002;
var NearestFilter = 1003;
var NearestMipmapNearestFilter = 1004;
var NearestMipMapNearestFilter = 1004;
var NearestMipmapLinearFilter = 1005;
var NearestMipMapLinearFilter = 1005;
var LinearFilter = 1006;
var LinearMipmapNearestFilter = 1007;
var LinearMipMapNearestFilter = 1007;
var LinearMipmapLinearFilter = 1008;
var LinearMipMapLinearFilter = 1008;
var UnsignedByteType = 1009;
var ByteType = 1010;
var ShortType = 1011;
var UnsignedShortType = 1012;
var IntType = 1013;
var UnsignedIntType = 1014;
var FloatType = 1015;
var HalfFloatType = 1016;
var UnsignedShort4444Type = 1017;
var UnsignedShort5551Type = 1018;
var UnsignedShort565Type = 1019;
var UnsignedInt248Type = 1020;
var AlphaFormat = 1021;
var RGBFormat = 1022;
var RGBAFormat = 1023;
var LuminanceFormat = 1024;
var LuminanceAlphaFormat = 1025;
var RGBEFormat = RGBAFormat;
var DepthFormat = 1026;
var DepthStencilFormat = 1027;
var RedFormat = 1028;
var RGB_S3TC_DXT1_Format = 33776;
var RGBA_S3TC_DXT1_Format = 33777;
var RGBA_S3TC_DXT3_Format = 33778;
var RGBA_S3TC_DXT5_Format = 33779;
var RGB_PVRTC_4BPPV1_Format = 35840;
var RGB_PVRTC_2BPPV1_Format = 35841;
var RGBA_PVRTC_4BPPV1_Format = 35842;
var RGBA_PVRTC_2BPPV1_Format = 35843;
var RGB_ETC1_Format = 36196;
var RGBA_ASTC_4x4_Format = 37808;
var RGBA_ASTC_5x4_Format = 37809;
var RGBA_ASTC_5x5_Format = 37810;
var RGBA_ASTC_6x5_Format = 37811;
var RGBA_ASTC_6x6_Format = 37812;
var RGBA_ASTC_8x5_Format = 37813;
var RGBA_ASTC_8x6_Format = 37814;
var RGBA_ASTC_8x8_Format = 37815;
var RGBA_ASTC_10x5_Format = 37816;
var RGBA_ASTC_10x6_Format = 37817;
var RGBA_ASTC_10x8_Format = 37818;
var RGBA_ASTC_10x10_Format = 37819;
var RGBA_ASTC_12x10_Format = 37820;
var RGBA_ASTC_12x12_Format = 37821;
var LoopOnce = 2200;
var LoopRepeat = 2201;
var LoopPingPong = 2202;
var InterpolateDiscrete = 2300;
var InterpolateLinear = 2301;
var InterpolateSmooth = 2302;
var ZeroCurvatureEnding = 2400;
var ZeroSlopeEnding = 2401;
var WrapAroundEnding = 2402;
var TrianglesDrawMode = 0;
var TriangleStripDrawMode = 1;
var TriangleFanDrawMode = 2;
var LinearEncoding = 3000;
var sRGBEncoding = 3001;
var GammaEncoding = 3007;
var RGBEEncoding = 3002;
var LogLuvEncoding = 3003;
var RGBM7Encoding = 3004;
var RGBM16Encoding = 3005;
var RGBDEncoding = 3006;
var BasicDepthPacking = 3200;
var RGBADepthPacking = 3201;
var TangentSpaceNormalMap = 0;
var ObjectSpaceNormalMap = 1;

var ZeroStencilOp = 0;
var KeepStencilOp = 7680;
var ReplaceStencilOp = 7681;
var IncrementStencilOp = 7682;
var DecrementStencilOp = 7683;
var IncrementWrapStencilOp = 34055;
var DecrementWrapStencilOp = 34056;
var InvertStencilOp = 5386;

var NeverStencilFunc = 512;
var LessStencilFunc = 513;
var EqualStencilFunc = 514;
var LessEqualStencilFunc = 515;
var GreaterStencilFunc = 516;
var NotEqualStencilFunc = 517;
var GreaterEqualStencilFunc = 518;
var AlwaysStencilFunc = 519;

var StaticDrawUsage = 35044;
var DynamicDrawUsage = 35048;
var StreamDrawUsage = 35040;
var StaticReadUsage = 35045;
var DynamicReadUsage = 35049;
var StreamReadUsage = 35041;
var StaticCopyUsage = 35046;
var DynamicCopyUsage = 35050;
var StreamCopyUsage = 35042;


/***/ }),

/***/ "./node_modules/three/src/core/EventDispatcher.js":
/*!********************************************************!*\
  !*** ./node_modules/three/src/core/EventDispatcher.js ***!
  \********************************************************/
/*! exports provided: EventDispatcher */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EventDispatcher", function() { return EventDispatcher; });
/**
 * https://github.com/mrdoob/eventdispatcher.js/
 */

function EventDispatcher() {}

Object.assign( EventDispatcher.prototype, {

	addEventListener: function ( type, listener ) {

		if ( this._listeners === undefined ) this._listeners = {};

		var listeners = this._listeners;

		if ( listeners[ type ] === undefined ) {

			listeners[ type ] = [];

		}

		if ( listeners[ type ].indexOf( listener ) === - 1 ) {

			listeners[ type ].push( listener );

		}

	},

	hasEventListener: function ( type, listener ) {

		if ( this._listeners === undefined ) return false;

		var listeners = this._listeners;

		return listeners[ type ] !== undefined && listeners[ type ].indexOf( listener ) !== - 1;

	},

	removeEventListener: function ( type, listener ) {

		if ( this._listeners === undefined ) return;

		var listeners = this._listeners;
		var listenerArray = listeners[ type ];

		if ( listenerArray !== undefined ) {

			var index = listenerArray.indexOf( listener );

			if ( index !== - 1 ) {

				listenerArray.splice( index, 1 );

			}

		}

	},

	dispatchEvent: function ( event ) {

		if ( this._listeners === undefined ) return;

		var listeners = this._listeners;
		var listenerArray = listeners[ event.type ];

		if ( listenerArray !== undefined ) {

			event.target = this;

			var array = listenerArray.slice( 0 );

			for ( var i = 0, l = array.length; i < l; i ++ ) {

				array[ i ].call( this, event );

			}

		}

	}

} );





/***/ }),

/***/ "./node_modules/three/src/core/Layers.js":
/*!***********************************************!*\
  !*** ./node_modules/three/src/core/Layers.js ***!
  \***********************************************/
/*! exports provided: Layers */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Layers", function() { return Layers; });
/**
 * @author mrdoob / http://mrdoob.com/
 */

function Layers() {

	this.mask = 1 | 0;

}

Object.assign( Layers.prototype, {

	set: function ( channel ) {

		this.mask = 1 << channel | 0;

	},

	enable: function ( channel ) {

		this.mask |= 1 << channel | 0;

	},

	enableAll: function () {

		this.mask = 0xffffffff | 0;

	},

	toggle: function ( channel ) {

		this.mask ^= 1 << channel | 0;

	},

	disable: function ( channel ) {

		this.mask &= ~ ( 1 << channel | 0 );

	},

	disableAll: function () {

		this.mask = 0;

	},

	test: function ( layers ) {

		return ( this.mask & layers.mask ) !== 0;

	}

} );





/***/ }),

/***/ "./node_modules/three/src/core/Object3D.js":
/*!*************************************************!*\
  !*** ./node_modules/three/src/core/Object3D.js ***!
  \*************************************************/
/*! exports provided: Object3D */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Object3D", function() { return Object3D; });
/* harmony import */ var _math_Quaternion_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../math/Quaternion.js */ "./node_modules/three/src/math/Quaternion.js");
/* harmony import */ var _math_Vector3_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../math/Vector3.js */ "./node_modules/three/src/math/Vector3.js");
/* harmony import */ var _math_Matrix4_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../math/Matrix4.js */ "./node_modules/three/src/math/Matrix4.js");
/* harmony import */ var _EventDispatcher_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./EventDispatcher.js */ "./node_modules/three/src/core/EventDispatcher.js");
/* harmony import */ var _math_Euler_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../math/Euler.js */ "./node_modules/three/src/math/Euler.js");
/* harmony import */ var _Layers_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Layers.js */ "./node_modules/three/src/core/Layers.js");
/* harmony import */ var _math_Matrix3_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../math/Matrix3.js */ "./node_modules/three/src/math/Matrix3.js");
/* harmony import */ var _math_Math_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../math/Math.js */ "./node_modules/three/src/math/Math.js");
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../constants.js */ "./node_modules/three/src/constants.js");










var _object3DId = 0;

var _v1 = new _math_Vector3_js__WEBPACK_IMPORTED_MODULE_1__["Vector3"]();
var _q1 = new _math_Quaternion_js__WEBPACK_IMPORTED_MODULE_0__["Quaternion"]();
var _m1 = new _math_Matrix4_js__WEBPACK_IMPORTED_MODULE_2__["Matrix4"]();
var _target = new _math_Vector3_js__WEBPACK_IMPORTED_MODULE_1__["Vector3"]();

var _position = new _math_Vector3_js__WEBPACK_IMPORTED_MODULE_1__["Vector3"]();
var _scale = new _math_Vector3_js__WEBPACK_IMPORTED_MODULE_1__["Vector3"]();
var _quaternion = new _math_Quaternion_js__WEBPACK_IMPORTED_MODULE_0__["Quaternion"]();

var _xAxis = new _math_Vector3_js__WEBPACK_IMPORTED_MODULE_1__["Vector3"]( 1, 0, 0 );
var _yAxis = new _math_Vector3_js__WEBPACK_IMPORTED_MODULE_1__["Vector3"]( 0, 1, 0 );
var _zAxis = new _math_Vector3_js__WEBPACK_IMPORTED_MODULE_1__["Vector3"]( 0, 0, 1 );

var _addedEvent = { type: 'added' };
var _removedEvent = { type: 'removed' };

/**
 * @author mrdoob / http://mrdoob.com/
 * @author mikael emtinger / http://gomo.se/
 * @author alteredq / http://alteredqualia.com/
 * @author WestLangley / http://github.com/WestLangley
 * @author elephantatwork / www.elephantatwork.ch
 */

function Object3D() {

	Object.defineProperty( this, 'id', { value: _object3DId ++ } );

	this.uuid = _math_Math_js__WEBPACK_IMPORTED_MODULE_7__["_Math"].generateUUID();

	this.name = '';
	this.type = 'Object3D';

	this.parent = null;
	this.children = [];

	this.up = Object3D.DefaultUp.clone();

	var position = new _math_Vector3_js__WEBPACK_IMPORTED_MODULE_1__["Vector3"]();
	var rotation = new _math_Euler_js__WEBPACK_IMPORTED_MODULE_4__["Euler"]();
	var quaternion = new _math_Quaternion_js__WEBPACK_IMPORTED_MODULE_0__["Quaternion"]();
	var scale = new _math_Vector3_js__WEBPACK_IMPORTED_MODULE_1__["Vector3"]( 1, 1, 1 );

	function onRotationChange() {

		quaternion.setFromEuler( rotation, false );

	}

	function onQuaternionChange() {

		rotation.setFromQuaternion( quaternion, undefined, false );

	}

	rotation._onChange( onRotationChange );
	quaternion._onChange( onQuaternionChange );

	Object.defineProperties( this, {
		position: {
			configurable: true,
			enumerable: true,
			value: position
		},
		rotation: {
			configurable: true,
			enumerable: true,
			value: rotation
		},
		quaternion: {
			configurable: true,
			enumerable: true,
			value: quaternion
		},
		scale: {
			configurable: true,
			enumerable: true,
			value: scale
		},
		modelViewMatrix: {
			value: new _math_Matrix4_js__WEBPACK_IMPORTED_MODULE_2__["Matrix4"]()
		},
		normalMatrix: {
			value: new _math_Matrix3_js__WEBPACK_IMPORTED_MODULE_6__["Matrix3"]()
		}
	} );

	this.matrix = new _math_Matrix4_js__WEBPACK_IMPORTED_MODULE_2__["Matrix4"]();
	this.matrixWorld = new _math_Matrix4_js__WEBPACK_IMPORTED_MODULE_2__["Matrix4"]();

	this.matrixAutoUpdate = Object3D.DefaultMatrixAutoUpdate;
	this.matrixWorldNeedsUpdate = false;

	this.layers = new _Layers_js__WEBPACK_IMPORTED_MODULE_5__["Layers"]();
	this.visible = true;

	this.castShadow = false;
	this.receiveShadow = false;

	this.frustumCulled = true;
	this.renderOrder = 0;

	this.userData = {};

}

Object3D.DefaultUp = new _math_Vector3_js__WEBPACK_IMPORTED_MODULE_1__["Vector3"]( 0, 1, 0 );
Object3D.DefaultMatrixAutoUpdate = true;

Object3D.prototype = Object.assign( Object.create( _EventDispatcher_js__WEBPACK_IMPORTED_MODULE_3__["EventDispatcher"].prototype ), {

	constructor: Object3D,

	isObject3D: true,

	onBeforeRender: function () {},
	onAfterRender: function () {},

	applyMatrix: function ( matrix ) {

		if ( this.matrixAutoUpdate ) this.updateMatrix();

		this.matrix.premultiply( matrix );

		this.matrix.decompose( this.position, this.quaternion, this.scale );

	},

	applyQuaternion: function ( q ) {

		this.quaternion.premultiply( q );

		return this;

	},

	setRotationFromAxisAngle: function ( axis, angle ) {

		// assumes axis is normalized

		this.quaternion.setFromAxisAngle( axis, angle );

	},

	setRotationFromEuler: function ( euler ) {

		this.quaternion.setFromEuler( euler, true );

	},

	setRotationFromMatrix: function ( m ) {

		// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

		this.quaternion.setFromRotationMatrix( m );

	},

	setRotationFromQuaternion: function ( q ) {

		// assumes q is normalized

		this.quaternion.copy( q );

	},

	rotateOnAxis: function ( axis, angle ) {

		// rotate object on axis in object space
		// axis is assumed to be normalized

		_q1.setFromAxisAngle( axis, angle );

		this.quaternion.multiply( _q1 );

		return this;

	},

	rotateOnWorldAxis: function ( axis, angle ) {

		// rotate object on axis in world space
		// axis is assumed to be normalized
		// method assumes no rotated parent

		_q1.setFromAxisAngle( axis, angle );

		this.quaternion.premultiply( _q1 );

		return this;

	},

	rotateX: function ( angle ) {

		return this.rotateOnAxis( _xAxis, angle );

	},

	rotateY: function ( angle ) {

		return this.rotateOnAxis( _yAxis, angle );

	},

	rotateZ: function ( angle ) {

		return this.rotateOnAxis( _zAxis, angle );

	},

	translateOnAxis: function ( axis, distance ) {

		// translate object by distance along axis in object space
		// axis is assumed to be normalized

		_v1.copy( axis ).applyQuaternion( this.quaternion );

		this.position.add( _v1.multiplyScalar( distance ) );

		return this;

	},

	translateX: function ( distance ) {

		return this.translateOnAxis( _xAxis, distance );

	},

	translateY: function ( distance ) {

		return this.translateOnAxis( _yAxis, distance );

	},

	translateZ: function ( distance ) {

		return this.translateOnAxis( _zAxis, distance );

	},

	localToWorld: function ( vector ) {

		return vector.applyMatrix4( this.matrixWorld );

	},

	worldToLocal: function ( vector ) {

		return vector.applyMatrix4( _m1.getInverse( this.matrixWorld ) );

	},

	lookAt: function ( x, y, z ) {

		// This method does not support objects having non-uniformly-scaled parent(s)

		if ( x.isVector3 ) {

			_target.copy( x );

		} else {

			_target.set( x, y, z );

		}

		var parent = this.parent;

		this.updateWorldMatrix( true, false );

		_position.setFromMatrixPosition( this.matrixWorld );

		if ( this.isCamera || this.isLight ) {

			_m1.lookAt( _position, _target, this.up );

		} else {

			_m1.lookAt( _target, _position, this.up );

		}

		this.quaternion.setFromRotationMatrix( _m1 );

		if ( parent ) {

			_m1.extractRotation( parent.matrixWorld );
			_q1.setFromRotationMatrix( _m1 );
			this.quaternion.premultiply( _q1.inverse() );

		}

	},

	add: function ( object ) {

		if ( arguments.length > 1 ) {

			for ( var i = 0; i < arguments.length; i ++ ) {

				this.add( arguments[ i ] );

			}

			return this;

		}

		if ( object === this ) {

			console.error( "THREE.Object3D.add: object can't be added as a child of itself.", object );
			return this;

		}

		if ( ( object && object.isObject3D ) ) {

			if ( object.parent !== null ) {

				object.parent.remove( object );

			}

			object.parent = this;
			this.children.push( object );

			object.dispatchEvent( _addedEvent );

		} else {

			console.error( "THREE.Object3D.add: object not an instance of THREE.Object3D.", object );

		}

		return this;

	},

	remove: function ( object ) {

		if ( arguments.length > 1 ) {

			for ( var i = 0; i < arguments.length; i ++ ) {

				this.remove( arguments[ i ] );

			}

			return this;

		}

		var index = this.children.indexOf( object );

		if ( index !== - 1 ) {

			object.parent = null;
			this.children.splice( index, 1 );

			object.dispatchEvent( _removedEvent );

		}

		return this;

	},

	attach: function ( object ) {

		// adds object as a child of this, while maintaining the object's world transform

		this.updateWorldMatrix( true, false );

		_m1.getInverse( this.matrixWorld );

		if ( object.parent !== null ) {

			object.parent.updateWorldMatrix( true, false );

			_m1.multiply( object.parent.matrixWorld );

		}

		object.applyMatrix( _m1 );

		object.updateWorldMatrix( false, false );

		this.add( object );

		return this;

	},

	getObjectById: function ( id ) {

		return this.getObjectByProperty( 'id', id );

	},

	getObjectByName: function ( name ) {

		return this.getObjectByProperty( 'name', name );

	},

	getObjectByProperty: function ( name, value ) {

		if ( this[ name ] === value ) return this;

		for ( var i = 0, l = this.children.length; i < l; i ++ ) {

			var child = this.children[ i ];
			var object = child.getObjectByProperty( name, value );

			if ( object !== undefined ) {

				return object;

			}

		}

		return undefined;

	},

	getWorldPosition: function ( target ) {

		if ( target === undefined ) {

			console.warn( 'THREE.Object3D: .getWorldPosition() target is now required' );
			target = new _math_Vector3_js__WEBPACK_IMPORTED_MODULE_1__["Vector3"]();

		}

		this.updateMatrixWorld( true );

		return target.setFromMatrixPosition( this.matrixWorld );

	},

	getWorldQuaternion: function ( target ) {

		if ( target === undefined ) {

			console.warn( 'THREE.Object3D: .getWorldQuaternion() target is now required' );
			target = new _math_Quaternion_js__WEBPACK_IMPORTED_MODULE_0__["Quaternion"]();

		}

		this.updateMatrixWorld( true );

		this.matrixWorld.decompose( _position, target, _scale );

		return target;

	},

	getWorldScale: function ( target ) {

		if ( target === undefined ) {

			console.warn( 'THREE.Object3D: .getWorldScale() target is now required' );
			target = new _math_Vector3_js__WEBPACK_IMPORTED_MODULE_1__["Vector3"]();

		}

		this.updateMatrixWorld( true );

		this.matrixWorld.decompose( _position, _quaternion, target );

		return target;

	},

	getWorldDirection: function ( target ) {

		if ( target === undefined ) {

			console.warn( 'THREE.Object3D: .getWorldDirection() target is now required' );
			target = new _math_Vector3_js__WEBPACK_IMPORTED_MODULE_1__["Vector3"]();

		}

		this.updateMatrixWorld( true );

		var e = this.matrixWorld.elements;

		return target.set( e[ 8 ], e[ 9 ], e[ 10 ] ).normalize();

	},

	raycast: function () {},

	traverse: function ( callback ) {

		callback( this );

		var children = this.children;

		for ( var i = 0, l = children.length; i < l; i ++ ) {

			children[ i ].traverse( callback );

		}

	},

	traverseVisible: function ( callback ) {

		if ( this.visible === false ) return;

		callback( this );

		var children = this.children;

		for ( var i = 0, l = children.length; i < l; i ++ ) {

			children[ i ].traverseVisible( callback );

		}

	},

	traverseAncestors: function ( callback ) {

		var parent = this.parent;

		if ( parent !== null ) {

			callback( parent );

			parent.traverseAncestors( callback );

		}

	},

	updateMatrix: function () {

		this.matrix.compose( this.position, this.quaternion, this.scale );

		this.matrixWorldNeedsUpdate = true;

	},

	updateMatrixWorld: function ( force ) {

		if ( this.matrixAutoUpdate ) this.updateMatrix();

		if ( this.matrixWorldNeedsUpdate || force ) {

			if ( this.parent === null ) {

				this.matrixWorld.copy( this.matrix );

			} else {

				this.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );

			}

			this.matrixWorldNeedsUpdate = false;

			force = true;

		}

		// update children

		var children = this.children;

		for ( var i = 0, l = children.length; i < l; i ++ ) {

			children[ i ].updateMatrixWorld( force );

		}

	},

	updateWorldMatrix: function ( updateParents, updateChildren ) {

		var parent = this.parent;

		if ( updateParents === true && parent !== null ) {

			parent.updateWorldMatrix( true, false );

		}

		if ( this.matrixAutoUpdate ) this.updateMatrix();

		if ( this.parent === null ) {

			this.matrixWorld.copy( this.matrix );

		} else {

			this.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );

		}

		// update children

		if ( updateChildren === true ) {

			var children = this.children;

			for ( var i = 0, l = children.length; i < l; i ++ ) {

				children[ i ].updateWorldMatrix( false, true );

			}

		}

	},

	toJSON: function ( meta ) {

		// meta is a string when called from JSON.stringify
		var isRootObject = ( meta === undefined || typeof meta === 'string' );

		var output = {};

		// meta is a hash used to collect geometries, materials.
		// not providing it implies that this is the root object
		// being serialized.
		if ( isRootObject ) {

			// initialize meta obj
			meta = {
				geometries: {},
				materials: {},
				textures: {},
				images: {},
				shapes: {}
			};

			output.metadata = {
				version: 4.5,
				type: 'Object',
				generator: 'Object3D.toJSON'
			};

		}

		// standard Object3D serialization

		var object = {};

		object.uuid = this.uuid;
		object.type = this.type;

		if ( this.name !== '' ) object.name = this.name;
		if ( this.castShadow === true ) object.castShadow = true;
		if ( this.receiveShadow === true ) object.receiveShadow = true;
		if ( this.visible === false ) object.visible = false;
		if ( this.frustumCulled === false ) object.frustumCulled = false;
		if ( this.renderOrder !== 0 ) object.renderOrder = this.renderOrder;
		if ( JSON.stringify( this.userData ) !== '{}' ) object.userData = this.userData;

		object.layers = this.layers.mask;
		object.matrix = this.matrix.toArray();

		if ( this.matrixAutoUpdate === false ) object.matrixAutoUpdate = false;

		// object specific properties

		if ( this.isMesh && this.drawMode !== _constants_js__WEBPACK_IMPORTED_MODULE_8__["TrianglesDrawMode"] ) object.drawMode = this.drawMode;

		if ( this.isInstancedMesh ) {

			object.type = 'InstancedMesh';
			object.count = this.count;
			object.instanceMatrix = this.instanceMatrix.toJSON();

		}

		//

		function serialize( library, element ) {

			if ( library[ element.uuid ] === undefined ) {

				library[ element.uuid ] = element.toJSON( meta );

			}

			return element.uuid;

		}

		if ( this.isMesh || this.isLine || this.isPoints ) {

			object.geometry = serialize( meta.geometries, this.geometry );

			var parameters = this.geometry.parameters;

			if ( parameters !== undefined && parameters.shapes !== undefined ) {

				var shapes = parameters.shapes;

				if ( Array.isArray( shapes ) ) {

					for ( var i = 0, l = shapes.length; i < l; i ++ ) {

						var shape = shapes[ i ];

						serialize( meta.shapes, shape );

					}

				} else {

					serialize( meta.shapes, shapes );

				}

			}

		}

		if ( this.material !== undefined ) {

			if ( Array.isArray( this.material ) ) {

				var uuids = [];

				for ( var i = 0, l = this.material.length; i < l; i ++ ) {

					uuids.push( serialize( meta.materials, this.material[ i ] ) );

				}

				object.material = uuids;

			} else {

				object.material = serialize( meta.materials, this.material );

			}

		}

		//

		if ( this.children.length > 0 ) {

			object.children = [];

			for ( var i = 0; i < this.children.length; i ++ ) {

				object.children.push( this.children[ i ].toJSON( meta ).object );

			}

		}

		if ( isRootObject ) {

			var geometries = extractFromCache( meta.geometries );
			var materials = extractFromCache( meta.materials );
			var textures = extractFromCache( meta.textures );
			var images = extractFromCache( meta.images );
			var shapes = extractFromCache( meta.shapes );

			if ( geometries.length > 0 ) output.geometries = geometries;
			if ( materials.length > 0 ) output.materials = materials;
			if ( textures.length > 0 ) output.textures = textures;
			if ( images.length > 0 ) output.images = images;
			if ( shapes.length > 0 ) output.shapes = shapes;

		}

		output.object = object;

		return output;

		// extract data from the cache hash
		// remove metadata on each item
		// and return as array
		function extractFromCache( cache ) {

			var values = [];
			for ( var key in cache ) {

				var data = cache[ key ];
				delete data.metadata;
				values.push( data );

			}
			return values;

		}

	},

	clone: function ( recursive ) {

		return new this.constructor().copy( this, recursive );

	},

	copy: function ( source, recursive ) {

		if ( recursive === undefined ) recursive = true;

		this.name = source.name;

		this.up.copy( source.up );

		this.position.copy( source.position );
		this.quaternion.copy( source.quaternion );
		this.scale.copy( source.scale );

		this.matrix.copy( source.matrix );
		this.matrixWorld.copy( source.matrixWorld );

		this.matrixAutoUpdate = source.matrixAutoUpdate;
		this.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;

		this.layers.mask = source.layers.mask;
		this.visible = source.visible;

		this.castShadow = source.castShadow;
		this.receiveShadow = source.receiveShadow;

		this.frustumCulled = source.frustumCulled;
		this.renderOrder = source.renderOrder;

		this.userData = JSON.parse( JSON.stringify( source.userData ) );

		if ( recursive === true ) {

			for ( var i = 0; i < source.children.length; i ++ ) {

				var child = source.children[ i ];
				this.add( child.clone() );

			}

		}

		return this;

	}

} );





/***/ }),

/***/ "./node_modules/three/src/math/Euler.js":
/*!**********************************************!*\
  !*** ./node_modules/three/src/math/Euler.js ***!
  \**********************************************/
/*! exports provided: Euler */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Euler", function() { return Euler; });
/* harmony import */ var _Quaternion_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Quaternion.js */ "./node_modules/three/src/math/Quaternion.js");
/* harmony import */ var _Vector3_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Vector3.js */ "./node_modules/three/src/math/Vector3.js");
/* harmony import */ var _Matrix4_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Matrix4.js */ "./node_modules/three/src/math/Matrix4.js");
/* harmony import */ var _Math_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Math.js */ "./node_modules/three/src/math/Math.js");





/**
 * @author mrdoob / http://mrdoob.com/
 * @author WestLangley / http://github.com/WestLangley
 * @author bhouston / http://clara.io
 */

var _matrix = new _Matrix4_js__WEBPACK_IMPORTED_MODULE_2__["Matrix4"]();
var _quaternion = new _Quaternion_js__WEBPACK_IMPORTED_MODULE_0__["Quaternion"]();

function Euler( x, y, z, order ) {

	this._x = x || 0;
	this._y = y || 0;
	this._z = z || 0;
	this._order = order || Euler.DefaultOrder;

}

Euler.RotationOrders = [ 'XYZ', 'YZX', 'ZXY', 'XZY', 'YXZ', 'ZYX' ];

Euler.DefaultOrder = 'XYZ';

Object.defineProperties( Euler.prototype, {

	x: {

		get: function () {

			return this._x;

		},

		set: function ( value ) {

			this._x = value;
			this._onChangeCallback();

		}

	},

	y: {

		get: function () {

			return this._y;

		},

		set: function ( value ) {

			this._y = value;
			this._onChangeCallback();

		}

	},

	z: {

		get: function () {

			return this._z;

		},

		set: function ( value ) {

			this._z = value;
			this._onChangeCallback();

		}

	},

	order: {

		get: function () {

			return this._order;

		},

		set: function ( value ) {

			this._order = value;
			this._onChangeCallback();

		}

	}

} );

Object.assign( Euler.prototype, {

	isEuler: true,

	set: function ( x, y, z, order ) {

		this._x = x;
		this._y = y;
		this._z = z;
		this._order = order || this._order;

		this._onChangeCallback();

		return this;

	},

	clone: function () {

		return new this.constructor( this._x, this._y, this._z, this._order );

	},

	copy: function ( euler ) {

		this._x = euler._x;
		this._y = euler._y;
		this._z = euler._z;
		this._order = euler._order;

		this._onChangeCallback();

		return this;

	},

	setFromRotationMatrix: function ( m, order, update ) {

		var clamp = _Math_js__WEBPACK_IMPORTED_MODULE_3__["_Math"].clamp;

		// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

		var te = m.elements;
		var m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ];
		var m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ];
		var m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];

		order = order || this._order;

		if ( order === 'XYZ' ) {

			this._y = Math.asin( clamp( m13, - 1, 1 ) );

			if ( Math.abs( m13 ) < 0.9999999 ) {

				this._x = Math.atan2( - m23, m33 );
				this._z = Math.atan2( - m12, m11 );

			} else {

				this._x = Math.atan2( m32, m22 );
				this._z = 0;

			}

		} else if ( order === 'YXZ' ) {

			this._x = Math.asin( - clamp( m23, - 1, 1 ) );

			if ( Math.abs( m23 ) < 0.9999999 ) {

				this._y = Math.atan2( m13, m33 );
				this._z = Math.atan2( m21, m22 );

			} else {

				this._y = Math.atan2( - m31, m11 );
				this._z = 0;

			}

		} else if ( order === 'ZXY' ) {

			this._x = Math.asin( clamp( m32, - 1, 1 ) );

			if ( Math.abs( m32 ) < 0.9999999 ) {

				this._y = Math.atan2( - m31, m33 );
				this._z = Math.atan2( - m12, m22 );

			} else {

				this._y = 0;
				this._z = Math.atan2( m21, m11 );

			}

		} else if ( order === 'ZYX' ) {

			this._y = Math.asin( - clamp( m31, - 1, 1 ) );

			if ( Math.abs( m31 ) < 0.9999999 ) {

				this._x = Math.atan2( m32, m33 );
				this._z = Math.atan2( m21, m11 );

			} else {

				this._x = 0;
				this._z = Math.atan2( - m12, m22 );

			}

		} else if ( order === 'YZX' ) {

			this._z = Math.asin( clamp( m21, - 1, 1 ) );

			if ( Math.abs( m21 ) < 0.9999999 ) {

				this._x = Math.atan2( - m23, m22 );
				this._y = Math.atan2( - m31, m11 );

			} else {

				this._x = 0;
				this._y = Math.atan2( m13, m33 );

			}

		} else if ( order === 'XZY' ) {

			this._z = Math.asin( - clamp( m12, - 1, 1 ) );

			if ( Math.abs( m12 ) < 0.9999999 ) {

				this._x = Math.atan2( m32, m22 );
				this._y = Math.atan2( m13, m11 );

			} else {

				this._x = Math.atan2( - m23, m33 );
				this._y = 0;

			}

		} else {

			console.warn( 'THREE.Euler: .setFromRotationMatrix() given unsupported order: ' + order );

		}

		this._order = order;

		if ( update !== false ) this._onChangeCallback();

		return this;

	},

	setFromQuaternion: function ( q, order, update ) {

		_matrix.makeRotationFromQuaternion( q );

		return this.setFromRotationMatrix( _matrix, order, update );

	},

	setFromVector3: function ( v, order ) {

		return this.set( v.x, v.y, v.z, order || this._order );

	},

	reorder: function ( newOrder ) {

		// WARNING: this discards revolution information -bhouston

		_quaternion.setFromEuler( this );

		return this.setFromQuaternion( _quaternion, newOrder );

	},

	equals: function ( euler ) {

		return ( euler._x === this._x ) && ( euler._y === this._y ) && ( euler._z === this._z ) && ( euler._order === this._order );

	},

	fromArray: function ( array ) {

		this._x = array[ 0 ];
		this._y = array[ 1 ];
		this._z = array[ 2 ];
		if ( array[ 3 ] !== undefined ) this._order = array[ 3 ];

		this._onChangeCallback();

		return this;

	},

	toArray: function ( array, offset ) {

		if ( array === undefined ) array = [];
		if ( offset === undefined ) offset = 0;

		array[ offset ] = this._x;
		array[ offset + 1 ] = this._y;
		array[ offset + 2 ] = this._z;
		array[ offset + 3 ] = this._order;

		return array;

	},

	toVector3: function ( optionalResult ) {

		if ( optionalResult ) {

			return optionalResult.set( this._x, this._y, this._z );

		} else {

			return new _Vector3_js__WEBPACK_IMPORTED_MODULE_1__["Vector3"]( this._x, this._y, this._z );

		}

	},

	_onChange: function ( callback ) {

		this._onChangeCallback = callback;

		return this;

	},

	_onChangeCallback: function () {}

} );





/***/ }),

/***/ "./node_modules/three/src/math/Math.js":
/*!*********************************************!*\
  !*** ./node_modules/three/src/math/Math.js ***!
  \*********************************************/
/*! exports provided: _Math */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_Math", function() { return _Math; });
/**
 * @author alteredq / http://alteredqualia.com/
 * @author mrdoob / http://mrdoob.com/
 */

var _lut = [];

for ( var i = 0; i < 256; i ++ ) {

	_lut[ i ] = ( i < 16 ? '0' : '' ) + ( i ).toString( 16 );

}

var _Math = {

	DEG2RAD: Math.PI / 180,
	RAD2DEG: 180 / Math.PI,

	generateUUID: function () {

		// http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136

		var d0 = Math.random() * 0xffffffff | 0;
		var d1 = Math.random() * 0xffffffff | 0;
		var d2 = Math.random() * 0xffffffff | 0;
		var d3 = Math.random() * 0xffffffff | 0;
		var uuid = _lut[ d0 & 0xff ] + _lut[ d0 >> 8 & 0xff ] + _lut[ d0 >> 16 & 0xff ] + _lut[ d0 >> 24 & 0xff ] + '-' +
			_lut[ d1 & 0xff ] + _lut[ d1 >> 8 & 0xff ] + '-' + _lut[ d1 >> 16 & 0x0f | 0x40 ] + _lut[ d1 >> 24 & 0xff ] + '-' +
			_lut[ d2 & 0x3f | 0x80 ] + _lut[ d2 >> 8 & 0xff ] + '-' + _lut[ d2 >> 16 & 0xff ] + _lut[ d2 >> 24 & 0xff ] +
			_lut[ d3 & 0xff ] + _lut[ d3 >> 8 & 0xff ] + _lut[ d3 >> 16 & 0xff ] + _lut[ d3 >> 24 & 0xff ];

		// .toUpperCase() here flattens concatenated strings to save heap memory space.
		return uuid.toUpperCase();

	},

	clamp: function ( value, min, max ) {

		return Math.max( min, Math.min( max, value ) );

	},

	// compute euclidian modulo of m % n
	// https://en.wikipedia.org/wiki/Modulo_operation

	euclideanModulo: function ( n, m ) {

		return ( ( n % m ) + m ) % m;

	},

	// Linear mapping from range <a1, a2> to range <b1, b2>

	mapLinear: function ( x, a1, a2, b1, b2 ) {

		return b1 + ( x - a1 ) * ( b2 - b1 ) / ( a2 - a1 );

	},

	// https://en.wikipedia.org/wiki/Linear_interpolation

	lerp: function ( x, y, t ) {

		return ( 1 - t ) * x + t * y;

	},

	// http://en.wikipedia.org/wiki/Smoothstep

	smoothstep: function ( x, min, max ) {

		if ( x <= min ) return 0;
		if ( x >= max ) return 1;

		x = ( x - min ) / ( max - min );

		return x * x * ( 3 - 2 * x );

	},

	smootherstep: function ( x, min, max ) {

		if ( x <= min ) return 0;
		if ( x >= max ) return 1;

		x = ( x - min ) / ( max - min );

		return x * x * x * ( x * ( x * 6 - 15 ) + 10 );

	},

	// Random integer from <low, high> interval

	randInt: function ( low, high ) {

		return low + Math.floor( Math.random() * ( high - low + 1 ) );

	},

	// Random float from <low, high> interval

	randFloat: function ( low, high ) {

		return low + Math.random() * ( high - low );

	},

	// Random float from <-range/2, range/2> interval

	randFloatSpread: function ( range ) {

		return range * ( 0.5 - Math.random() );

	},

	degToRad: function ( degrees ) {

		return degrees * _Math.DEG2RAD;

	},

	radToDeg: function ( radians ) {

		return radians * _Math.RAD2DEG;

	},

	isPowerOfTwo: function ( value ) {

		return ( value & ( value - 1 ) ) === 0 && value !== 0;

	},

	ceilPowerOfTwo: function ( value ) {

		return Math.pow( 2, Math.ceil( Math.log( value ) / Math.LN2 ) );

	},

	floorPowerOfTwo: function ( value ) {

		return Math.pow( 2, Math.floor( Math.log( value ) / Math.LN2 ) );

	}

};





/***/ }),

/***/ "./node_modules/three/src/math/Matrix3.js":
/*!************************************************!*\
  !*** ./node_modules/three/src/math/Matrix3.js ***!
  \************************************************/
/*! exports provided: Matrix3 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Matrix3", function() { return Matrix3; });
/* harmony import */ var _Vector3_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Vector3.js */ "./node_modules/three/src/math/Vector3.js");


/**
 * @author alteredq / http://alteredqualia.com/
 * @author WestLangley / http://github.com/WestLangley
 * @author bhouston / http://clara.io
 * @author tschw
 */

var _vector = new _Vector3_js__WEBPACK_IMPORTED_MODULE_0__["Vector3"]();

function Matrix3() {

	this.elements = [

		1, 0, 0,
		0, 1, 0,
		0, 0, 1

	];

	if ( arguments.length > 0 ) {

		console.error( 'THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.' );

	}

}

Object.assign( Matrix3.prototype, {

	isMatrix3: true,

	set: function ( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {

		var te = this.elements;

		te[ 0 ] = n11; te[ 1 ] = n21; te[ 2 ] = n31;
		te[ 3 ] = n12; te[ 4 ] = n22; te[ 5 ] = n32;
		te[ 6 ] = n13; te[ 7 ] = n23; te[ 8 ] = n33;

		return this;

	},

	identity: function () {

		this.set(

			1, 0, 0,
			0, 1, 0,
			0, 0, 1

		);

		return this;

	},

	clone: function () {

		return new this.constructor().fromArray( this.elements );

	},

	copy: function ( m ) {

		var te = this.elements;
		var me = m.elements;

		te[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ];
		te[ 3 ] = me[ 3 ]; te[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ];
		te[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ]; te[ 8 ] = me[ 8 ];

		return this;

	},

	setFromMatrix4: function ( m ) {

		var me = m.elements;

		this.set(

			me[ 0 ], me[ 4 ], me[ 8 ],
			me[ 1 ], me[ 5 ], me[ 9 ],
			me[ 2 ], me[ 6 ], me[ 10 ]

		);

		return this;

	},

	applyToBufferAttribute: function ( attribute ) {

		for ( var i = 0, l = attribute.count; i < l; i ++ ) {

			_vector.x = attribute.getX( i );
			_vector.y = attribute.getY( i );
			_vector.z = attribute.getZ( i );

			_vector.applyMatrix3( this );

			attribute.setXYZ( i, _vector.x, _vector.y, _vector.z );

		}

		return attribute;

	},

	multiply: function ( m ) {

		return this.multiplyMatrices( this, m );

	},

	premultiply: function ( m ) {

		return this.multiplyMatrices( m, this );

	},

	multiplyMatrices: function ( a, b ) {

		var ae = a.elements;
		var be = b.elements;
		var te = this.elements;

		var a11 = ae[ 0 ], a12 = ae[ 3 ], a13 = ae[ 6 ];
		var a21 = ae[ 1 ], a22 = ae[ 4 ], a23 = ae[ 7 ];
		var a31 = ae[ 2 ], a32 = ae[ 5 ], a33 = ae[ 8 ];

		var b11 = be[ 0 ], b12 = be[ 3 ], b13 = be[ 6 ];
		var b21 = be[ 1 ], b22 = be[ 4 ], b23 = be[ 7 ];
		var b31 = be[ 2 ], b32 = be[ 5 ], b33 = be[ 8 ];

		te[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31;
		te[ 3 ] = a11 * b12 + a12 * b22 + a13 * b32;
		te[ 6 ] = a11 * b13 + a12 * b23 + a13 * b33;

		te[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31;
		te[ 4 ] = a21 * b12 + a22 * b22 + a23 * b32;
		te[ 7 ] = a21 * b13 + a22 * b23 + a23 * b33;

		te[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31;
		te[ 5 ] = a31 * b12 + a32 * b22 + a33 * b32;
		te[ 8 ] = a31 * b13 + a32 * b23 + a33 * b33;

		return this;

	},

	multiplyScalar: function ( s ) {

		var te = this.elements;

		te[ 0 ] *= s; te[ 3 ] *= s; te[ 6 ] *= s;
		te[ 1 ] *= s; te[ 4 ] *= s; te[ 7 ] *= s;
		te[ 2 ] *= s; te[ 5 ] *= s; te[ 8 ] *= s;

		return this;

	},

	determinant: function () {

		var te = this.elements;

		var a = te[ 0 ], b = te[ 1 ], c = te[ 2 ],
			d = te[ 3 ], e = te[ 4 ], f = te[ 5 ],
			g = te[ 6 ], h = te[ 7 ], i = te[ 8 ];

		return a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;

	},

	getInverse: function ( matrix, throwOnDegenerate ) {

		if ( matrix && matrix.isMatrix4 ) {

			console.error( "THREE.Matrix3: .getInverse() no longer takes a Matrix4 argument." );

		}

		var me = matrix.elements,
			te = this.elements,

			n11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ],
			n12 = me[ 3 ], n22 = me[ 4 ], n32 = me[ 5 ],
			n13 = me[ 6 ], n23 = me[ 7 ], n33 = me[ 8 ],

			t11 = n33 * n22 - n32 * n23,
			t12 = n32 * n13 - n33 * n12,
			t13 = n23 * n12 - n22 * n13,

			det = n11 * t11 + n21 * t12 + n31 * t13;

		if ( det === 0 ) {

			var msg = "THREE.Matrix3: .getInverse() can't invert matrix, determinant is 0";

			if ( throwOnDegenerate === true ) {

				throw new Error( msg );

			} else {

				console.warn( msg );

			}

			return this.identity();

		}

		var detInv = 1 / det;

		te[ 0 ] = t11 * detInv;
		te[ 1 ] = ( n31 * n23 - n33 * n21 ) * detInv;
		te[ 2 ] = ( n32 * n21 - n31 * n22 ) * detInv;

		te[ 3 ] = t12 * detInv;
		te[ 4 ] = ( n33 * n11 - n31 * n13 ) * detInv;
		te[ 5 ] = ( n31 * n12 - n32 * n11 ) * detInv;

		te[ 6 ] = t13 * detInv;
		te[ 7 ] = ( n21 * n13 - n23 * n11 ) * detInv;
		te[ 8 ] = ( n22 * n11 - n21 * n12 ) * detInv;

		return this;

	},

	transpose: function () {

		var tmp, m = this.elements;

		tmp = m[ 1 ]; m[ 1 ] = m[ 3 ]; m[ 3 ] = tmp;
		tmp = m[ 2 ]; m[ 2 ] = m[ 6 ]; m[ 6 ] = tmp;
		tmp = m[ 5 ]; m[ 5 ] = m[ 7 ]; m[ 7 ] = tmp;

		return this;

	},

	getNormalMatrix: function ( matrix4 ) {

		return this.setFromMatrix4( matrix4 ).getInverse( this ).transpose();

	},

	transposeIntoArray: function ( r ) {

		var m = this.elements;

		r[ 0 ] = m[ 0 ];
		r[ 1 ] = m[ 3 ];
		r[ 2 ] = m[ 6 ];
		r[ 3 ] = m[ 1 ];
		r[ 4 ] = m[ 4 ];
		r[ 5 ] = m[ 7 ];
		r[ 6 ] = m[ 2 ];
		r[ 7 ] = m[ 5 ];
		r[ 8 ] = m[ 8 ];

		return this;

	},

	setUvTransform: function ( tx, ty, sx, sy, rotation, cx, cy ) {

		var c = Math.cos( rotation );
		var s = Math.sin( rotation );

		this.set(
			sx * c, sx * s, - sx * ( c * cx + s * cy ) + cx + tx,
			- sy * s, sy * c, - sy * ( - s * cx + c * cy ) + cy + ty,
			0, 0, 1
		);

	},

	scale: function ( sx, sy ) {

		var te = this.elements;

		te[ 0 ] *= sx; te[ 3 ] *= sx; te[ 6 ] *= sx;
		te[ 1 ] *= sy; te[ 4 ] *= sy; te[ 7 ] *= sy;

		return this;

	},

	rotate: function ( theta ) {

		var c = Math.cos( theta );
		var s = Math.sin( theta );

		var te = this.elements;

		var a11 = te[ 0 ], a12 = te[ 3 ], a13 = te[ 6 ];
		var a21 = te[ 1 ], a22 = te[ 4 ], a23 = te[ 7 ];

		te[ 0 ] = c * a11 + s * a21;
		te[ 3 ] = c * a12 + s * a22;
		te[ 6 ] = c * a13 + s * a23;

		te[ 1 ] = - s * a11 + c * a21;
		te[ 4 ] = - s * a12 + c * a22;
		te[ 7 ] = - s * a13 + c * a23;

		return this;

	},

	translate: function ( tx, ty ) {

		var te = this.elements;

		te[ 0 ] += tx * te[ 2 ]; te[ 3 ] += tx * te[ 5 ]; te[ 6 ] += tx * te[ 8 ];
		te[ 1 ] += ty * te[ 2 ]; te[ 4 ] += ty * te[ 5 ]; te[ 7 ] += ty * te[ 8 ];

		return this;

	},

	equals: function ( matrix ) {

		var te = this.elements;
		var me = matrix.elements;

		for ( var i = 0; i < 9; i ++ ) {

			if ( te[ i ] !== me[ i ] ) return false;

		}

		return true;

	},

	fromArray: function ( array, offset ) {

		if ( offset === undefined ) offset = 0;

		for ( var i = 0; i < 9; i ++ ) {

			this.elements[ i ] = array[ i + offset ];

		}

		return this;

	},

	toArray: function ( array, offset ) {

		if ( array === undefined ) array = [];
		if ( offset === undefined ) offset = 0;

		var te = this.elements;

		array[ offset ] = te[ 0 ];
		array[ offset + 1 ] = te[ 1 ];
		array[ offset + 2 ] = te[ 2 ];

		array[ offset + 3 ] = te[ 3 ];
		array[ offset + 4 ] = te[ 4 ];
		array[ offset + 5 ] = te[ 5 ];

		array[ offset + 6 ] = te[ 6 ];
		array[ offset + 7 ] = te[ 7 ];
		array[ offset + 8 ] = te[ 8 ];

		return array;

	}

} );





/***/ }),

/***/ "./node_modules/three/src/math/Matrix4.js":
/*!************************************************!*\
  !*** ./node_modules/three/src/math/Matrix4.js ***!
  \************************************************/
/*! exports provided: Matrix4 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Matrix4", function() { return Matrix4; });
/* harmony import */ var _Vector3_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Vector3.js */ "./node_modules/three/src/math/Vector3.js");


var _v1 = new _Vector3_js__WEBPACK_IMPORTED_MODULE_0__["Vector3"]();
var _m1 = new Matrix4();
var _zero = new _Vector3_js__WEBPACK_IMPORTED_MODULE_0__["Vector3"]( 0, 0, 0 );
var _one = new _Vector3_js__WEBPACK_IMPORTED_MODULE_0__["Vector3"]( 1, 1, 1 );
var _x = new _Vector3_js__WEBPACK_IMPORTED_MODULE_0__["Vector3"]();
var _y = new _Vector3_js__WEBPACK_IMPORTED_MODULE_0__["Vector3"]();
var _z = new _Vector3_js__WEBPACK_IMPORTED_MODULE_0__["Vector3"]();

/**
 * @author mrdoob / http://mrdoob.com/
 * @author supereggbert / http://www.paulbrunt.co.uk/
 * @author philogb / http://blog.thejit.org/
 * @author jordi_ros / http://plattsoft.com
 * @author D1plo1d / http://github.com/D1plo1d
 * @author alteredq / http://alteredqualia.com/
 * @author mikael emtinger / http://gomo.se/
 * @author timknip / http://www.floorplanner.com/
 * @author bhouston / http://clara.io
 * @author WestLangley / http://github.com/WestLangley
 */

function Matrix4() {

	this.elements = [

		1, 0, 0, 0,
		0, 1, 0, 0,
		0, 0, 1, 0,
		0, 0, 0, 1

	];

	if ( arguments.length > 0 ) {

		console.error( 'THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.' );

	}

}

Object.assign( Matrix4.prototype, {

	isMatrix4: true,

	set: function ( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {

		var te = this.elements;

		te[ 0 ] = n11; te[ 4 ] = n12; te[ 8 ] = n13; te[ 12 ] = n14;
		te[ 1 ] = n21; te[ 5 ] = n22; te[ 9 ] = n23; te[ 13 ] = n24;
		te[ 2 ] = n31; te[ 6 ] = n32; te[ 10 ] = n33; te[ 14 ] = n34;
		te[ 3 ] = n41; te[ 7 ] = n42; te[ 11 ] = n43; te[ 15 ] = n44;

		return this;

	},

	identity: function () {

		this.set(

			1, 0, 0, 0,
			0, 1, 0, 0,
			0, 0, 1, 0,
			0, 0, 0, 1

		);

		return this;

	},

	clone: function () {

		return new Matrix4().fromArray( this.elements );

	},

	copy: function ( m ) {

		var te = this.elements;
		var me = m.elements;

		te[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ]; te[ 3 ] = me[ 3 ];
		te[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ]; te[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ];
		te[ 8 ] = me[ 8 ]; te[ 9 ] = me[ 9 ]; te[ 10 ] = me[ 10 ]; te[ 11 ] = me[ 11 ];
		te[ 12 ] = me[ 12 ]; te[ 13 ] = me[ 13 ]; te[ 14 ] = me[ 14 ]; te[ 15 ] = me[ 15 ];

		return this;

	},

	copyPosition: function ( m ) {

		var te = this.elements, me = m.elements;

		te[ 12 ] = me[ 12 ];
		te[ 13 ] = me[ 13 ];
		te[ 14 ] = me[ 14 ];

		return this;

	},

	extractBasis: function ( xAxis, yAxis, zAxis ) {

		xAxis.setFromMatrixColumn( this, 0 );
		yAxis.setFromMatrixColumn( this, 1 );
		zAxis.setFromMatrixColumn( this, 2 );

		return this;

	},

	makeBasis: function ( xAxis, yAxis, zAxis ) {

		this.set(
			xAxis.x, yAxis.x, zAxis.x, 0,
			xAxis.y, yAxis.y, zAxis.y, 0,
			xAxis.z, yAxis.z, zAxis.z, 0,
			0, 0, 0, 1
		);

		return this;

	},

	extractRotation: function ( m ) {

		// this method does not support reflection matrices

		var te = this.elements;
		var me = m.elements;

		var scaleX = 1 / _v1.setFromMatrixColumn( m, 0 ).length();
		var scaleY = 1 / _v1.setFromMatrixColumn( m, 1 ).length();
		var scaleZ = 1 / _v1.setFromMatrixColumn( m, 2 ).length();

		te[ 0 ] = me[ 0 ] * scaleX;
		te[ 1 ] = me[ 1 ] * scaleX;
		te[ 2 ] = me[ 2 ] * scaleX;
		te[ 3 ] = 0;

		te[ 4 ] = me[ 4 ] * scaleY;
		te[ 5 ] = me[ 5 ] * scaleY;
		te[ 6 ] = me[ 6 ] * scaleY;
		te[ 7 ] = 0;

		te[ 8 ] = me[ 8 ] * scaleZ;
		te[ 9 ] = me[ 9 ] * scaleZ;
		te[ 10 ] = me[ 10 ] * scaleZ;
		te[ 11 ] = 0;

		te[ 12 ] = 0;
		te[ 13 ] = 0;
		te[ 14 ] = 0;
		te[ 15 ] = 1;

		return this;

	},

	makeRotationFromEuler: function ( euler ) {

		if ( ! ( euler && euler.isEuler ) ) {

			console.error( 'THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.' );

		}

		var te = this.elements;

		var x = euler.x, y = euler.y, z = euler.z;
		var a = Math.cos( x ), b = Math.sin( x );
		var c = Math.cos( y ), d = Math.sin( y );
		var e = Math.cos( z ), f = Math.sin( z );

		if ( euler.order === 'XYZ' ) {

			var ae = a * e, af = a * f, be = b * e, bf = b * f;

			te[ 0 ] = c * e;
			te[ 4 ] = - c * f;
			te[ 8 ] = d;

			te[ 1 ] = af + be * d;
			te[ 5 ] = ae - bf * d;
			te[ 9 ] = - b * c;

			te[ 2 ] = bf - ae * d;
			te[ 6 ] = be + af * d;
			te[ 10 ] = a * c;

		} else if ( euler.order === 'YXZ' ) {

			var ce = c * e, cf = c * f, de = d * e, df = d * f;

			te[ 0 ] = ce + df * b;
			te[ 4 ] = de * b - cf;
			te[ 8 ] = a * d;

			te[ 1 ] = a * f;
			te[ 5 ] = a * e;
			te[ 9 ] = - b;

			te[ 2 ] = cf * b - de;
			te[ 6 ] = df + ce * b;
			te[ 10 ] = a * c;

		} else if ( euler.order === 'ZXY' ) {

			var ce = c * e, cf = c * f, de = d * e, df = d * f;

			te[ 0 ] = ce - df * b;
			te[ 4 ] = - a * f;
			te[ 8 ] = de + cf * b;

			te[ 1 ] = cf + de * b;
			te[ 5 ] = a * e;
			te[ 9 ] = df - ce * b;

			te[ 2 ] = - a * d;
			te[ 6 ] = b;
			te[ 10 ] = a * c;

		} else if ( euler.order === 'ZYX' ) {

			var ae = a * e, af = a * f, be = b * e, bf = b * f;

			te[ 0 ] = c * e;
			te[ 4 ] = be * d - af;
			te[ 8 ] = ae * d + bf;

			te[ 1 ] = c * f;
			te[ 5 ] = bf * d + ae;
			te[ 9 ] = af * d - be;

			te[ 2 ] = - d;
			te[ 6 ] = b * c;
			te[ 10 ] = a * c;

		} else if ( euler.order === 'YZX' ) {

			var ac = a * c, ad = a * d, bc = b * c, bd = b * d;

			te[ 0 ] = c * e;
			te[ 4 ] = bd - ac * f;
			te[ 8 ] = bc * f + ad;

			te[ 1 ] = f;
			te[ 5 ] = a * e;
			te[ 9 ] = - b * e;

			te[ 2 ] = - d * e;
			te[ 6 ] = ad * f + bc;
			te[ 10 ] = ac - bd * f;

		} else if ( euler.order === 'XZY' ) {

			var ac = a * c, ad = a * d, bc = b * c, bd = b * d;

			te[ 0 ] = c * e;
			te[ 4 ] = - f;
			te[ 8 ] = d * e;

			te[ 1 ] = ac * f + bd;
			te[ 5 ] = a * e;
			te[ 9 ] = ad * f - bc;

			te[ 2 ] = bc * f - ad;
			te[ 6 ] = b * e;
			te[ 10 ] = bd * f + ac;

		}

		// bottom row
		te[ 3 ] = 0;
		te[ 7 ] = 0;
		te[ 11 ] = 0;

		// last column
		te[ 12 ] = 0;
		te[ 13 ] = 0;
		te[ 14 ] = 0;
		te[ 15 ] = 1;

		return this;

	},

	makeRotationFromQuaternion: function ( q ) {

		return this.compose( _zero, q, _one );

	},

	lookAt: function ( eye, target, up ) {

		var te = this.elements;

		_z.subVectors( eye, target );

		if ( _z.lengthSq() === 0 ) {

			// eye and target are in the same position

			_z.z = 1;

		}

		_z.normalize();
		_x.crossVectors( up, _z );

		if ( _x.lengthSq() === 0 ) {

			// up and z are parallel

			if ( Math.abs( up.z ) === 1 ) {

				_z.x += 0.0001;

			} else {

				_z.z += 0.0001;

			}

			_z.normalize();
			_x.crossVectors( up, _z );

		}

		_x.normalize();
		_y.crossVectors( _z, _x );

		te[ 0 ] = _x.x; te[ 4 ] = _y.x; te[ 8 ] = _z.x;
		te[ 1 ] = _x.y; te[ 5 ] = _y.y; te[ 9 ] = _z.y;
		te[ 2 ] = _x.z; te[ 6 ] = _y.z; te[ 10 ] = _z.z;

		return this;

	},

	multiply: function ( m, n ) {

		if ( n !== undefined ) {

			console.warn( 'THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.' );
			return this.multiplyMatrices( m, n );

		}

		return this.multiplyMatrices( this, m );

	},

	premultiply: function ( m ) {

		return this.multiplyMatrices( m, this );

	},

	multiplyMatrices: function ( a, b ) {

		var ae = a.elements;
		var be = b.elements;
		var te = this.elements;

		var a11 = ae[ 0 ], a12 = ae[ 4 ], a13 = ae[ 8 ], a14 = ae[ 12 ];
		var a21 = ae[ 1 ], a22 = ae[ 5 ], a23 = ae[ 9 ], a24 = ae[ 13 ];
		var a31 = ae[ 2 ], a32 = ae[ 6 ], a33 = ae[ 10 ], a34 = ae[ 14 ];
		var a41 = ae[ 3 ], a42 = ae[ 7 ], a43 = ae[ 11 ], a44 = ae[ 15 ];

		var b11 = be[ 0 ], b12 = be[ 4 ], b13 = be[ 8 ], b14 = be[ 12 ];
		var b21 = be[ 1 ], b22 = be[ 5 ], b23 = be[ 9 ], b24 = be[ 13 ];
		var b31 = be[ 2 ], b32 = be[ 6 ], b33 = be[ 10 ], b34 = be[ 14 ];
		var b41 = be[ 3 ], b42 = be[ 7 ], b43 = be[ 11 ], b44 = be[ 15 ];

		te[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;
		te[ 4 ] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;
		te[ 8 ] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;
		te[ 12 ] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;

		te[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;
		te[ 5 ] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;
		te[ 9 ] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;
		te[ 13 ] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;

		te[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;
		te[ 6 ] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;
		te[ 10 ] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;
		te[ 14 ] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;

		te[ 3 ] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;
		te[ 7 ] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;
		te[ 11 ] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;
		te[ 15 ] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;

		return this;

	},

	multiplyScalar: function ( s ) {

		var te = this.elements;

		te[ 0 ] *= s; te[ 4 ] *= s; te[ 8 ] *= s; te[ 12 ] *= s;
		te[ 1 ] *= s; te[ 5 ] *= s; te[ 9 ] *= s; te[ 13 ] *= s;
		te[ 2 ] *= s; te[ 6 ] *= s; te[ 10 ] *= s; te[ 14 ] *= s;
		te[ 3 ] *= s; te[ 7 ] *= s; te[ 11 ] *= s; te[ 15 ] *= s;

		return this;

	},

	applyToBufferAttribute: function ( attribute ) {

		for ( var i = 0, l = attribute.count; i < l; i ++ ) {

			_v1.x = attribute.getX( i );
			_v1.y = attribute.getY( i );
			_v1.z = attribute.getZ( i );

			_v1.applyMatrix4( this );

			attribute.setXYZ( i, _v1.x, _v1.y, _v1.z );

		}

		return attribute;

	},

	determinant: function () {

		var te = this.elements;

		var n11 = te[ 0 ], n12 = te[ 4 ], n13 = te[ 8 ], n14 = te[ 12 ];
		var n21 = te[ 1 ], n22 = te[ 5 ], n23 = te[ 9 ], n24 = te[ 13 ];
		var n31 = te[ 2 ], n32 = te[ 6 ], n33 = te[ 10 ], n34 = te[ 14 ];
		var n41 = te[ 3 ], n42 = te[ 7 ], n43 = te[ 11 ], n44 = te[ 15 ];

		//TODO: make this more efficient
		//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )

		return (
			n41 * (
				+ n14 * n23 * n32
				 - n13 * n24 * n32
				 - n14 * n22 * n33
				 + n12 * n24 * n33
				 + n13 * n22 * n34
				 - n12 * n23 * n34
			) +
			n42 * (
				+ n11 * n23 * n34
				 - n11 * n24 * n33
				 + n14 * n21 * n33
				 - n13 * n21 * n34
				 + n13 * n24 * n31
				 - n14 * n23 * n31
			) +
			n43 * (
				+ n11 * n24 * n32
				 - n11 * n22 * n34
				 - n14 * n21 * n32
				 + n12 * n21 * n34
				 + n14 * n22 * n31
				 - n12 * n24 * n31
			) +
			n44 * (
				- n13 * n22 * n31
				 - n11 * n23 * n32
				 + n11 * n22 * n33
				 + n13 * n21 * n32
				 - n12 * n21 * n33
				 + n12 * n23 * n31
			)

		);

	},

	transpose: function () {

		var te = this.elements;
		var tmp;

		tmp = te[ 1 ]; te[ 1 ] = te[ 4 ]; te[ 4 ] = tmp;
		tmp = te[ 2 ]; te[ 2 ] = te[ 8 ]; te[ 8 ] = tmp;
		tmp = te[ 6 ]; te[ 6 ] = te[ 9 ]; te[ 9 ] = tmp;

		tmp = te[ 3 ]; te[ 3 ] = te[ 12 ]; te[ 12 ] = tmp;
		tmp = te[ 7 ]; te[ 7 ] = te[ 13 ]; te[ 13 ] = tmp;
		tmp = te[ 11 ]; te[ 11 ] = te[ 14 ]; te[ 14 ] = tmp;

		return this;

	},

	setPosition: function ( x, y, z ) {

		var te = this.elements;

		if ( x.isVector3 ) {

			te[ 12 ] = x.x;
			te[ 13 ] = x.y;
			te[ 14 ] = x.z;

		} else {

			te[ 12 ] = x;
			te[ 13 ] = y;
			te[ 14 ] = z;

		}

		return this;

	},

	getInverse: function ( m, throwOnDegenerate ) {

		// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm
		var te = this.elements,
			me = m.elements,

			n11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ], n41 = me[ 3 ],
			n12 = me[ 4 ], n22 = me[ 5 ], n32 = me[ 6 ], n42 = me[ 7 ],
			n13 = me[ 8 ], n23 = me[ 9 ], n33 = me[ 10 ], n43 = me[ 11 ],
			n14 = me[ 12 ], n24 = me[ 13 ], n34 = me[ 14 ], n44 = me[ 15 ],

			t11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,
			t12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,
			t13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,
			t14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;

		var det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;

		if ( det === 0 ) {

			var msg = "THREE.Matrix4: .getInverse() can't invert matrix, determinant is 0";

			if ( throwOnDegenerate === true ) {

				throw new Error( msg );

			} else {

				console.warn( msg );

			}

			return this.identity();

		}

		var detInv = 1 / det;

		te[ 0 ] = t11 * detInv;
		te[ 1 ] = ( n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44 ) * detInv;
		te[ 2 ] = ( n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44 ) * detInv;
		te[ 3 ] = ( n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43 ) * detInv;

		te[ 4 ] = t12 * detInv;
		te[ 5 ] = ( n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44 ) * detInv;
		te[ 6 ] = ( n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44 ) * detInv;
		te[ 7 ] = ( n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43 ) * detInv;

		te[ 8 ] = t13 * detInv;
		te[ 9 ] = ( n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44 ) * detInv;
		te[ 10 ] = ( n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44 ) * detInv;
		te[ 11 ] = ( n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43 ) * detInv;

		te[ 12 ] = t14 * detInv;
		te[ 13 ] = ( n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34 ) * detInv;
		te[ 14 ] = ( n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34 ) * detInv;
		te[ 15 ] = ( n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33 ) * detInv;

		return this;

	},

	scale: function ( v ) {

		var te = this.elements;
		var x = v.x, y = v.y, z = v.z;

		te[ 0 ] *= x; te[ 4 ] *= y; te[ 8 ] *= z;
		te[ 1 ] *= x; te[ 5 ] *= y; te[ 9 ] *= z;
		te[ 2 ] *= x; te[ 6 ] *= y; te[ 10 ] *= z;
		te[ 3 ] *= x; te[ 7 ] *= y; te[ 11 ] *= z;

		return this;

	},

	getMaxScaleOnAxis: function () {

		var te = this.elements;

		var scaleXSq = te[ 0 ] * te[ 0 ] + te[ 1 ] * te[ 1 ] + te[ 2 ] * te[ 2 ];
		var scaleYSq = te[ 4 ] * te[ 4 ] + te[ 5 ] * te[ 5 ] + te[ 6 ] * te[ 6 ];
		var scaleZSq = te[ 8 ] * te[ 8 ] + te[ 9 ] * te[ 9 ] + te[ 10 ] * te[ 10 ];

		return Math.sqrt( Math.max( scaleXSq, scaleYSq, scaleZSq ) );

	},

	makeTranslation: function ( x, y, z ) {

		this.set(

			1, 0, 0, x,
			0, 1, 0, y,
			0, 0, 1, z,
			0, 0, 0, 1

		);

		return this;

	},

	makeRotationX: function ( theta ) {

		var c = Math.cos( theta ), s = Math.sin( theta );

		this.set(

			1, 0, 0, 0,
			0, c, - s, 0,
			0, s, c, 0,
			0, 0, 0, 1

		);

		return this;

	},

	makeRotationY: function ( theta ) {

		var c = Math.cos( theta ), s = Math.sin( theta );

		this.set(

			 c, 0, s, 0,
			 0, 1, 0, 0,
			- s, 0, c, 0,
			 0, 0, 0, 1

		);

		return this;

	},

	makeRotationZ: function ( theta ) {

		var c = Math.cos( theta ), s = Math.sin( theta );

		this.set(

			c, - s, 0, 0,
			s, c, 0, 0,
			0, 0, 1, 0,
			0, 0, 0, 1

		);

		return this;

	},

	makeRotationAxis: function ( axis, angle ) {

		// Based on http://www.gamedev.net/reference/articles/article1199.asp

		var c = Math.cos( angle );
		var s = Math.sin( angle );
		var t = 1 - c;
		var x = axis.x, y = axis.y, z = axis.z;
		var tx = t * x, ty = t * y;

		this.set(

			tx * x + c, tx * y - s * z, tx * z + s * y, 0,
			tx * y + s * z, ty * y + c, ty * z - s * x, 0,
			tx * z - s * y, ty * z + s * x, t * z * z + c, 0,
			0, 0, 0, 1

		);

		 return this;

	},

	makeScale: function ( x, y, z ) {

		this.set(

			x, 0, 0, 0,
			0, y, 0, 0,
			0, 0, z, 0,
			0, 0, 0, 1

		);

		return this;

	},

	makeShear: function ( x, y, z ) {

		this.set(

			1, y, z, 0,
			x, 1, z, 0,
			x, y, 1, 0,
			0, 0, 0, 1

		);

		return this;

	},

	compose: function ( position, quaternion, scale ) {

		var te = this.elements;

		var x = quaternion._x, y = quaternion._y, z = quaternion._z, w = quaternion._w;
		var x2 = x + x,	y2 = y + y, z2 = z + z;
		var xx = x * x2, xy = x * y2, xz = x * z2;
		var yy = y * y2, yz = y * z2, zz = z * z2;
		var wx = w * x2, wy = w * y2, wz = w * z2;

		var sx = scale.x, sy = scale.y, sz = scale.z;

		te[ 0 ] = ( 1 - ( yy + zz ) ) * sx;
		te[ 1 ] = ( xy + wz ) * sx;
		te[ 2 ] = ( xz - wy ) * sx;
		te[ 3 ] = 0;

		te[ 4 ] = ( xy - wz ) * sy;
		te[ 5 ] = ( 1 - ( xx + zz ) ) * sy;
		te[ 6 ] = ( yz + wx ) * sy;
		te[ 7 ] = 0;

		te[ 8 ] = ( xz + wy ) * sz;
		te[ 9 ] = ( yz - wx ) * sz;
		te[ 10 ] = ( 1 - ( xx + yy ) ) * sz;
		te[ 11 ] = 0;

		te[ 12 ] = position.x;
		te[ 13 ] = position.y;
		te[ 14 ] = position.z;
		te[ 15 ] = 1;

		return this;

	},

	decompose: function ( position, quaternion, scale ) {

		var te = this.elements;

		var sx = _v1.set( te[ 0 ], te[ 1 ], te[ 2 ] ).length();
		var sy = _v1.set( te[ 4 ], te[ 5 ], te[ 6 ] ).length();
		var sz = _v1.set( te[ 8 ], te[ 9 ], te[ 10 ] ).length();

		// if determine is negative, we need to invert one scale
		var det = this.determinant();
		if ( det < 0 ) sx = - sx;

		position.x = te[ 12 ];
		position.y = te[ 13 ];
		position.z = te[ 14 ];

		// scale the rotation part
		_m1.copy( this );

		var invSX = 1 / sx;
		var invSY = 1 / sy;
		var invSZ = 1 / sz;

		_m1.elements[ 0 ] *= invSX;
		_m1.elements[ 1 ] *= invSX;
		_m1.elements[ 2 ] *= invSX;

		_m1.elements[ 4 ] *= invSY;
		_m1.elements[ 5 ] *= invSY;
		_m1.elements[ 6 ] *= invSY;

		_m1.elements[ 8 ] *= invSZ;
		_m1.elements[ 9 ] *= invSZ;
		_m1.elements[ 10 ] *= invSZ;

		quaternion.setFromRotationMatrix( _m1 );

		scale.x = sx;
		scale.y = sy;
		scale.z = sz;

		return this;

	},

	makePerspective: function ( left, right, top, bottom, near, far ) {

		if ( far === undefined ) {

			console.warn( 'THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.' );

		}

		var te = this.elements;
		var x = 2 * near / ( right - left );
		var y = 2 * near / ( top - bottom );

		var a = ( right + left ) / ( right - left );
		var b = ( top + bottom ) / ( top - bottom );
		var c = - ( far + near ) / ( far - near );
		var d = - 2 * far * near / ( far - near );

		te[ 0 ] = x;	te[ 4 ] = 0;	te[ 8 ] = a;	te[ 12 ] = 0;
		te[ 1 ] = 0;	te[ 5 ] = y;	te[ 9 ] = b;	te[ 13 ] = 0;
		te[ 2 ] = 0;	te[ 6 ] = 0;	te[ 10 ] = c;	te[ 14 ] = d;
		te[ 3 ] = 0;	te[ 7 ] = 0;	te[ 11 ] = - 1;	te[ 15 ] = 0;

		return this;

	},

	makeOrthographic: function ( left, right, top, bottom, near, far ) {

		var te = this.elements;
		var w = 1.0 / ( right - left );
		var h = 1.0 / ( top - bottom );
		var p = 1.0 / ( far - near );

		var x = ( right + left ) * w;
		var y = ( top + bottom ) * h;
		var z = ( far + near ) * p;

		te[ 0 ] = 2 * w;	te[ 4 ] = 0;	te[ 8 ] = 0;	te[ 12 ] = - x;
		te[ 1 ] = 0;	te[ 5 ] = 2 * h;	te[ 9 ] = 0;	te[ 13 ] = - y;
		te[ 2 ] = 0;	te[ 6 ] = 0;	te[ 10 ] = - 2 * p;	te[ 14 ] = - z;
		te[ 3 ] = 0;	te[ 7 ] = 0;	te[ 11 ] = 0;	te[ 15 ] = 1;

		return this;

	},

	equals: function ( matrix ) {

		var te = this.elements;
		var me = matrix.elements;

		for ( var i = 0; i < 16; i ++ ) {

			if ( te[ i ] !== me[ i ] ) return false;

		}

		return true;

	},

	fromArray: function ( array, offset ) {

		if ( offset === undefined ) offset = 0;

		for ( var i = 0; i < 16; i ++ ) {

			this.elements[ i ] = array[ i + offset ];

		}

		return this;

	},

	toArray: function ( array, offset ) {

		if ( array === undefined ) array = [];
		if ( offset === undefined ) offset = 0;

		var te = this.elements;

		array[ offset ] = te[ 0 ];
		array[ offset + 1 ] = te[ 1 ];
		array[ offset + 2 ] = te[ 2 ];
		array[ offset + 3 ] = te[ 3 ];

		array[ offset + 4 ] = te[ 4 ];
		array[ offset + 5 ] = te[ 5 ];
		array[ offset + 6 ] = te[ 6 ];
		array[ offset + 7 ] = te[ 7 ];

		array[ offset + 8 ] = te[ 8 ];
		array[ offset + 9 ] = te[ 9 ];
		array[ offset + 10 ] = te[ 10 ];
		array[ offset + 11 ] = te[ 11 ];

		array[ offset + 12 ] = te[ 12 ];
		array[ offset + 13 ] = te[ 13 ];
		array[ offset + 14 ] = te[ 14 ];
		array[ offset + 15 ] = te[ 15 ];

		return array;

	}

} );





/***/ }),

/***/ "./node_modules/three/src/math/Quaternion.js":
/*!***************************************************!*\
  !*** ./node_modules/three/src/math/Quaternion.js ***!
  \***************************************************/
/*! exports provided: Quaternion */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Quaternion", function() { return Quaternion; });
/* harmony import */ var _Math_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Math.js */ "./node_modules/three/src/math/Math.js");
/**
 * @author mikael emtinger / http://gomo.se/
 * @author alteredq / http://alteredqualia.com/
 * @author WestLangley / http://github.com/WestLangley
 * @author bhouston / http://clara.io
 */



function Quaternion( x, y, z, w ) {

	this._x = x || 0;
	this._y = y || 0;
	this._z = z || 0;
	this._w = ( w !== undefined ) ? w : 1;

}

Object.assign( Quaternion, {

	slerp: function ( qa, qb, qm, t ) {

		return qm.copy( qa ).slerp( qb, t );

	},

	slerpFlat: function ( dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t ) {

		// fuzz-free, array-based Quaternion SLERP operation

		var x0 = src0[ srcOffset0 + 0 ],
			y0 = src0[ srcOffset0 + 1 ],
			z0 = src0[ srcOffset0 + 2 ],
			w0 = src0[ srcOffset0 + 3 ],

			x1 = src1[ srcOffset1 + 0 ],
			y1 = src1[ srcOffset1 + 1 ],
			z1 = src1[ srcOffset1 + 2 ],
			w1 = src1[ srcOffset1 + 3 ];

		if ( w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1 ) {

			var s = 1 - t,

				cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,

				dir = ( cos >= 0 ? 1 : - 1 ),
				sqrSin = 1 - cos * cos;

			// Skip the Slerp for tiny steps to avoid numeric problems:
			if ( sqrSin > Number.EPSILON ) {

				var sin = Math.sqrt( sqrSin ),
					len = Math.atan2( sin, cos * dir );

				s = Math.sin( s * len ) / sin;
				t = Math.sin( t * len ) / sin;

			}

			var tDir = t * dir;

			x0 = x0 * s + x1 * tDir;
			y0 = y0 * s + y1 * tDir;
			z0 = z0 * s + z1 * tDir;
			w0 = w0 * s + w1 * tDir;

			// Normalize in case we just did a lerp:
			if ( s === 1 - t ) {

				var f = 1 / Math.sqrt( x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0 );

				x0 *= f;
				y0 *= f;
				z0 *= f;
				w0 *= f;

			}

		}

		dst[ dstOffset ] = x0;
		dst[ dstOffset + 1 ] = y0;
		dst[ dstOffset + 2 ] = z0;
		dst[ dstOffset + 3 ] = w0;

	}

} );

Object.defineProperties( Quaternion.prototype, {

	x: {

		get: function () {

			return this._x;

		},

		set: function ( value ) {

			this._x = value;
			this._onChangeCallback();

		}

	},

	y: {

		get: function () {

			return this._y;

		},

		set: function ( value ) {

			this._y = value;
			this._onChangeCallback();

		}

	},

	z: {

		get: function () {

			return this._z;

		},

		set: function ( value ) {

			this._z = value;
			this._onChangeCallback();

		}

	},

	w: {

		get: function () {

			return this._w;

		},

		set: function ( value ) {

			this._w = value;
			this._onChangeCallback();

		}

	}

} );

Object.assign( Quaternion.prototype, {

	isQuaternion: true,

	set: function ( x, y, z, w ) {

		this._x = x;
		this._y = y;
		this._z = z;
		this._w = w;

		this._onChangeCallback();

		return this;

	},

	clone: function () {

		return new this.constructor( this._x, this._y, this._z, this._w );

	},

	copy: function ( quaternion ) {

		this._x = quaternion.x;
		this._y = quaternion.y;
		this._z = quaternion.z;
		this._w = quaternion.w;

		this._onChangeCallback();

		return this;

	},

	setFromEuler: function ( euler, update ) {

		if ( ! ( euler && euler.isEuler ) ) {

			throw new Error( 'THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.' );

		}

		var x = euler._x, y = euler._y, z = euler._z, order = euler.order;

		// http://www.mathworks.com/matlabcentral/fileexchange/
		// 	20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/
		//	content/SpinCalc.m

		var cos = Math.cos;
		var sin = Math.sin;

		var c1 = cos( x / 2 );
		var c2 = cos( y / 2 );
		var c3 = cos( z / 2 );

		var s1 = sin( x / 2 );
		var s2 = sin( y / 2 );
		var s3 = sin( z / 2 );

		if ( order === 'XYZ' ) {

			this._x = s1 * c2 * c3 + c1 * s2 * s3;
			this._y = c1 * s2 * c3 - s1 * c2 * s3;
			this._z = c1 * c2 * s3 + s1 * s2 * c3;
			this._w = c1 * c2 * c3 - s1 * s2 * s3;

		} else if ( order === 'YXZ' ) {

			this._x = s1 * c2 * c3 + c1 * s2 * s3;
			this._y = c1 * s2 * c3 - s1 * c2 * s3;
			this._z = c1 * c2 * s3 - s1 * s2 * c3;
			this._w = c1 * c2 * c3 + s1 * s2 * s3;

		} else if ( order === 'ZXY' ) {

			this._x = s1 * c2 * c3 - c1 * s2 * s3;
			this._y = c1 * s2 * c3 + s1 * c2 * s3;
			this._z = c1 * c2 * s3 + s1 * s2 * c3;
			this._w = c1 * c2 * c3 - s1 * s2 * s3;

		} else if ( order === 'ZYX' ) {

			this._x = s1 * c2 * c3 - c1 * s2 * s3;
			this._y = c1 * s2 * c3 + s1 * c2 * s3;
			this._z = c1 * c2 * s3 - s1 * s2 * c3;
			this._w = c1 * c2 * c3 + s1 * s2 * s3;

		} else if ( order === 'YZX' ) {

			this._x = s1 * c2 * c3 + c1 * s2 * s3;
			this._y = c1 * s2 * c3 + s1 * c2 * s3;
			this._z = c1 * c2 * s3 - s1 * s2 * c3;
			this._w = c1 * c2 * c3 - s1 * s2 * s3;

		} else if ( order === 'XZY' ) {

			this._x = s1 * c2 * c3 - c1 * s2 * s3;
			this._y = c1 * s2 * c3 - s1 * c2 * s3;
			this._z = c1 * c2 * s3 + s1 * s2 * c3;
			this._w = c1 * c2 * c3 + s1 * s2 * s3;

		}

		if ( update !== false ) this._onChangeCallback();

		return this;

	},

	setFromAxisAngle: function ( axis, angle ) {

		// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm

		// assumes axis is normalized

		var halfAngle = angle / 2, s = Math.sin( halfAngle );

		this._x = axis.x * s;
		this._y = axis.y * s;
		this._z = axis.z * s;
		this._w = Math.cos( halfAngle );

		this._onChangeCallback();

		return this;

	},

	setFromRotationMatrix: function ( m ) {

		// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm

		// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

		var te = m.elements,

			m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],
			m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],
			m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ],

			trace = m11 + m22 + m33,
			s;

		if ( trace > 0 ) {

			s = 0.5 / Math.sqrt( trace + 1.0 );

			this._w = 0.25 / s;
			this._x = ( m32 - m23 ) * s;
			this._y = ( m13 - m31 ) * s;
			this._z = ( m21 - m12 ) * s;

		} else if ( m11 > m22 && m11 > m33 ) {

			s = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );

			this._w = ( m32 - m23 ) / s;
			this._x = 0.25 * s;
			this._y = ( m12 + m21 ) / s;
			this._z = ( m13 + m31 ) / s;

		} else if ( m22 > m33 ) {

			s = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );

			this._w = ( m13 - m31 ) / s;
			this._x = ( m12 + m21 ) / s;
			this._y = 0.25 * s;
			this._z = ( m23 + m32 ) / s;

		} else {

			s = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );

			this._w = ( m21 - m12 ) / s;
			this._x = ( m13 + m31 ) / s;
			this._y = ( m23 + m32 ) / s;
			this._z = 0.25 * s;

		}

		this._onChangeCallback();

		return this;

	},

	setFromUnitVectors: function ( vFrom, vTo ) {

		// assumes direction vectors vFrom and vTo are normalized

		var EPS = 0.000001;

		var r = vFrom.dot( vTo ) + 1;

		if ( r < EPS ) {

			r = 0;

			if ( Math.abs( vFrom.x ) > Math.abs( vFrom.z ) ) {

				this._x = - vFrom.y;
				this._y = vFrom.x;
				this._z = 0;
				this._w = r;

			} else {

				this._x = 0;
				this._y = - vFrom.z;
				this._z = vFrom.y;
				this._w = r;

			}

		} else {

			// crossVectors( vFrom, vTo ); // inlined to avoid cyclic dependency on Vector3

			this._x = vFrom.y * vTo.z - vFrom.z * vTo.y;
			this._y = vFrom.z * vTo.x - vFrom.x * vTo.z;
			this._z = vFrom.x * vTo.y - vFrom.y * vTo.x;
			this._w = r;

		}

		return this.normalize();

	},

	angleTo: function ( q ) {

		return 2 * Math.acos( Math.abs( _Math_js__WEBPACK_IMPORTED_MODULE_0__["_Math"].clamp( this.dot( q ), - 1, 1 ) ) );

	},

	rotateTowards: function ( q, step ) {

		var angle = this.angleTo( q );

		if ( angle === 0 ) return this;

		var t = Math.min( 1, step / angle );

		this.slerp( q, t );

		return this;

	},

	inverse: function () {

		// quaternion is assumed to have unit length

		return this.conjugate();

	},

	conjugate: function () {

		this._x *= - 1;
		this._y *= - 1;
		this._z *= - 1;

		this._onChangeCallback();

		return this;

	},

	dot: function ( v ) {

		return this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;

	},

	lengthSq: function () {

		return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;

	},

	length: function () {

		return Math.sqrt( this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w );

	},

	normalize: function () {

		var l = this.length();

		if ( l === 0 ) {

			this._x = 0;
			this._y = 0;
			this._z = 0;
			this._w = 1;

		} else {

			l = 1 / l;

			this._x = this._x * l;
			this._y = this._y * l;
			this._z = this._z * l;
			this._w = this._w * l;

		}

		this._onChangeCallback();

		return this;

	},

	multiply: function ( q, p ) {

		if ( p !== undefined ) {

			console.warn( 'THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.' );
			return this.multiplyQuaternions( q, p );

		}

		return this.multiplyQuaternions( this, q );

	},

	premultiply: function ( q ) {

		return this.multiplyQuaternions( q, this );

	},

	multiplyQuaternions: function ( a, b ) {

		// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm

		var qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;
		var qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;

		this._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;
		this._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;
		this._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;
		this._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;

		this._onChangeCallback();

		return this;

	},

	slerp: function ( qb, t ) {

		if ( t === 0 ) return this;
		if ( t === 1 ) return this.copy( qb );

		var x = this._x, y = this._y, z = this._z, w = this._w;

		// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/

		var cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;

		if ( cosHalfTheta < 0 ) {

			this._w = - qb._w;
			this._x = - qb._x;
			this._y = - qb._y;
			this._z = - qb._z;

			cosHalfTheta = - cosHalfTheta;

		} else {

			this.copy( qb );

		}

		if ( cosHalfTheta >= 1.0 ) {

			this._w = w;
			this._x = x;
			this._y = y;
			this._z = z;

			return this;

		}

		var sqrSinHalfTheta = 1.0 - cosHalfTheta * cosHalfTheta;

		if ( sqrSinHalfTheta <= Number.EPSILON ) {

			var s = 1 - t;
			this._w = s * w + t * this._w;
			this._x = s * x + t * this._x;
			this._y = s * y + t * this._y;
			this._z = s * z + t * this._z;

			this.normalize();
			this._onChangeCallback();

			return this;

		}

		var sinHalfTheta = Math.sqrt( sqrSinHalfTheta );
		var halfTheta = Math.atan2( sinHalfTheta, cosHalfTheta );
		var ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,
			ratioB = Math.sin( t * halfTheta ) / sinHalfTheta;

		this._w = ( w * ratioA + this._w * ratioB );
		this._x = ( x * ratioA + this._x * ratioB );
		this._y = ( y * ratioA + this._y * ratioB );
		this._z = ( z * ratioA + this._z * ratioB );

		this._onChangeCallback();

		return this;

	},

	equals: function ( quaternion ) {

		return ( quaternion._x === this._x ) && ( quaternion._y === this._y ) && ( quaternion._z === this._z ) && ( quaternion._w === this._w );

	},

	fromArray: function ( array, offset ) {

		if ( offset === undefined ) offset = 0;

		this._x = array[ offset ];
		this._y = array[ offset + 1 ];
		this._z = array[ offset + 2 ];
		this._w = array[ offset + 3 ];

		this._onChangeCallback();

		return this;

	},

	toArray: function ( array, offset ) {

		if ( array === undefined ) array = [];
		if ( offset === undefined ) offset = 0;

		array[ offset ] = this._x;
		array[ offset + 1 ] = this._y;
		array[ offset + 2 ] = this._z;
		array[ offset + 3 ] = this._w;

		return array;

	},

	_onChange: function ( callback ) {

		this._onChangeCallback = callback;

		return this;

	},

	_onChangeCallback: function () {}

} );





/***/ }),

/***/ "./node_modules/three/src/math/Vector3.js":
/*!************************************************!*\
  !*** ./node_modules/three/src/math/Vector3.js ***!
  \************************************************/
/*! exports provided: Vector3 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Vector3", function() { return Vector3; });
/* harmony import */ var _Math_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Math.js */ "./node_modules/three/src/math/Math.js");
/* harmony import */ var _Quaternion_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Quaternion.js */ "./node_modules/three/src/math/Quaternion.js");



/**
 * @author mrdoob / http://mrdoob.com/
 * @author kile / http://kile.stravaganza.org/
 * @author philogb / http://blog.thejit.org/
 * @author mikael emtinger / http://gomo.se/
 * @author egraether / http://egraether.com/
 * @author WestLangley / http://github.com/WestLangley
 */

var _vector = new Vector3();
var _quaternion = new _Quaternion_js__WEBPACK_IMPORTED_MODULE_1__["Quaternion"]();

function Vector3( x, y, z ) {

	this.x = x || 0;
	this.y = y || 0;
	this.z = z || 0;

}

Object.assign( Vector3.prototype, {

	isVector3: true,

	set: function ( x, y, z ) {

		this.x = x;
		this.y = y;
		this.z = z;

		return this;

	},

	setScalar: function ( scalar ) {

		this.x = scalar;
		this.y = scalar;
		this.z = scalar;

		return this;

	},

	setX: function ( x ) {

		this.x = x;

		return this;

	},

	setY: function ( y ) {

		this.y = y;

		return this;

	},

	setZ: function ( z ) {

		this.z = z;

		return this;

	},

	setComponent: function ( index, value ) {

		switch ( index ) {

			case 0: this.x = value; break;
			case 1: this.y = value; break;
			case 2: this.z = value; break;
			default: throw new Error( 'index is out of range: ' + index );

		}

		return this;

	},

	getComponent: function ( index ) {

		switch ( index ) {

			case 0: return this.x;
			case 1: return this.y;
			case 2: return this.z;
			default: throw new Error( 'index is out of range: ' + index );

		}

	},

	clone: function () {

		return new this.constructor( this.x, this.y, this.z );

	},

	copy: function ( v ) {

		this.x = v.x;
		this.y = v.y;
		this.z = v.z;

		return this;

	},

	add: function ( v, w ) {

		if ( w !== undefined ) {

			console.warn( 'THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );
			return this.addVectors( v, w );

		}

		this.x += v.x;
		this.y += v.y;
		this.z += v.z;

		return this;

	},

	addScalar: function ( s ) {

		this.x += s;
		this.y += s;
		this.z += s;

		return this;

	},

	addVectors: function ( a, b ) {

		this.x = a.x + b.x;
		this.y = a.y + b.y;
		this.z = a.z + b.z;

		return this;

	},

	addScaledVector: function ( v, s ) {

		this.x += v.x * s;
		this.y += v.y * s;
		this.z += v.z * s;

		return this;

	},

	sub: function ( v, w ) {

		if ( w !== undefined ) {

			console.warn( 'THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );
			return this.subVectors( v, w );

		}

		this.x -= v.x;
		this.y -= v.y;
		this.z -= v.z;

		return this;

	},

	subScalar: function ( s ) {

		this.x -= s;
		this.y -= s;
		this.z -= s;

		return this;

	},

	subVectors: function ( a, b ) {

		this.x = a.x - b.x;
		this.y = a.y - b.y;
		this.z = a.z - b.z;

		return this;

	},

	multiply: function ( v, w ) {

		if ( w !== undefined ) {

			console.warn( 'THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.' );
			return this.multiplyVectors( v, w );

		}

		this.x *= v.x;
		this.y *= v.y;
		this.z *= v.z;

		return this;

	},

	multiplyScalar: function ( scalar ) {

		this.x *= scalar;
		this.y *= scalar;
		this.z *= scalar;

		return this;

	},

	multiplyVectors: function ( a, b ) {

		this.x = a.x * b.x;
		this.y = a.y * b.y;
		this.z = a.z * b.z;

		return this;

	},

	applyEuler: function ( euler ) {

		if ( ! ( euler && euler.isEuler ) ) {

			console.error( 'THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.' );

		}

		return this.applyQuaternion( _quaternion.setFromEuler( euler ) );

	},

	applyAxisAngle: function ( axis, angle ) {

		return this.applyQuaternion( _quaternion.setFromAxisAngle( axis, angle ) );

	},

	applyMatrix3: function ( m ) {

		var x = this.x, y = this.y, z = this.z;
		var e = m.elements;

		this.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ] * z;
		this.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ] * z;
		this.z = e[ 2 ] * x + e[ 5 ] * y + e[ 8 ] * z;

		return this;

	},

	applyNormalMatrix: function ( m ) {

		return this.applyMatrix3( m ).normalize();

	},

	applyMatrix4: function ( m ) {

		var x = this.x, y = this.y, z = this.z;
		var e = m.elements;

		var w = 1 / ( e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] );

		this.x = ( e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] ) * w;
		this.y = ( e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] ) * w;
		this.z = ( e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] ) * w;

		return this;

	},

	applyQuaternion: function ( q ) {

		var x = this.x, y = this.y, z = this.z;
		var qx = q.x, qy = q.y, qz = q.z, qw = q.w;

		// calculate quat * vector

		var ix = qw * x + qy * z - qz * y;
		var iy = qw * y + qz * x - qx * z;
		var iz = qw * z + qx * y - qy * x;
		var iw = - qx * x - qy * y - qz * z;

		// calculate result * inverse quat

		this.x = ix * qw + iw * - qx + iy * - qz - iz * - qy;
		this.y = iy * qw + iw * - qy + iz * - qx - ix * - qz;
		this.z = iz * qw + iw * - qz + ix * - qy - iy * - qx;

		return this;

	},

	project: function ( camera ) {

		return this.applyMatrix4( camera.matrixWorldInverse ).applyMatrix4( camera.projectionMatrix );

	},

	unproject: function ( camera ) {

		return this.applyMatrix4( camera.projectionMatrixInverse ).applyMatrix4( camera.matrixWorld );

	},

	transformDirection: function ( m ) {

		// input: THREE.Matrix4 affine matrix
		// vector interpreted as a direction

		var x = this.x, y = this.y, z = this.z;
		var e = m.elements;

		this.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z;
		this.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z;
		this.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z;

		return this.normalize();

	},

	divide: function ( v ) {

		this.x /= v.x;
		this.y /= v.y;
		this.z /= v.z;

		return this;

	},

	divideScalar: function ( scalar ) {

		return this.multiplyScalar( 1 / scalar );

	},

	min: function ( v ) {

		this.x = Math.min( this.x, v.x );
		this.y = Math.min( this.y, v.y );
		this.z = Math.min( this.z, v.z );

		return this;

	},

	max: function ( v ) {

		this.x = Math.max( this.x, v.x );
		this.y = Math.max( this.y, v.y );
		this.z = Math.max( this.z, v.z );

		return this;

	},

	clamp: function ( min, max ) {

		// assumes min < max, componentwise

		this.x = Math.max( min.x, Math.min( max.x, this.x ) );
		this.y = Math.max( min.y, Math.min( max.y, this.y ) );
		this.z = Math.max( min.z, Math.min( max.z, this.z ) );

		return this;

	},

	clampScalar: function ( minVal, maxVal ) {

		this.x = Math.max( minVal, Math.min( maxVal, this.x ) );
		this.y = Math.max( minVal, Math.min( maxVal, this.y ) );
		this.z = Math.max( minVal, Math.min( maxVal, this.z ) );

		return this;

	},

	clampLength: function ( min, max ) {

		var length = this.length();

		return this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );

	},

	floor: function () {

		this.x = Math.floor( this.x );
		this.y = Math.floor( this.y );
		this.z = Math.floor( this.z );

		return this;

	},

	ceil: function () {

		this.x = Math.ceil( this.x );
		this.y = Math.ceil( this.y );
		this.z = Math.ceil( this.z );

		return this;

	},

	round: function () {

		this.x = Math.round( this.x );
		this.y = Math.round( this.y );
		this.z = Math.round( this.z );

		return this;

	},

	roundToZero: function () {

		this.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );
		this.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );
		this.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );

		return this;

	},

	negate: function () {

		this.x = - this.x;
		this.y = - this.y;
		this.z = - this.z;

		return this;

	},

	dot: function ( v ) {

		return this.x * v.x + this.y * v.y + this.z * v.z;

	},

	// TODO lengthSquared?

	lengthSq: function () {

		return this.x * this.x + this.y * this.y + this.z * this.z;

	},

	length: function () {

		return Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );

	},

	manhattanLength: function () {

		return Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z );

	},

	normalize: function () {

		return this.divideScalar( this.length() || 1 );

	},

	setLength: function ( length ) {

		return this.normalize().multiplyScalar( length );

	},

	lerp: function ( v, alpha ) {

		this.x += ( v.x - this.x ) * alpha;
		this.y += ( v.y - this.y ) * alpha;
		this.z += ( v.z - this.z ) * alpha;

		return this;

	},

	lerpVectors: function ( v1, v2, alpha ) {

		return this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );

	},

	cross: function ( v, w ) {

		if ( w !== undefined ) {

			console.warn( 'THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.' );
			return this.crossVectors( v, w );

		}

		return this.crossVectors( this, v );

	},

	crossVectors: function ( a, b ) {

		var ax = a.x, ay = a.y, az = a.z;
		var bx = b.x, by = b.y, bz = b.z;

		this.x = ay * bz - az * by;
		this.y = az * bx - ax * bz;
		this.z = ax * by - ay * bx;

		return this;

	},

	projectOnVector: function ( v ) {

		// v cannot be the zero v

		var scalar = v.dot( this ) / v.lengthSq();

		return this.copy( v ).multiplyScalar( scalar );

	},

	projectOnPlane: function ( planeNormal ) {

		_vector.copy( this ).projectOnVector( planeNormal );

		return this.sub( _vector );

	},

	reflect: function ( normal ) {

		// reflect incident vector off plane orthogonal to normal
		// normal is assumed to have unit length

		return this.sub( _vector.copy( normal ).multiplyScalar( 2 * this.dot( normal ) ) );

	},

	angleTo: function ( v ) {

		var denominator = Math.sqrt( this.lengthSq() * v.lengthSq() );

		if ( denominator === 0 ) console.error( 'THREE.Vector3: angleTo() can\'t handle zero length vectors.' );

		var theta = this.dot( v ) / denominator;

		// clamp, to handle numerical problems

		return Math.acos( _Math_js__WEBPACK_IMPORTED_MODULE_0__["_Math"].clamp( theta, - 1, 1 ) );

	},

	distanceTo: function ( v ) {

		return Math.sqrt( this.distanceToSquared( v ) );

	},

	distanceToSquared: function ( v ) {

		var dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;

		return dx * dx + dy * dy + dz * dz;

	},

	manhattanDistanceTo: function ( v ) {

		return Math.abs( this.x - v.x ) + Math.abs( this.y - v.y ) + Math.abs( this.z - v.z );

	},

	setFromSpherical: function ( s ) {

		return this.setFromSphericalCoords( s.radius, s.phi, s.theta );

	},

	setFromSphericalCoords: function ( radius, phi, theta ) {

		var sinPhiRadius = Math.sin( phi ) * radius;

		this.x = sinPhiRadius * Math.sin( theta );
		this.y = Math.cos( phi ) * radius;
		this.z = sinPhiRadius * Math.cos( theta );

		return this;

	},

	setFromCylindrical: function ( c ) {

		return this.setFromCylindricalCoords( c.radius, c.theta, c.y );

	},

	setFromCylindricalCoords: function ( radius, theta, y ) {

		this.x = radius * Math.sin( theta );
		this.y = y;
		this.z = radius * Math.cos( theta );

		return this;

	},

	setFromMatrixPosition: function ( m ) {

		var e = m.elements;

		this.x = e[ 12 ];
		this.y = e[ 13 ];
		this.z = e[ 14 ];

		return this;

	},

	setFromMatrixScale: function ( m ) {

		var sx = this.setFromMatrixColumn( m, 0 ).length();
		var sy = this.setFromMatrixColumn( m, 1 ).length();
		var sz = this.setFromMatrixColumn( m, 2 ).length();

		this.x = sx;
		this.y = sy;
		this.z = sz;

		return this;

	},

	setFromMatrixColumn: function ( m, index ) {

		return this.fromArray( m.elements, index * 4 );

	},

	equals: function ( v ) {

		return ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) );

	},

	fromArray: function ( array, offset ) {

		if ( offset === undefined ) offset = 0;

		this.x = array[ offset ];
		this.y = array[ offset + 1 ];
		this.z = array[ offset + 2 ];

		return this;

	},

	toArray: function ( array, offset ) {

		if ( array === undefined ) array = [];
		if ( offset === undefined ) offset = 0;

		array[ offset ] = this.x;
		array[ offset + 1 ] = this.y;
		array[ offset + 2 ] = this.z;

		return array;

	},

	fromBufferAttribute: function ( attribute, index, offset ) {

		if ( offset !== undefined ) {

			console.warn( 'THREE.Vector3: offset has been removed from .fromBufferAttribute().' );

		}

		this.x = attribute.getX( index );
		this.y = attribute.getY( index );
		this.z = attribute.getZ( index );

		return this;

	}

} );





/***/ }),

/***/ "./node_modules/webpack/buildin/module.js":
/*!***********************************!*\
  !*** (webpack)/buildin/module.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function(module) {
	if (!module.webpackPolyfill) {
		module.deprecate = function() {};
		module.paths = [];
		// module.parent = undefined by default
		if (!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ }),

/***/ "./node_modules/ws/index.js":
/*!**********************************!*\
  !*** ./node_modules/ws/index.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const WebSocket = __webpack_require__(/*! ./lib/websocket */ "./node_modules/ws/lib/websocket.js");

WebSocket.createWebSocketStream = __webpack_require__(/*! ./lib/stream */ "./node_modules/ws/lib/stream.js");
WebSocket.Server = __webpack_require__(/*! ./lib/websocket-server */ "./node_modules/ws/lib/websocket-server.js");
WebSocket.Receiver = __webpack_require__(/*! ./lib/receiver */ "./node_modules/ws/lib/receiver.js");
WebSocket.Sender = __webpack_require__(/*! ./lib/sender */ "./node_modules/ws/lib/sender.js");

module.exports = WebSocket;


/***/ }),

/***/ "./node_modules/ws/lib/buffer-util.js":
/*!********************************************!*\
  !*** ./node_modules/ws/lib/buffer-util.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const { EMPTY_BUFFER } = __webpack_require__(/*! ./constants */ "./node_modules/ws/lib/constants.js");

/**
 * Merges an array of buffers into a new buffer.
 *
 * @param {Buffer[]} list The array of buffers to concat
 * @param {Number} totalLength The total length of buffers in the list
 * @return {Buffer} The resulting buffer
 * @public
 */
function concat(list, totalLength) {
  if (list.length === 0) return EMPTY_BUFFER;
  if (list.length === 1) return list[0];

  const target = Buffer.allocUnsafe(totalLength);
  let offset = 0;

  for (let i = 0; i < list.length; i++) {
    const buf = list[i];
    target.set(buf, offset);
    offset += buf.length;
  }

  if (offset < totalLength) return target.slice(0, offset);

  return target;
}

/**
 * Masks a buffer using the given mask.
 *
 * @param {Buffer} source The buffer to mask
 * @param {Buffer} mask The mask to use
 * @param {Buffer} output The buffer where to store the result
 * @param {Number} offset The offset at which to start writing
 * @param {Number} length The number of bytes to mask.
 * @public
 */
function _mask(source, mask, output, offset, length) {
  for (let i = 0; i < length; i++) {
    output[offset + i] = source[i] ^ mask[i & 3];
  }
}

/**
 * Unmasks a buffer using the given mask.
 *
 * @param {Buffer} buffer The buffer to unmask
 * @param {Buffer} mask The mask to use
 * @public
 */
function _unmask(buffer, mask) {
  // Required until https://github.com/nodejs/node/issues/9006 is resolved.
  const length = buffer.length;
  for (let i = 0; i < length; i++) {
    buffer[i] ^= mask[i & 3];
  }
}

/**
 * Converts a buffer to an `ArrayBuffer`.
 *
 * @param {Buffer} buf The buffer to convert
 * @return {ArrayBuffer} Converted buffer
 * @public
 */
function toArrayBuffer(buf) {
  if (buf.byteLength === buf.buffer.byteLength) {
    return buf.buffer;
  }

  return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);
}

/**
 * Converts `data` to a `Buffer`.
 *
 * @param {*} data The data to convert
 * @return {Buffer} The buffer
 * @throws {TypeError}
 * @public
 */
function toBuffer(data) {
  toBuffer.readOnly = true;

  if (Buffer.isBuffer(data)) return data;

  let buf;

  if (data instanceof ArrayBuffer) {
    buf = Buffer.from(data);
  } else if (ArrayBuffer.isView(data)) {
    buf = Buffer.from(data.buffer, data.byteOffset, data.byteLength);
  } else {
    buf = Buffer.from(data);
    toBuffer.readOnly = false;
  }

  return buf;
}

try {
  const bufferUtil = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module 'bufferutil'"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
  const bu = bufferUtil.BufferUtil || bufferUtil;

  module.exports = {
    concat,
    mask(source, mask, output, offset, length) {
      if (length < 48) _mask(source, mask, output, offset, length);
      else bu.mask(source, mask, output, offset, length);
    },
    toArrayBuffer,
    toBuffer,
    unmask(buffer, mask) {
      if (buffer.length < 32) _unmask(buffer, mask);
      else bu.unmask(buffer, mask);
    }
  };
} catch (e) /* istanbul ignore next */ {
  module.exports = {
    concat,
    mask: _mask,
    toArrayBuffer,
    toBuffer,
    unmask: _unmask
  };
}


/***/ }),

/***/ "./node_modules/ws/lib/constants.js":
/*!******************************************!*\
  !*** ./node_modules/ws/lib/constants.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = {
  BINARY_TYPES: ['nodebuffer', 'arraybuffer', 'fragments'],
  GUID: '258EAFA5-E914-47DA-95CA-C5AB0DC85B11',
  kStatusCode: Symbol('status-code'),
  kWebSocket: Symbol('websocket'),
  EMPTY_BUFFER: Buffer.alloc(0),
  NOOP: () => {}
};


/***/ }),

/***/ "./node_modules/ws/lib/event-target.js":
/*!*********************************************!*\
  !*** ./node_modules/ws/lib/event-target.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Class representing an event.
 *
 * @private
 */
class Event {
  /**
   * Create a new `Event`.
   *
   * @param {String} type The name of the event
   * @param {Object} target A reference to the target to which the event was dispatched
   */
  constructor(type, target) {
    this.target = target;
    this.type = type;
  }
}

/**
 * Class representing a message event.
 *
 * @extends Event
 * @private
 */
class MessageEvent extends Event {
  /**
   * Create a new `MessageEvent`.
   *
   * @param {(String|Buffer|ArrayBuffer|Buffer[])} data The received data
   * @param {WebSocket} target A reference to the target to which the event was dispatched
   */
  constructor(data, target) {
    super('message', target);

    this.data = data;
  }
}

/**
 * Class representing a close event.
 *
 * @extends Event
 * @private
 */
class CloseEvent extends Event {
  /**
   * Create a new `CloseEvent`.
   *
   * @param {Number} code The status code explaining why the connection is being closed
   * @param {String} reason A human-readable string explaining why the connection is closing
   * @param {WebSocket} target A reference to the target to which the event was dispatched
   */
  constructor(code, reason, target) {
    super('close', target);

    this.wasClean = target._closeFrameReceived && target._closeFrameSent;
    this.reason = reason;
    this.code = code;
  }
}

/**
 * Class representing an open event.
 *
 * @extends Event
 * @private
 */
class OpenEvent extends Event {
  /**
   * Create a new `OpenEvent`.
   *
   * @param {WebSocket} target A reference to the target to which the event was dispatched
   */
  constructor(target) {
    super('open', target);
  }
}

/**
 * Class representing an error event.
 *
 * @extends Event
 * @private
 */
class ErrorEvent extends Event {
  /**
   * Create a new `ErrorEvent`.
   *
   * @param {Object} error The error that generated this event
   * @param {WebSocket} target A reference to the target to which the event was dispatched
   */
  constructor(error, target) {
    super('error', target);

    this.message = error.message;
    this.error = error;
  }
}

/**
 * This provides methods for emulating the `EventTarget` interface. It's not
 * meant to be used directly.
 *
 * @mixin
 */
const EventTarget = {
  /**
   * Register an event listener.
   *
   * @param {String} type A string representing the event type to listen for
   * @param {Function} listener The listener to add
   * @param {Object} options An options object specifies characteristics about
   *     the event listener
   * @param {Boolean} options.once A `Boolean`` indicating that the listener
   *     should be invoked at most once after being added. If `true`, the
   *     listener would be automatically removed when invoked.
   * @public
   */
  addEventListener(type, listener, options) {
    if (typeof listener !== 'function') return;

    function onMessage(data) {
      listener.call(this, new MessageEvent(data, this));
    }

    function onClose(code, message) {
      listener.call(this, new CloseEvent(code, message, this));
    }

    function onError(error) {
      listener.call(this, new ErrorEvent(error, this));
    }

    function onOpen() {
      listener.call(this, new OpenEvent(this));
    }

    const method = options && options.once ? 'once' : 'on';

    if (type === 'message') {
      onMessage._listener = listener;
      this[method](type, onMessage);
    } else if (type === 'close') {
      onClose._listener = listener;
      this[method](type, onClose);
    } else if (type === 'error') {
      onError._listener = listener;
      this[method](type, onError);
    } else if (type === 'open') {
      onOpen._listener = listener;
      this[method](type, onOpen);
    } else {
      this[method](type, listener);
    }
  },

  /**
   * Remove an event listener.
   *
   * @param {String} type A string representing the event type to remove
   * @param {Function} listener The listener to remove
   * @public
   */
  removeEventListener(type, listener) {
    const listeners = this.listeners(type);

    for (let i = 0; i < listeners.length; i++) {
      if (listeners[i] === listener || listeners[i]._listener === listener) {
        this.removeListener(type, listeners[i]);
      }
    }
  }
};

module.exports = EventTarget;


/***/ }),

/***/ "./node_modules/ws/lib/extension.js":
/*!******************************************!*\
  !*** ./node_modules/ws/lib/extension.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


//
// Allowed token characters:
//
// '!', '#', '$', '%', '&', ''', '*', '+', '-',
// '.', 0-9, A-Z, '^', '_', '`', a-z, '|', '~'
//
// tokenChars[32] === 0 // ' '
// tokenChars[33] === 1 // '!'
// tokenChars[34] === 0 // '"'
// ...
//
// prettier-ignore
const tokenChars = [
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 0 - 15
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 16 - 31
  0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, // 32 - 47
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, // 48 - 63
  0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 64 - 79
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, // 80 - 95
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 96 - 111
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0 // 112 - 127
];

/**
 * Adds an offer to the map of extension offers or a parameter to the map of
 * parameters.
 *
 * @param {Object} dest The map of extension offers or parameters
 * @param {String} name The extension or parameter name
 * @param {(Object|Boolean|String)} elem The extension parameters or the
 *     parameter value
 * @private
 */
function push(dest, name, elem) {
  if (dest[name] === undefined) dest[name] = [elem];
  else dest[name].push(elem);
}

/**
 * Parses the `Sec-WebSocket-Extensions` header into an object.
 *
 * @param {String} header The field value of the header
 * @return {Object} The parsed object
 * @public
 */
function parse(header) {
  const offers = Object.create(null);

  if (header === undefined || header === '') return offers;

  let params = Object.create(null);
  let mustUnescape = false;
  let isEscaping = false;
  let inQuotes = false;
  let extensionName;
  let paramName;
  let start = -1;
  let end = -1;
  let i = 0;

  for (; i < header.length; i++) {
    const code = header.charCodeAt(i);

    if (extensionName === undefined) {
      if (end === -1 && tokenChars[code] === 1) {
        if (start === -1) start = i;
      } else if (code === 0x20 /* ' ' */ || code === 0x09 /* '\t' */) {
        if (end === -1 && start !== -1) end = i;
      } else if (code === 0x3b /* ';' */ || code === 0x2c /* ',' */) {
        if (start === -1) {
          throw new SyntaxError(`Unexpected character at index ${i}`);
        }

        if (end === -1) end = i;
        const name = header.slice(start, end);
        if (code === 0x2c) {
          push(offers, name, params);
          params = Object.create(null);
        } else {
          extensionName = name;
        }

        start = end = -1;
      } else {
        throw new SyntaxError(`Unexpected character at index ${i}`);
      }
    } else if (paramName === undefined) {
      if (end === -1 && tokenChars[code] === 1) {
        if (start === -1) start = i;
      } else if (code === 0x20 || code === 0x09) {
        if (end === -1 && start !== -1) end = i;
      } else if (code === 0x3b || code === 0x2c) {
        if (start === -1) {
          throw new SyntaxError(`Unexpected character at index ${i}`);
        }

        if (end === -1) end = i;
        push(params, header.slice(start, end), true);
        if (code === 0x2c) {
          push(offers, extensionName, params);
          params = Object.create(null);
          extensionName = undefined;
        }

        start = end = -1;
      } else if (code === 0x3d /* '=' */ && start !== -1 && end === -1) {
        paramName = header.slice(start, i);
        start = end = -1;
      } else {
        throw new SyntaxError(`Unexpected character at index ${i}`);
      }
    } else {
      //
      // The value of a quoted-string after unescaping must conform to the
      // token ABNF, so only token characters are valid.
      // Ref: https://tools.ietf.org/html/rfc6455#section-9.1
      //
      if (isEscaping) {
        if (tokenChars[code] !== 1) {
          throw new SyntaxError(`Unexpected character at index ${i}`);
        }
        if (start === -1) start = i;
        else if (!mustUnescape) mustUnescape = true;
        isEscaping = false;
      } else if (inQuotes) {
        if (tokenChars[code] === 1) {
          if (start === -1) start = i;
        } else if (code === 0x22 /* '"' */ && start !== -1) {
          inQuotes = false;
          end = i;
        } else if (code === 0x5c /* '\' */) {
          isEscaping = true;
        } else {
          throw new SyntaxError(`Unexpected character at index ${i}`);
        }
      } else if (code === 0x22 && header.charCodeAt(i - 1) === 0x3d) {
        inQuotes = true;
      } else if (end === -1 && tokenChars[code] === 1) {
        if (start === -1) start = i;
      } else if (start !== -1 && (code === 0x20 || code === 0x09)) {
        if (end === -1) end = i;
      } else if (code === 0x3b || code === 0x2c) {
        if (start === -1) {
          throw new SyntaxError(`Unexpected character at index ${i}`);
        }

        if (end === -1) end = i;
        let value = header.slice(start, end);
        if (mustUnescape) {
          value = value.replace(/\\/g, '');
          mustUnescape = false;
        }
        push(params, paramName, value);
        if (code === 0x2c) {
          push(offers, extensionName, params);
          params = Object.create(null);
          extensionName = undefined;
        }

        paramName = undefined;
        start = end = -1;
      } else {
        throw new SyntaxError(`Unexpected character at index ${i}`);
      }
    }
  }

  if (start === -1 || inQuotes) {
    throw new SyntaxError('Unexpected end of input');
  }

  if (end === -1) end = i;
  const token = header.slice(start, end);
  if (extensionName === undefined) {
    push(offers, token, params);
  } else {
    if (paramName === undefined) {
      push(params, token, true);
    } else if (mustUnescape) {
      push(params, paramName, token.replace(/\\/g, ''));
    } else {
      push(params, paramName, token);
    }
    push(offers, extensionName, params);
  }

  return offers;
}

/**
 * Builds the `Sec-WebSocket-Extensions` header field value.
 *
 * @param {Object} extensions The map of extensions and parameters to format
 * @return {String} A string representing the given object
 * @public
 */
function format(extensions) {
  return Object.keys(extensions)
    .map((extension) => {
      let configurations = extensions[extension];
      if (!Array.isArray(configurations)) configurations = [configurations];
      return configurations
        .map((params) => {
          return [extension]
            .concat(
              Object.keys(params).map((k) => {
                let values = params[k];
                if (!Array.isArray(values)) values = [values];
                return values
                  .map((v) => (v === true ? k : `${k}=${v}`))
                  .join('; ');
              })
            )
            .join('; ');
        })
        .join(', ');
    })
    .join(', ');
}

module.exports = { format, parse };


/***/ }),

/***/ "./node_modules/ws/lib/limiter.js":
/*!****************************************!*\
  !*** ./node_modules/ws/lib/limiter.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const kDone = Symbol('kDone');
const kRun = Symbol('kRun');

/**
 * A very simple job queue with adjustable concurrency. Adapted from
 * https://github.com/STRML/async-limiter
 */
class Limiter {
  /**
   * Creates a new `Limiter`.
   *
   * @param {Number} concurrency The maximum number of jobs allowed to run
   *     concurrently
   */
  constructor(concurrency) {
    this[kDone] = () => {
      this.pending--;
      this[kRun]();
    };
    this.concurrency = concurrency || Infinity;
    this.jobs = [];
    this.pending = 0;
  }

  /**
   * Adds a job to the queue.
   *
   * @public
   */
  add(job) {
    this.jobs.push(job);
    this[kRun]();
  }

  /**
   * Removes a job from the queue and runs it if possible.
   *
   * @private
   */
  [kRun]() {
    if (this.pending === this.concurrency) return;

    if (this.jobs.length) {
      const job = this.jobs.shift();

      this.pending++;
      job(this[kDone]);
    }
  }
}

module.exports = Limiter;


/***/ }),

/***/ "./node_modules/ws/lib/permessage-deflate.js":
/*!***************************************************!*\
  !*** ./node_modules/ws/lib/permessage-deflate.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const zlib = __webpack_require__(/*! zlib */ "zlib");

const bufferUtil = __webpack_require__(/*! ./buffer-util */ "./node_modules/ws/lib/buffer-util.js");
const Limiter = __webpack_require__(/*! ./limiter */ "./node_modules/ws/lib/limiter.js");
const { kStatusCode, NOOP } = __webpack_require__(/*! ./constants */ "./node_modules/ws/lib/constants.js");

const TRAILER = Buffer.from([0x00, 0x00, 0xff, 0xff]);
const kPerMessageDeflate = Symbol('permessage-deflate');
const kTotalLength = Symbol('total-length');
const kCallback = Symbol('callback');
const kBuffers = Symbol('buffers');
const kError = Symbol('error');

//
// We limit zlib concurrency, which prevents severe memory fragmentation
// as documented in https://github.com/nodejs/node/issues/8871#issuecomment-250915913
// and https://github.com/websockets/ws/issues/1202
//
// Intentionally global; it's the global thread pool that's an issue.
//
let zlibLimiter;

/**
 * permessage-deflate implementation.
 */
class PerMessageDeflate {
  /**
   * Creates a PerMessageDeflate instance.
   *
   * @param {Object} options Configuration options
   * @param {Boolean} options.serverNoContextTakeover Request/accept disabling
   *     of server context takeover
   * @param {Boolean} options.clientNoContextTakeover Advertise/acknowledge
   *     disabling of client context takeover
   * @param {(Boolean|Number)} options.serverMaxWindowBits Request/confirm the
   *     use of a custom server window size
   * @param {(Boolean|Number)} options.clientMaxWindowBits Advertise support
   *     for, or request, a custom client window size
   * @param {Object} options.zlibDeflateOptions Options to pass to zlib on deflate
   * @param {Object} options.zlibInflateOptions Options to pass to zlib on inflate
   * @param {Number} options.threshold Size (in bytes) below which messages
   *     should not be compressed
   * @param {Number} options.concurrencyLimit The number of concurrent calls to
   *     zlib
   * @param {Boolean} isServer Create the instance in either server or client
   *     mode
   * @param {Number} maxPayload The maximum allowed message length
   */
  constructor(options, isServer, maxPayload) {
    this._maxPayload = maxPayload | 0;
    this._options = options || {};
    this._threshold =
      this._options.threshold !== undefined ? this._options.threshold : 1024;
    this._isServer = !!isServer;
    this._deflate = null;
    this._inflate = null;

    this.params = null;

    if (!zlibLimiter) {
      const concurrency =
        this._options.concurrencyLimit !== undefined
          ? this._options.concurrencyLimit
          : 10;
      zlibLimiter = new Limiter(concurrency);
    }
  }

  /**
   * @type {String}
   */
  static get extensionName() {
    return 'permessage-deflate';
  }

  /**
   * Create an extension negotiation offer.
   *
   * @return {Object} Extension parameters
   * @public
   */
  offer() {
    const params = {};

    if (this._options.serverNoContextTakeover) {
      params.server_no_context_takeover = true;
    }
    if (this._options.clientNoContextTakeover) {
      params.client_no_context_takeover = true;
    }
    if (this._options.serverMaxWindowBits) {
      params.server_max_window_bits = this._options.serverMaxWindowBits;
    }
    if (this._options.clientMaxWindowBits) {
      params.client_max_window_bits = this._options.clientMaxWindowBits;
    } else if (this._options.clientMaxWindowBits == null) {
      params.client_max_window_bits = true;
    }

    return params;
  }

  /**
   * Accept an extension negotiation offer/response.
   *
   * @param {Array} configurations The extension negotiation offers/reponse
   * @return {Object} Accepted configuration
   * @public
   */
  accept(configurations) {
    configurations = this.normalizeParams(configurations);

    this.params = this._isServer
      ? this.acceptAsServer(configurations)
      : this.acceptAsClient(configurations);

    return this.params;
  }

  /**
   * Releases all resources used by the extension.
   *
   * @public
   */
  cleanup() {
    if (this._inflate) {
      this._inflate.close();
      this._inflate = null;
    }

    if (this._deflate) {
      const callback = this._deflate[kCallback];

      this._deflate.close();
      this._deflate = null;

      if (callback) {
        callback(
          new Error(
            'The deflate stream was closed while data was being processed'
          )
        );
      }
    }
  }

  /**
   *  Accept an extension negotiation offer.
   *
   * @param {Array} offers The extension negotiation offers
   * @return {Object} Accepted configuration
   * @private
   */
  acceptAsServer(offers) {
    const opts = this._options;
    const accepted = offers.find((params) => {
      if (
        (opts.serverNoContextTakeover === false &&
          params.server_no_context_takeover) ||
        (params.server_max_window_bits &&
          (opts.serverMaxWindowBits === false ||
            (typeof opts.serverMaxWindowBits === 'number' &&
              opts.serverMaxWindowBits > params.server_max_window_bits))) ||
        (typeof opts.clientMaxWindowBits === 'number' &&
          !params.client_max_window_bits)
      ) {
        return false;
      }

      return true;
    });

    if (!accepted) {
      throw new Error('None of the extension offers can be accepted');
    }

    if (opts.serverNoContextTakeover) {
      accepted.server_no_context_takeover = true;
    }
    if (opts.clientNoContextTakeover) {
      accepted.client_no_context_takeover = true;
    }
    if (typeof opts.serverMaxWindowBits === 'number') {
      accepted.server_max_window_bits = opts.serverMaxWindowBits;
    }
    if (typeof opts.clientMaxWindowBits === 'number') {
      accepted.client_max_window_bits = opts.clientMaxWindowBits;
    } else if (
      accepted.client_max_window_bits === true ||
      opts.clientMaxWindowBits === false
    ) {
      delete accepted.client_max_window_bits;
    }

    return accepted;
  }

  /**
   * Accept the extension negotiation response.
   *
   * @param {Array} response The extension negotiation response
   * @return {Object} Accepted configuration
   * @private
   */
  acceptAsClient(response) {
    const params = response[0];

    if (
      this._options.clientNoContextTakeover === false &&
      params.client_no_context_takeover
    ) {
      throw new Error('Unexpected parameter "client_no_context_takeover"');
    }

    if (!params.client_max_window_bits) {
      if (typeof this._options.clientMaxWindowBits === 'number') {
        params.client_max_window_bits = this._options.clientMaxWindowBits;
      }
    } else if (
      this._options.clientMaxWindowBits === false ||
      (typeof this._options.clientMaxWindowBits === 'number' &&
        params.client_max_window_bits > this._options.clientMaxWindowBits)
    ) {
      throw new Error(
        'Unexpected or invalid parameter "client_max_window_bits"'
      );
    }

    return params;
  }

  /**
   * Normalize parameters.
   *
   * @param {Array} configurations The extension negotiation offers/reponse
   * @return {Array} The offers/response with normalized parameters
   * @private
   */
  normalizeParams(configurations) {
    configurations.forEach((params) => {
      Object.keys(params).forEach((key) => {
        let value = params[key];

        if (value.length > 1) {
          throw new Error(`Parameter "${key}" must have only a single value`);
        }

        value = value[0];

        if (key === 'client_max_window_bits') {
          if (value !== true) {
            const num = +value;
            if (!Number.isInteger(num) || num < 8 || num > 15) {
              throw new TypeError(
                `Invalid value for parameter "${key}": ${value}`
              );
            }
            value = num;
          } else if (!this._isServer) {
            throw new TypeError(
              `Invalid value for parameter "${key}": ${value}`
            );
          }
        } else if (key === 'server_max_window_bits') {
          const num = +value;
          if (!Number.isInteger(num) || num < 8 || num > 15) {
            throw new TypeError(
              `Invalid value for parameter "${key}": ${value}`
            );
          }
          value = num;
        } else if (
          key === 'client_no_context_takeover' ||
          key === 'server_no_context_takeover'
        ) {
          if (value !== true) {
            throw new TypeError(
              `Invalid value for parameter "${key}": ${value}`
            );
          }
        } else {
          throw new Error(`Unknown parameter "${key}"`);
        }

        params[key] = value;
      });
    });

    return configurations;
  }

  /**
   * Decompress data. Concurrency limited.
   *
   * @param {Buffer} data Compressed data
   * @param {Boolean} fin Specifies whether or not this is the last fragment
   * @param {Function} callback Callback
   * @public
   */
  decompress(data, fin, callback) {
    zlibLimiter.add((done) => {
      this._decompress(data, fin, (err, result) => {
        done();
        callback(err, result);
      });
    });
  }

  /**
   * Compress data. Concurrency limited.
   *
   * @param {Buffer} data Data to compress
   * @param {Boolean} fin Specifies whether or not this is the last fragment
   * @param {Function} callback Callback
   * @public
   */
  compress(data, fin, callback) {
    zlibLimiter.add((done) => {
      this._compress(data, fin, (err, result) => {
        done();
        callback(err, result);
      });
    });
  }

  /**
   * Decompress data.
   *
   * @param {Buffer} data Compressed data
   * @param {Boolean} fin Specifies whether or not this is the last fragment
   * @param {Function} callback Callback
   * @private
   */
  _decompress(data, fin, callback) {
    const endpoint = this._isServer ? 'client' : 'server';

    if (!this._inflate) {
      const key = `${endpoint}_max_window_bits`;
      const windowBits =
        typeof this.params[key] !== 'number'
          ? zlib.Z_DEFAULT_WINDOWBITS
          : this.params[key];

      this._inflate = zlib.createInflateRaw({
        ...this._options.zlibInflateOptions,
        windowBits
      });
      this._inflate[kPerMessageDeflate] = this;
      this._inflate[kTotalLength] = 0;
      this._inflate[kBuffers] = [];
      this._inflate.on('error', inflateOnError);
      this._inflate.on('data', inflateOnData);
    }

    this._inflate[kCallback] = callback;

    this._inflate.write(data);
    if (fin) this._inflate.write(TRAILER);

    this._inflate.flush(() => {
      const err = this._inflate[kError];

      if (err) {
        this._inflate.close();
        this._inflate = null;
        callback(err);
        return;
      }

      const data = bufferUtil.concat(
        this._inflate[kBuffers],
        this._inflate[kTotalLength]
      );

      if (fin && this.params[`${endpoint}_no_context_takeover`]) {
        this._inflate.close();
        this._inflate = null;
      } else {
        this._inflate[kTotalLength] = 0;
        this._inflate[kBuffers] = [];
      }

      callback(null, data);
    });
  }

  /**
   * Compress data.
   *
   * @param {Buffer} data Data to compress
   * @param {Boolean} fin Specifies whether or not this is the last fragment
   * @param {Function} callback Callback
   * @private
   */
  _compress(data, fin, callback) {
    const endpoint = this._isServer ? 'server' : 'client';

    if (!this._deflate) {
      const key = `${endpoint}_max_window_bits`;
      const windowBits =
        typeof this.params[key] !== 'number'
          ? zlib.Z_DEFAULT_WINDOWBITS
          : this.params[key];

      this._deflate = zlib.createDeflateRaw({
        ...this._options.zlibDeflateOptions,
        windowBits
      });

      this._deflate[kTotalLength] = 0;
      this._deflate[kBuffers] = [];

      //
      // An `'error'` event is emitted, only on Node.js < 10.0.0, if the
      // `zlib.DeflateRaw` instance is closed while data is being processed.
      // This can happen if `PerMessageDeflate#cleanup()` is called at the wrong
      // time due to an abnormal WebSocket closure.
      //
      this._deflate.on('error', NOOP);
      this._deflate.on('data', deflateOnData);
    }

    this._deflate[kCallback] = callback;

    this._deflate.write(data);
    this._deflate.flush(zlib.Z_SYNC_FLUSH, () => {
      if (!this._deflate) {
        //
        // The deflate stream was closed while data was being processed.
        //
        return;
      }

      let data = bufferUtil.concat(
        this._deflate[kBuffers],
        this._deflate[kTotalLength]
      );

      if (fin) data = data.slice(0, data.length - 4);

      //
      // Ensure that the callback will not be called again in
      // `PerMessageDeflate#cleanup()`.
      //
      this._deflate[kCallback] = null;

      if (fin && this.params[`${endpoint}_no_context_takeover`]) {
        this._deflate.close();
        this._deflate = null;
      } else {
        this._deflate[kTotalLength] = 0;
        this._deflate[kBuffers] = [];
      }

      callback(null, data);
    });
  }
}

module.exports = PerMessageDeflate;

/**
 * The listener of the `zlib.DeflateRaw` stream `'data'` event.
 *
 * @param {Buffer} chunk A chunk of data
 * @private
 */
function deflateOnData(chunk) {
  this[kBuffers].push(chunk);
  this[kTotalLength] += chunk.length;
}

/**
 * The listener of the `zlib.InflateRaw` stream `'data'` event.
 *
 * @param {Buffer} chunk A chunk of data
 * @private
 */
function inflateOnData(chunk) {
  this[kTotalLength] += chunk.length;

  if (
    this[kPerMessageDeflate]._maxPayload < 1 ||
    this[kTotalLength] <= this[kPerMessageDeflate]._maxPayload
  ) {
    this[kBuffers].push(chunk);
    return;
  }

  this[kError] = new RangeError('Max payload size exceeded');
  this[kError][kStatusCode] = 1009;
  this.removeListener('data', inflateOnData);
  this.reset();
}

/**
 * The listener of the `zlib.InflateRaw` stream `'error'` event.
 *
 * @param {Error} err The emitted error
 * @private
 */
function inflateOnError(err) {
  //
  // There is no need to call `Zlib#close()` as the handle is automatically
  // closed when an error is emitted.
  //
  this[kPerMessageDeflate]._inflate = null;
  err[kStatusCode] = 1007;
  this[kCallback](err);
}


/***/ }),

/***/ "./node_modules/ws/lib/receiver.js":
/*!*****************************************!*\
  !*** ./node_modules/ws/lib/receiver.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const { Writable } = __webpack_require__(/*! stream */ "stream");

const PerMessageDeflate = __webpack_require__(/*! ./permessage-deflate */ "./node_modules/ws/lib/permessage-deflate.js");
const {
  BINARY_TYPES,
  EMPTY_BUFFER,
  kStatusCode,
  kWebSocket
} = __webpack_require__(/*! ./constants */ "./node_modules/ws/lib/constants.js");
const { concat, toArrayBuffer, unmask } = __webpack_require__(/*! ./buffer-util */ "./node_modules/ws/lib/buffer-util.js");
const { isValidStatusCode, isValidUTF8 } = __webpack_require__(/*! ./validation */ "./node_modules/ws/lib/validation.js");

const GET_INFO = 0;
const GET_PAYLOAD_LENGTH_16 = 1;
const GET_PAYLOAD_LENGTH_64 = 2;
const GET_MASK = 3;
const GET_DATA = 4;
const INFLATING = 5;

/**
 * HyBi Receiver implementation.
 *
 * @extends stream.Writable
 */
class Receiver extends Writable {
  /**
   * Creates a Receiver instance.
   *
   * @param {String} binaryType The type for binary data
   * @param {Object} extensions An object containing the negotiated extensions
   * @param {Boolean} isServer Specifies whether to operate in client or server
   *     mode
   * @param {Number} maxPayload The maximum allowed message length
   */
  constructor(binaryType, extensions, isServer, maxPayload) {
    super();

    this._binaryType = binaryType || BINARY_TYPES[0];
    this[kWebSocket] = undefined;
    this._extensions = extensions || {};
    this._isServer = !!isServer;
    this._maxPayload = maxPayload | 0;

    this._bufferedBytes = 0;
    this._buffers = [];

    this._compressed = false;
    this._payloadLength = 0;
    this._mask = undefined;
    this._fragmented = 0;
    this._masked = false;
    this._fin = false;
    this._opcode = 0;

    this._totalPayloadLength = 0;
    this._messageLength = 0;
    this._fragments = [];

    this._state = GET_INFO;
    this._loop = false;
  }

  /**
   * Implements `Writable.prototype._write()`.
   *
   * @param {Buffer} chunk The chunk of data to write
   * @param {String} encoding The character encoding of `chunk`
   * @param {Function} cb Callback
   */
  _write(chunk, encoding, cb) {
    if (this._opcode === 0x08 && this._state == GET_INFO) return cb();

    this._bufferedBytes += chunk.length;
    this._buffers.push(chunk);
    this.startLoop(cb);
  }

  /**
   * Consumes `n` bytes from the buffered data.
   *
   * @param {Number} n The number of bytes to consume
   * @return {Buffer} The consumed bytes
   * @private
   */
  consume(n) {
    this._bufferedBytes -= n;

    if (n === this._buffers[0].length) return this._buffers.shift();

    if (n < this._buffers[0].length) {
      const buf = this._buffers[0];
      this._buffers[0] = buf.slice(n);
      return buf.slice(0, n);
    }

    const dst = Buffer.allocUnsafe(n);

    do {
      const buf = this._buffers[0];
      const offset = dst.length - n;

      if (n >= buf.length) {
        dst.set(this._buffers.shift(), offset);
      } else {
        dst.set(new Uint8Array(buf.buffer, buf.byteOffset, n), offset);
        this._buffers[0] = buf.slice(n);
      }

      n -= buf.length;
    } while (n > 0);

    return dst;
  }

  /**
   * Starts the parsing loop.
   *
   * @param {Function} cb Callback
   * @private
   */
  startLoop(cb) {
    let err;
    this._loop = true;

    do {
      switch (this._state) {
        case GET_INFO:
          err = this.getInfo();
          break;
        case GET_PAYLOAD_LENGTH_16:
          err = this.getPayloadLength16();
          break;
        case GET_PAYLOAD_LENGTH_64:
          err = this.getPayloadLength64();
          break;
        case GET_MASK:
          this.getMask();
          break;
        case GET_DATA:
          err = this.getData(cb);
          break;
        default:
          // `INFLATING`
          this._loop = false;
          return;
      }
    } while (this._loop);

    cb(err);
  }

  /**
   * Reads the first two bytes of a frame.
   *
   * @return {(RangeError|undefined)} A possible error
   * @private
   */
  getInfo() {
    if (this._bufferedBytes < 2) {
      this._loop = false;
      return;
    }

    const buf = this.consume(2);

    if ((buf[0] & 0x30) !== 0x00) {
      this._loop = false;
      return error(RangeError, 'RSV2 and RSV3 must be clear', true, 1002);
    }

    const compressed = (buf[0] & 0x40) === 0x40;

    if (compressed && !this._extensions[PerMessageDeflate.extensionName]) {
      this._loop = false;
      return error(RangeError, 'RSV1 must be clear', true, 1002);
    }

    this._fin = (buf[0] & 0x80) === 0x80;
    this._opcode = buf[0] & 0x0f;
    this._payloadLength = buf[1] & 0x7f;

    if (this._opcode === 0x00) {
      if (compressed) {
        this._loop = false;
        return error(RangeError, 'RSV1 must be clear', true, 1002);
      }

      if (!this._fragmented) {
        this._loop = false;
        return error(RangeError, 'invalid opcode 0', true, 1002);
      }

      this._opcode = this._fragmented;
    } else if (this._opcode === 0x01 || this._opcode === 0x02) {
      if (this._fragmented) {
        this._loop = false;
        return error(RangeError, `invalid opcode ${this._opcode}`, true, 1002);
      }

      this._compressed = compressed;
    } else if (this._opcode > 0x07 && this._opcode < 0x0b) {
      if (!this._fin) {
        this._loop = false;
        return error(RangeError, 'FIN must be set', true, 1002);
      }

      if (compressed) {
        this._loop = false;
        return error(RangeError, 'RSV1 must be clear', true, 1002);
      }

      if (this._payloadLength > 0x7d) {
        this._loop = false;
        return error(
          RangeError,
          `invalid payload length ${this._payloadLength}`,
          true,
          1002
        );
      }
    } else {
      this._loop = false;
      return error(RangeError, `invalid opcode ${this._opcode}`, true, 1002);
    }

    if (!this._fin && !this._fragmented) this._fragmented = this._opcode;
    this._masked = (buf[1] & 0x80) === 0x80;

    if (this._isServer) {
      if (!this._masked) {
        this._loop = false;
        return error(RangeError, 'MASK must be set', true, 1002);
      }
    } else if (this._masked) {
      this._loop = false;
      return error(RangeError, 'MASK must be clear', true, 1002);
    }

    if (this._payloadLength === 126) this._state = GET_PAYLOAD_LENGTH_16;
    else if (this._payloadLength === 127) this._state = GET_PAYLOAD_LENGTH_64;
    else return this.haveLength();
  }

  /**
   * Gets extended payload length (7+16).
   *
   * @return {(RangeError|undefined)} A possible error
   * @private
   */
  getPayloadLength16() {
    if (this._bufferedBytes < 2) {
      this._loop = false;
      return;
    }

    this._payloadLength = this.consume(2).readUInt16BE(0);
    return this.haveLength();
  }

  /**
   * Gets extended payload length (7+64).
   *
   * @return {(RangeError|undefined)} A possible error
   * @private
   */
  getPayloadLength64() {
    if (this._bufferedBytes < 8) {
      this._loop = false;
      return;
    }

    const buf = this.consume(8);
    const num = buf.readUInt32BE(0);

    //
    // The maximum safe integer in JavaScript is 2^53 - 1. An error is returned
    // if payload length is greater than this number.
    //
    if (num > Math.pow(2, 53 - 32) - 1) {
      this._loop = false;
      return error(
        RangeError,
        'Unsupported WebSocket frame: payload length > 2^53 - 1',
        false,
        1009
      );
    }

    this._payloadLength = num * Math.pow(2, 32) + buf.readUInt32BE(4);
    return this.haveLength();
  }

  /**
   * Payload length has been read.
   *
   * @return {(RangeError|undefined)} A possible error
   * @private
   */
  haveLength() {
    if (this._payloadLength && this._opcode < 0x08) {
      this._totalPayloadLength += this._payloadLength;
      if (this._totalPayloadLength > this._maxPayload && this._maxPayload > 0) {
        this._loop = false;
        return error(RangeError, 'Max payload size exceeded', false, 1009);
      }
    }

    if (this._masked) this._state = GET_MASK;
    else this._state = GET_DATA;
  }

  /**
   * Reads mask bytes.
   *
   * @private
   */
  getMask() {
    if (this._bufferedBytes < 4) {
      this._loop = false;
      return;
    }

    this._mask = this.consume(4);
    this._state = GET_DATA;
  }

  /**
   * Reads data bytes.
   *
   * @param {Function} cb Callback
   * @return {(Error|RangeError|undefined)} A possible error
   * @private
   */
  getData(cb) {
    let data = EMPTY_BUFFER;

    if (this._payloadLength) {
      if (this._bufferedBytes < this._payloadLength) {
        this._loop = false;
        return;
      }

      data = this.consume(this._payloadLength);
      if (this._masked) unmask(data, this._mask);
    }

    if (this._opcode > 0x07) return this.controlMessage(data);

    if (this._compressed) {
      this._state = INFLATING;
      this.decompress(data, cb);
      return;
    }

    if (data.length) {
      //
      // This message is not compressed so its lenght is the sum of the payload
      // length of all fragments.
      //
      this._messageLength = this._totalPayloadLength;
      this._fragments.push(data);
    }

    return this.dataMessage();
  }

  /**
   * Decompresses data.
   *
   * @param {Buffer} data Compressed data
   * @param {Function} cb Callback
   * @private
   */
  decompress(data, cb) {
    const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];

    perMessageDeflate.decompress(data, this._fin, (err, buf) => {
      if (err) return cb(err);

      if (buf.length) {
        this._messageLength += buf.length;
        if (this._messageLength > this._maxPayload && this._maxPayload > 0) {
          return cb(
            error(RangeError, 'Max payload size exceeded', false, 1009)
          );
        }

        this._fragments.push(buf);
      }

      const er = this.dataMessage();
      if (er) return cb(er);

      this.startLoop(cb);
    });
  }

  /**
   * Handles a data message.
   *
   * @return {(Error|undefined)} A possible error
   * @private
   */
  dataMessage() {
    if (this._fin) {
      const messageLength = this._messageLength;
      const fragments = this._fragments;

      this._totalPayloadLength = 0;
      this._messageLength = 0;
      this._fragmented = 0;
      this._fragments = [];

      if (this._opcode === 2) {
        let data;

        if (this._binaryType === 'nodebuffer') {
          data = concat(fragments, messageLength);
        } else if (this._binaryType === 'arraybuffer') {
          data = toArrayBuffer(concat(fragments, messageLength));
        } else {
          data = fragments;
        }

        this.emit('message', data);
      } else {
        const buf = concat(fragments, messageLength);

        if (!isValidUTF8(buf)) {
          this._loop = false;
          return error(Error, 'invalid UTF-8 sequence', true, 1007);
        }

        this.emit('message', buf.toString());
      }
    }

    this._state = GET_INFO;
  }

  /**
   * Handles a control message.
   *
   * @param {Buffer} data Data to handle
   * @return {(Error|RangeError|undefined)} A possible error
   * @private
   */
  controlMessage(data) {
    if (this._opcode === 0x08) {
      this._loop = false;

      if (data.length === 0) {
        this.emit('conclude', 1005, '');
        this.end();
      } else if (data.length === 1) {
        return error(RangeError, 'invalid payload length 1', true, 1002);
      } else {
        const code = data.readUInt16BE(0);

        if (!isValidStatusCode(code)) {
          return error(RangeError, `invalid status code ${code}`, true, 1002);
        }

        const buf = data.slice(2);

        if (!isValidUTF8(buf)) {
          return error(Error, 'invalid UTF-8 sequence', true, 1007);
        }

        this.emit('conclude', code, buf.toString());
        this.end();
      }
    } else if (this._opcode === 0x09) {
      this.emit('ping', data);
    } else {
      this.emit('pong', data);
    }

    this._state = GET_INFO;
  }
}

module.exports = Receiver;

/**
 * Builds an error object.
 *
 * @param {(Error|RangeError)} ErrorCtor The error constructor
 * @param {String} message The error message
 * @param {Boolean} prefix Specifies whether or not to add a default prefix to
 *     `message`
 * @param {Number} statusCode The status code
 * @return {(Error|RangeError)} The error
 * @private
 */
function error(ErrorCtor, message, prefix, statusCode) {
  const err = new ErrorCtor(
    prefix ? `Invalid WebSocket frame: ${message}` : message
  );

  Error.captureStackTrace(err, error);
  err[kStatusCode] = statusCode;
  return err;
}


/***/ }),

/***/ "./node_modules/ws/lib/sender.js":
/*!***************************************!*\
  !*** ./node_modules/ws/lib/sender.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const { randomFillSync } = __webpack_require__(/*! crypto */ "crypto");

const PerMessageDeflate = __webpack_require__(/*! ./permessage-deflate */ "./node_modules/ws/lib/permessage-deflate.js");
const { EMPTY_BUFFER } = __webpack_require__(/*! ./constants */ "./node_modules/ws/lib/constants.js");
const { isValidStatusCode } = __webpack_require__(/*! ./validation */ "./node_modules/ws/lib/validation.js");
const { mask: applyMask, toBuffer } = __webpack_require__(/*! ./buffer-util */ "./node_modules/ws/lib/buffer-util.js");

const mask = Buffer.alloc(4);

/**
 * HyBi Sender implementation.
 */
class Sender {
  /**
   * Creates a Sender instance.
   *
   * @param {net.Socket} socket The connection socket
   * @param {Object} extensions An object containing the negotiated extensions
   */
  constructor(socket, extensions) {
    this._extensions = extensions || {};
    this._socket = socket;

    this._firstFragment = true;
    this._compress = false;

    this._bufferedBytes = 0;
    this._deflating = false;
    this._queue = [];
  }

  /**
   * Frames a piece of data according to the HyBi WebSocket protocol.
   *
   * @param {Buffer} data The data to frame
   * @param {Object} options Options object
   * @param {Number} options.opcode The opcode
   * @param {Boolean} options.readOnly Specifies whether `data` can be modified
   * @param {Boolean} options.fin Specifies whether or not to set the FIN bit
   * @param {Boolean} options.mask Specifies whether or not to mask `data`
   * @param {Boolean} options.rsv1 Specifies whether or not to set the RSV1 bit
   * @return {Buffer[]} The framed data as a list of `Buffer` instances
   * @public
   */
  static frame(data, options) {
    const merge = options.mask && options.readOnly;
    let offset = options.mask ? 6 : 2;
    let payloadLength = data.length;

    if (data.length >= 65536) {
      offset += 8;
      payloadLength = 127;
    } else if (data.length > 125) {
      offset += 2;
      payloadLength = 126;
    }

    const target = Buffer.allocUnsafe(merge ? data.length + offset : offset);

    target[0] = options.fin ? options.opcode | 0x80 : options.opcode;
    if (options.rsv1) target[0] |= 0x40;

    target[1] = payloadLength;

    if (payloadLength === 126) {
      target.writeUInt16BE(data.length, 2);
    } else if (payloadLength === 127) {
      target.writeUInt32BE(0, 2);
      target.writeUInt32BE(data.length, 6);
    }

    if (!options.mask) return [target, data];

    randomFillSync(mask, 0, 4);

    target[1] |= 0x80;
    target[offset - 4] = mask[0];
    target[offset - 3] = mask[1];
    target[offset - 2] = mask[2];
    target[offset - 1] = mask[3];

    if (merge) {
      applyMask(data, mask, target, offset, data.length);
      return [target];
    }

    applyMask(data, mask, data, 0, data.length);
    return [target, data];
  }

  /**
   * Sends a close message to the other peer.
   *
   * @param {(Number|undefined)} code The status code component of the body
   * @param {String} data The message component of the body
   * @param {Boolean} mask Specifies whether or not to mask the message
   * @param {Function} cb Callback
   * @public
   */
  close(code, data, mask, cb) {
    let buf;

    if (code === undefined) {
      buf = EMPTY_BUFFER;
    } else if (typeof code !== 'number' || !isValidStatusCode(code)) {
      throw new TypeError('First argument must be a valid error code number');
    } else if (data === undefined || data === '') {
      buf = Buffer.allocUnsafe(2);
      buf.writeUInt16BE(code, 0);
    } else {
      const length = Buffer.byteLength(data);

      if (length > 123) {
        throw new RangeError('The message must not be greater than 123 bytes');
      }

      buf = Buffer.allocUnsafe(2 + length);
      buf.writeUInt16BE(code, 0);
      buf.write(data, 2);
    }

    if (this._deflating) {
      this.enqueue([this.doClose, buf, mask, cb]);
    } else {
      this.doClose(buf, mask, cb);
    }
  }

  /**
   * Frames and sends a close message.
   *
   * @param {Buffer} data The message to send
   * @param {Boolean} mask Specifies whether or not to mask `data`
   * @param {Function} cb Callback
   * @private
   */
  doClose(data, mask, cb) {
    this.sendFrame(
      Sender.frame(data, {
        fin: true,
        rsv1: false,
        opcode: 0x08,
        mask,
        readOnly: false
      }),
      cb
    );
  }

  /**
   * Sends a ping message to the other peer.
   *
   * @param {*} data The message to send
   * @param {Boolean} mask Specifies whether or not to mask `data`
   * @param {Function} cb Callback
   * @public
   */
  ping(data, mask, cb) {
    const buf = toBuffer(data);

    if (buf.length > 125) {
      throw new RangeError('The data size must not be greater than 125 bytes');
    }

    if (this._deflating) {
      this.enqueue([this.doPing, buf, mask, toBuffer.readOnly, cb]);
    } else {
      this.doPing(buf, mask, toBuffer.readOnly, cb);
    }
  }

  /**
   * Frames and sends a ping message.
   *
   * @param {*} data The message to send
   * @param {Boolean} mask Specifies whether or not to mask `data`
   * @param {Boolean} readOnly Specifies whether `data` can be modified
   * @param {Function} cb Callback
   * @private
   */
  doPing(data, mask, readOnly, cb) {
    this.sendFrame(
      Sender.frame(data, {
        fin: true,
        rsv1: false,
        opcode: 0x09,
        mask,
        readOnly
      }),
      cb
    );
  }

  /**
   * Sends a pong message to the other peer.
   *
   * @param {*} data The message to send
   * @param {Boolean} mask Specifies whether or not to mask `data`
   * @param {Function} cb Callback
   * @public
   */
  pong(data, mask, cb) {
    const buf = toBuffer(data);

    if (buf.length > 125) {
      throw new RangeError('The data size must not be greater than 125 bytes');
    }

    if (this._deflating) {
      this.enqueue([this.doPong, buf, mask, toBuffer.readOnly, cb]);
    } else {
      this.doPong(buf, mask, toBuffer.readOnly, cb);
    }
  }

  /**
   * Frames and sends a pong message.
   *
   * @param {*} data The message to send
   * @param {Boolean} mask Specifies whether or not to mask `data`
   * @param {Boolean} readOnly Specifies whether `data` can be modified
   * @param {Function} cb Callback
   * @private
   */
  doPong(data, mask, readOnly, cb) {
    this.sendFrame(
      Sender.frame(data, {
        fin: true,
        rsv1: false,
        opcode: 0x0a,
        mask,
        readOnly
      }),
      cb
    );
  }

  /**
   * Sends a data message to the other peer.
   *
   * @param {*} data The message to send
   * @param {Object} options Options object
   * @param {Boolean} options.compress Specifies whether or not to compress `data`
   * @param {Boolean} options.binary Specifies whether `data` is binary or text
   * @param {Boolean} options.fin Specifies whether the fragment is the last one
   * @param {Boolean} options.mask Specifies whether or not to mask `data`
   * @param {Function} cb Callback
   * @public
   */
  send(data, options, cb) {
    const buf = toBuffer(data);
    const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];
    let opcode = options.binary ? 2 : 1;
    let rsv1 = options.compress;

    if (this._firstFragment) {
      this._firstFragment = false;
      if (rsv1 && perMessageDeflate) {
        rsv1 = buf.length >= perMessageDeflate._threshold;
      }
      this._compress = rsv1;
    } else {
      rsv1 = false;
      opcode = 0;
    }

    if (options.fin) this._firstFragment = true;

    if (perMessageDeflate) {
      const opts = {
        fin: options.fin,
        rsv1,
        opcode,
        mask: options.mask,
        readOnly: toBuffer.readOnly
      };

      if (this._deflating) {
        this.enqueue([this.dispatch, buf, this._compress, opts, cb]);
      } else {
        this.dispatch(buf, this._compress, opts, cb);
      }
    } else {
      this.sendFrame(
        Sender.frame(buf, {
          fin: options.fin,
          rsv1: false,
          opcode,
          mask: options.mask,
          readOnly: toBuffer.readOnly
        }),
        cb
      );
    }
  }

  /**
   * Dispatches a data message.
   *
   * @param {Buffer} data The message to send
   * @param {Boolean} compress Specifies whether or not to compress `data`
   * @param {Object} options Options object
   * @param {Number} options.opcode The opcode
   * @param {Boolean} options.readOnly Specifies whether `data` can be modified
   * @param {Boolean} options.fin Specifies whether or not to set the FIN bit
   * @param {Boolean} options.mask Specifies whether or not to mask `data`
   * @param {Boolean} options.rsv1 Specifies whether or not to set the RSV1 bit
   * @param {Function} cb Callback
   * @private
   */
  dispatch(data, compress, options, cb) {
    if (!compress) {
      this.sendFrame(Sender.frame(data, options), cb);
      return;
    }

    const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];

    this._deflating = true;
    perMessageDeflate.compress(data, options.fin, (_, buf) => {
      if (this._socket.destroyed) {
        const err = new Error(
          'The socket was closed while data was being compressed'
        );

        if (typeof cb === 'function') cb(err);

        for (let i = 0; i < this._queue.length; i++) {
          const callback = this._queue[i][4];

          if (typeof callback === 'function') callback(err);
        }

        return;
      }

      this._deflating = false;
      options.readOnly = false;
      this.sendFrame(Sender.frame(buf, options), cb);
      this.dequeue();
    });
  }

  /**
   * Executes queued send operations.
   *
   * @private
   */
  dequeue() {
    while (!this._deflating && this._queue.length) {
      const params = this._queue.shift();

      this._bufferedBytes -= params[1].length;
      Reflect.apply(params[0], this, params.slice(1));
    }
  }

  /**
   * Enqueues a send operation.
   *
   * @param {Array} params Send operation parameters.
   * @private
   */
  enqueue(params) {
    this._bufferedBytes += params[1].length;
    this._queue.push(params);
  }

  /**
   * Sends a frame.
   *
   * @param {Buffer[]} list The frame to send
   * @param {Function} cb Callback
   * @private
   */
  sendFrame(list, cb) {
    if (list.length === 2) {
      this._socket.cork();
      this._socket.write(list[0]);
      this._socket.write(list[1], cb);
      this._socket.uncork();
    } else {
      this._socket.write(list[0], cb);
    }
  }
}

module.exports = Sender;


/***/ }),

/***/ "./node_modules/ws/lib/stream.js":
/*!***************************************!*\
  !*** ./node_modules/ws/lib/stream.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const { Duplex } = __webpack_require__(/*! stream */ "stream");

/**
 * Emits the `'close'` event on a stream.
 *
 * @param {stream.Duplex} The stream.
 * @private
 */
function emitClose(stream) {
  stream.emit('close');
}

/**
 * The listener of the `'end'` event.
 *
 * @private
 */
function duplexOnEnd() {
  if (!this.destroyed && this._writableState.finished) {
    this.destroy();
  }
}

/**
 * The listener of the `'error'` event.
 *
 * @private
 */
function duplexOnError(err) {
  this.removeListener('error', duplexOnError);
  this.destroy();
  if (this.listenerCount('error') === 0) {
    // Do not suppress the throwing behavior.
    this.emit('error', err);
  }
}

/**
 * Wraps a `WebSocket` in a duplex stream.
 *
 * @param {WebSocket} ws The `WebSocket` to wrap
 * @param {Object} options The options for the `Duplex` constructor
 * @return {stream.Duplex} The duplex stream
 * @public
 */
function createWebSocketStream(ws, options) {
  let resumeOnReceiverDrain = true;

  function receiverOnDrain() {
    if (resumeOnReceiverDrain) ws._socket.resume();
  }

  if (ws.readyState === ws.CONNECTING) {
    ws.once('open', function open() {
      ws._receiver.removeAllListeners('drain');
      ws._receiver.on('drain', receiverOnDrain);
    });
  } else {
    ws._receiver.removeAllListeners('drain');
    ws._receiver.on('drain', receiverOnDrain);
  }

  const duplex = new Duplex({
    ...options,
    autoDestroy: false,
    emitClose: false,
    objectMode: false,
    writableObjectMode: false
  });

  ws.on('message', function message(msg) {
    if (!duplex.push(msg)) {
      resumeOnReceiverDrain = false;
      ws._socket.pause();
    }
  });

  ws.once('error', function error(err) {
    if (duplex.destroyed) return;

    duplex.destroy(err);
  });

  ws.once('close', function close() {
    if (duplex.destroyed) return;

    duplex.push(null);
  });

  duplex._destroy = function(err, callback) {
    if (ws.readyState === ws.CLOSED) {
      callback(err);
      process.nextTick(emitClose, duplex);
      return;
    }

    let called = false;

    ws.once('error', function error(err) {
      called = true;
      callback(err);
    });

    ws.once('close', function close() {
      if (!called) callback(err);
      process.nextTick(emitClose, duplex);
    });
    ws.terminate();
  };

  duplex._final = function(callback) {
    if (ws.readyState === ws.CONNECTING) {
      ws.once('open', function open() {
        duplex._final(callback);
      });
      return;
    }

    // If the value of the `_socket` property is `null` it means that `ws` is a
    // client websocket and the handshake failed. In fact, when this happens, a
    // socket is never assigned to the websocket. Wait for the `'error'` event
    // that will be emitted by the websocket.
    if (ws._socket === null) return;

    if (ws._socket._writableState.finished) {
      callback();
      if (duplex._readableState.endEmitted) duplex.destroy();
    } else {
      ws._socket.once('finish', function finish() {
        // `duplex` is not destroyed here because the `'end'` event will be
        // emitted on `duplex` after this `'finish'` event. The EOF signaling
        // `null` chunk is, in fact, pushed when the websocket emits `'close'`.
        callback();
      });
      ws.close();
    }
  };

  duplex._read = function() {
    if (ws.readyState === ws.OPEN && !resumeOnReceiverDrain) {
      resumeOnReceiverDrain = true;
      if (!ws._receiver._writableState.needDrain) ws._socket.resume();
    }
  };

  duplex._write = function(chunk, encoding, callback) {
    if (ws.readyState === ws.CONNECTING) {
      ws.once('open', function open() {
        duplex._write(chunk, encoding, callback);
      });
      return;
    }

    ws.send(chunk, callback);
  };

  duplex.on('end', duplexOnEnd);
  duplex.on('error', duplexOnError);
  return duplex;
}

module.exports = createWebSocketStream;


/***/ }),

/***/ "./node_modules/ws/lib/validation.js":
/*!*******************************************!*\
  !*** ./node_modules/ws/lib/validation.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


try {
  const isValidUTF8 = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module 'utf-8-validate'"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));

  exports.isValidUTF8 =
    typeof isValidUTF8 === 'object'
      ? isValidUTF8.Validation.isValidUTF8 // utf-8-validate@<3.0.0
      : isValidUTF8;
} catch (e) /* istanbul ignore next */ {
  exports.isValidUTF8 = () => true;
}

/**
 * Checks if a status code is allowed in a close frame.
 *
 * @param {Number} code The status code
 * @return {Boolean} `true` if the status code is valid, else `false`
 * @public
 */
exports.isValidStatusCode = (code) => {
  return (
    (code >= 1000 &&
      code <= 1014 &&
      code !== 1004 &&
      code !== 1005 &&
      code !== 1006) ||
    (code >= 3000 && code <= 4999)
  );
};


/***/ }),

/***/ "./node_modules/ws/lib/websocket-server.js":
/*!*************************************************!*\
  !*** ./node_modules/ws/lib/websocket-server.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const EventEmitter = __webpack_require__(/*! events */ "events");
const { createHash } = __webpack_require__(/*! crypto */ "crypto");
const { createServer, STATUS_CODES } = __webpack_require__(/*! http */ "http");

const PerMessageDeflate = __webpack_require__(/*! ./permessage-deflate */ "./node_modules/ws/lib/permessage-deflate.js");
const WebSocket = __webpack_require__(/*! ./websocket */ "./node_modules/ws/lib/websocket.js");
const { format, parse } = __webpack_require__(/*! ./extension */ "./node_modules/ws/lib/extension.js");
const { GUID, kWebSocket } = __webpack_require__(/*! ./constants */ "./node_modules/ws/lib/constants.js");

const keyRegex = /^[+/0-9A-Za-z]{22}==$/;

/**
 * Class representing a WebSocket server.
 *
 * @extends EventEmitter
 */
class WebSocketServer extends EventEmitter {
  /**
   * Create a `WebSocketServer` instance.
   *
   * @param {Object} options Configuration options
   * @param {Number} options.backlog The maximum length of the queue of pending
   *     connections
   * @param {Boolean} options.clientTracking Specifies whether or not to track
   *     clients
   * @param {Function} options.handleProtocols A hook to handle protocols
   * @param {String} options.host The hostname where to bind the server
   * @param {Number} options.maxPayload The maximum allowed message size
   * @param {Boolean} options.noServer Enable no server mode
   * @param {String} options.path Accept only connections matching this path
   * @param {(Boolean|Object)} options.perMessageDeflate Enable/disable
   *     permessage-deflate
   * @param {Number} options.port The port where to bind the server
   * @param {http.Server} options.server A pre-created HTTP/S server to use
   * @param {Function} options.verifyClient A hook to reject connections
   * @param {Function} callback A listener for the `listening` event
   */
  constructor(options, callback) {
    super();

    options = {
      maxPayload: 100 * 1024 * 1024,
      perMessageDeflate: false,
      handleProtocols: null,
      clientTracking: true,
      verifyClient: null,
      noServer: false,
      backlog: null, // use default (511 as implemented in net.js)
      server: null,
      host: null,
      path: null,
      port: null,
      ...options
    };

    if (options.port == null && !options.server && !options.noServer) {
      throw new TypeError(
        'One of the "port", "server", or "noServer" options must be specified'
      );
    }

    if (options.port != null) {
      this._server = createServer((req, res) => {
        const body = STATUS_CODES[426];

        res.writeHead(426, {
          'Content-Length': body.length,
          'Content-Type': 'text/plain'
        });
        res.end(body);
      });
      this._server.listen(
        options.port,
        options.host,
        options.backlog,
        callback
      );
    } else if (options.server) {
      this._server = options.server;
    }

    if (this._server) {
      this._removeListeners = addListeners(this._server, {
        listening: this.emit.bind(this, 'listening'),
        error: this.emit.bind(this, 'error'),
        upgrade: (req, socket, head) => {
          this.handleUpgrade(req, socket, head, (ws) => {
            this.emit('connection', ws, req);
          });
        }
      });
    }

    if (options.perMessageDeflate === true) options.perMessageDeflate = {};
    if (options.clientTracking) this.clients = new Set();
    this.options = options;
  }

  /**
   * Returns the bound address, the address family name, and port of the server
   * as reported by the operating system if listening on an IP socket.
   * If the server is listening on a pipe or UNIX domain socket, the name is
   * returned as a string.
   *
   * @return {(Object|String|null)} The address of the server
   * @public
   */
  address() {
    if (this.options.noServer) {
      throw new Error('The server is operating in "noServer" mode');
    }

    if (!this._server) return null;
    return this._server.address();
  }

  /**
   * Close the server.
   *
   * @param {Function} cb Callback
   * @public
   */
  close(cb) {
    if (cb) this.once('close', cb);

    //
    // Terminate all associated clients.
    //
    if (this.clients) {
      for (const client of this.clients) client.terminate();
    }

    const server = this._server;

    if (server) {
      this._removeListeners();
      this._removeListeners = this._server = null;

      //
      // Close the http server if it was internally created.
      //
      if (this.options.port != null) {
        server.close(() => this.emit('close'));
        return;
      }
    }

    process.nextTick(emitClose, this);
  }

  /**
   * See if a given request should be handled by this server instance.
   *
   * @param {http.IncomingMessage} req Request object to inspect
   * @return {Boolean} `true` if the request is valid, else `false`
   * @public
   */
  shouldHandle(req) {
    if (this.options.path) {
      const index = req.url.indexOf('?');
      const pathname = index !== -1 ? req.url.slice(0, index) : req.url;

      if (pathname !== this.options.path) return false;
    }

    return true;
  }

  /**
   * Handle a HTTP Upgrade request.
   *
   * @param {http.IncomingMessage} req The request object
   * @param {net.Socket} socket The network socket between the server and client
   * @param {Buffer} head The first packet of the upgraded stream
   * @param {Function} cb Callback
   * @public
   */
  handleUpgrade(req, socket, head, cb) {
    socket.on('error', socketOnError);

    const key =
      req.headers['sec-websocket-key'] !== undefined
        ? req.headers['sec-websocket-key'].trim()
        : false;
    const version = +req.headers['sec-websocket-version'];
    const extensions = {};

    if (
      req.method !== 'GET' ||
      req.headers.upgrade.toLowerCase() !== 'websocket' ||
      !key ||
      !keyRegex.test(key) ||
      (version !== 8 && version !== 13) ||
      !this.shouldHandle(req)
    ) {
      return abortHandshake(socket, 400);
    }

    if (this.options.perMessageDeflate) {
      const perMessageDeflate = new PerMessageDeflate(
        this.options.perMessageDeflate,
        true,
        this.options.maxPayload
      );

      try {
        const offers = parse(req.headers['sec-websocket-extensions']);

        if (offers[PerMessageDeflate.extensionName]) {
          perMessageDeflate.accept(offers[PerMessageDeflate.extensionName]);
          extensions[PerMessageDeflate.extensionName] = perMessageDeflate;
        }
      } catch (err) {
        return abortHandshake(socket, 400);
      }
    }

    //
    // Optionally call external client verification handler.
    //
    if (this.options.verifyClient) {
      const info = {
        origin:
          req.headers[`${version === 8 ? 'sec-websocket-origin' : 'origin'}`],
        secure: !!(req.connection.authorized || req.connection.encrypted),
        req
      };

      if (this.options.verifyClient.length === 2) {
        this.options.verifyClient(info, (verified, code, message, headers) => {
          if (!verified) {
            return abortHandshake(socket, code || 401, message, headers);
          }

          this.completeUpgrade(key, extensions, req, socket, head, cb);
        });
        return;
      }

      if (!this.options.verifyClient(info)) return abortHandshake(socket, 401);
    }

    this.completeUpgrade(key, extensions, req, socket, head, cb);
  }

  /**
   * Upgrade the connection to WebSocket.
   *
   * @param {String} key The value of the `Sec-WebSocket-Key` header
   * @param {Object} extensions The accepted extensions
   * @param {http.IncomingMessage} req The request object
   * @param {net.Socket} socket The network socket between the server and client
   * @param {Buffer} head The first packet of the upgraded stream
   * @param {Function} cb Callback
   * @throws {Error} If called more than once with the same socket
   * @private
   */
  completeUpgrade(key, extensions, req, socket, head, cb) {
    //
    // Destroy the socket if the client has already sent a FIN packet.
    //
    if (!socket.readable || !socket.writable) return socket.destroy();

    if (socket[kWebSocket]) {
      throw new Error(
        'server.handleUpgrade() was called more than once with the same ' +
          'socket, possibly due to a misconfiguration'
      );
    }

    const digest = createHash('sha1')
      .update(key + GUID)
      .digest('base64');

    const headers = [
      'HTTP/1.1 101 Switching Protocols',
      'Upgrade: websocket',
      'Connection: Upgrade',
      `Sec-WebSocket-Accept: ${digest}`
    ];

    const ws = new WebSocket(null);
    let protocol = req.headers['sec-websocket-protocol'];

    if (protocol) {
      protocol = protocol.trim().split(/ *, */);

      //
      // Optionally call external protocol selection handler.
      //
      if (this.options.handleProtocols) {
        protocol = this.options.handleProtocols(protocol, req);
      } else {
        protocol = protocol[0];
      }

      if (protocol) {
        headers.push(`Sec-WebSocket-Protocol: ${protocol}`);
        ws.protocol = protocol;
      }
    }

    if (extensions[PerMessageDeflate.extensionName]) {
      const params = extensions[PerMessageDeflate.extensionName].params;
      const value = format({
        [PerMessageDeflate.extensionName]: [params]
      });
      headers.push(`Sec-WebSocket-Extensions: ${value}`);
      ws._extensions = extensions;
    }

    //
    // Allow external modification/inspection of handshake headers.
    //
    this.emit('headers', headers, req);

    socket.write(headers.concat('\r\n').join('\r\n'));
    socket.removeListener('error', socketOnError);

    ws.setSocket(socket, head, this.options.maxPayload);

    if (this.clients) {
      this.clients.add(ws);
      ws.on('close', () => this.clients.delete(ws));
    }

    cb(ws);
  }
}

module.exports = WebSocketServer;

/**
 * Add event listeners on an `EventEmitter` using a map of <event, listener>
 * pairs.
 *
 * @param {EventEmitter} server The event emitter
 * @param {Object.<String, Function>} map The listeners to add
 * @return {Function} A function that will remove the added listeners when called
 * @private
 */
function addListeners(server, map) {
  for (const event of Object.keys(map)) server.on(event, map[event]);

  return function removeListeners() {
    for (const event of Object.keys(map)) {
      server.removeListener(event, map[event]);
    }
  };
}

/**
 * Emit a `'close'` event on an `EventEmitter`.
 *
 * @param {EventEmitter} server The event emitter
 * @private
 */
function emitClose(server) {
  server.emit('close');
}

/**
 * Handle premature socket errors.
 *
 * @private
 */
function socketOnError() {
  this.destroy();
}

/**
 * Close the connection when preconditions are not fulfilled.
 *
 * @param {net.Socket} socket The socket of the upgrade request
 * @param {Number} code The HTTP response status code
 * @param {String} [message] The HTTP response body
 * @param {Object} [headers] Additional HTTP response headers
 * @private
 */
function abortHandshake(socket, code, message, headers) {
  if (socket.writable) {
    message = message || STATUS_CODES[code];
    headers = {
      Connection: 'close',
      'Content-Type': 'text/html',
      'Content-Length': Buffer.byteLength(message),
      ...headers
    };

    socket.write(
      `HTTP/1.1 ${code} ${STATUS_CODES[code]}\r\n` +
        Object.keys(headers)
          .map((h) => `${h}: ${headers[h]}`)
          .join('\r\n') +
        '\r\n\r\n' +
        message
    );
  }

  socket.removeListener('error', socketOnError);
  socket.destroy();
}


/***/ }),

/***/ "./node_modules/ws/lib/websocket.js":
/*!******************************************!*\
  !*** ./node_modules/ws/lib/websocket.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const EventEmitter = __webpack_require__(/*! events */ "events");
const https = __webpack_require__(/*! https */ "https");
const http = __webpack_require__(/*! http */ "http");
const net = __webpack_require__(/*! net */ "net");
const tls = __webpack_require__(/*! tls */ "tls");
const { randomBytes, createHash } = __webpack_require__(/*! crypto */ "crypto");
const { URL } = __webpack_require__(/*! url */ "url");

const PerMessageDeflate = __webpack_require__(/*! ./permessage-deflate */ "./node_modules/ws/lib/permessage-deflate.js");
const Receiver = __webpack_require__(/*! ./receiver */ "./node_modules/ws/lib/receiver.js");
const Sender = __webpack_require__(/*! ./sender */ "./node_modules/ws/lib/sender.js");
const {
  BINARY_TYPES,
  EMPTY_BUFFER,
  GUID,
  kStatusCode,
  kWebSocket,
  NOOP
} = __webpack_require__(/*! ./constants */ "./node_modules/ws/lib/constants.js");
const { addEventListener, removeEventListener } = __webpack_require__(/*! ./event-target */ "./node_modules/ws/lib/event-target.js");
const { format, parse } = __webpack_require__(/*! ./extension */ "./node_modules/ws/lib/extension.js");
const { toBuffer } = __webpack_require__(/*! ./buffer-util */ "./node_modules/ws/lib/buffer-util.js");

const readyStates = ['CONNECTING', 'OPEN', 'CLOSING', 'CLOSED'];
const protocolVersions = [8, 13];
const closeTimeout = 30 * 1000;

/**
 * Class representing a WebSocket.
 *
 * @extends EventEmitter
 */
class WebSocket extends EventEmitter {
  /**
   * Create a new `WebSocket`.
   *
   * @param {(String|url.URL)} address The URL to which to connect
   * @param {(String|String[])} protocols The subprotocols
   * @param {Object} options Connection options
   */
  constructor(address, protocols, options) {
    super();

    this.readyState = WebSocket.CONNECTING;
    this.protocol = '';

    this._binaryType = BINARY_TYPES[0];
    this._closeFrameReceived = false;
    this._closeFrameSent = false;
    this._closeMessage = '';
    this._closeTimer = null;
    this._closeCode = 1006;
    this._extensions = {};
    this._receiver = null;
    this._sender = null;
    this._socket = null;

    if (address !== null) {
      this._bufferedAmount = 0;
      this._isServer = false;
      this._redirects = 0;

      if (Array.isArray(protocols)) {
        protocols = protocols.join(', ');
      } else if (typeof protocols === 'object' && protocols !== null) {
        options = protocols;
        protocols = undefined;
      }

      initAsClient(this, address, protocols, options);
    } else {
      this._isServer = true;
    }
  }

  get CONNECTING() {
    return WebSocket.CONNECTING;
  }
  get CLOSING() {
    return WebSocket.CLOSING;
  }
  get CLOSED() {
    return WebSocket.CLOSED;
  }
  get OPEN() {
    return WebSocket.OPEN;
  }

  /**
   * This deviates from the WHATWG interface since ws doesn't support the
   * required default "blob" type (instead we define a custom "nodebuffer"
   * type).
   *
   * @type {String}
   */
  get binaryType() {
    return this._binaryType;
  }

  set binaryType(type) {
    if (!BINARY_TYPES.includes(type)) return;

    this._binaryType = type;

    //
    // Allow to change `binaryType` on the fly.
    //
    if (this._receiver) this._receiver._binaryType = type;
  }

  /**
   * @type {Number}
   */
  get bufferedAmount() {
    if (!this._socket) return this._bufferedAmount;

    //
    // `socket.bufferSize` is `undefined` if the socket is closed.
    //
    return (this._socket.bufferSize || 0) + this._sender._bufferedBytes;
  }

  /**
   * @type {String}
   */
  get extensions() {
    return Object.keys(this._extensions).join();
  }

  /**
   * Set up the socket and the internal resources.
   *
   * @param {net.Socket} socket The network socket between the server and client
   * @param {Buffer} head The first packet of the upgraded stream
   * @param {Number} maxPayload The maximum allowed message size
   * @private
   */
  setSocket(socket, head, maxPayload) {
    const receiver = new Receiver(
      this._binaryType,
      this._extensions,
      this._isServer,
      maxPayload
    );

    this._sender = new Sender(socket, this._extensions);
    this._receiver = receiver;
    this._socket = socket;

    receiver[kWebSocket] = this;
    socket[kWebSocket] = this;

    receiver.on('conclude', receiverOnConclude);
    receiver.on('drain', receiverOnDrain);
    receiver.on('error', receiverOnError);
    receiver.on('message', receiverOnMessage);
    receiver.on('ping', receiverOnPing);
    receiver.on('pong', receiverOnPong);

    socket.setTimeout(0);
    socket.setNoDelay();

    if (head.length > 0) socket.unshift(head);

    socket.on('close', socketOnClose);
    socket.on('data', socketOnData);
    socket.on('end', socketOnEnd);
    socket.on('error', socketOnError);

    this.readyState = WebSocket.OPEN;
    this.emit('open');
  }

  /**
   * Emit the `'close'` event.
   *
   * @private
   */
  emitClose() {
    if (!this._socket) {
      this.readyState = WebSocket.CLOSED;
      this.emit('close', this._closeCode, this._closeMessage);
      return;
    }

    if (this._extensions[PerMessageDeflate.extensionName]) {
      this._extensions[PerMessageDeflate.extensionName].cleanup();
    }

    this._receiver.removeAllListeners();
    this.readyState = WebSocket.CLOSED;
    this.emit('close', this._closeCode, this._closeMessage);
  }

  /**
   * Start a closing handshake.
   *
   *          +----------+   +-----------+   +----------+
   *     - - -|ws.close()|-->|close frame|-->|ws.close()|- - -
   *    |     +----------+   +-----------+   +----------+     |
   *          +----------+   +-----------+         |
   * CLOSING  |ws.close()|<--|close frame|<--+-----+       CLOSING
   *          +----------+   +-----------+   |
   *    |           |                        |   +---+        |
   *                +------------------------+-->|fin| - - - -
   *    |         +---+                      |   +---+
   *     - - - - -|fin|<---------------------+
   *              +---+
   *
   * @param {Number} code Status code explaining why the connection is closing
   * @param {String} data A string explaining why the connection is closing
   * @public
   */
  close(code, data) {
    if (this.readyState === WebSocket.CLOSED) return;
    if (this.readyState === WebSocket.CONNECTING) {
      const msg = 'WebSocket was closed before the connection was established';
      return abortHandshake(this, this._req, msg);
    }

    if (this.readyState === WebSocket.CLOSING) {
      if (this._closeFrameSent && this._closeFrameReceived) this._socket.end();
      return;
    }

    this.readyState = WebSocket.CLOSING;
    this._sender.close(code, data, !this._isServer, (err) => {
      //
      // This error is handled by the `'error'` listener on the socket. We only
      // want to know if the close frame has been sent here.
      //
      if (err) return;

      this._closeFrameSent = true;
      if (this._closeFrameReceived) this._socket.end();
    });

    //
    // Specify a timeout for the closing handshake to complete.
    //
    this._closeTimer = setTimeout(
      this._socket.destroy.bind(this._socket),
      closeTimeout
    );
  }

  /**
   * Send a ping.
   *
   * @param {*} data The data to send
   * @param {Boolean} mask Indicates whether or not to mask `data`
   * @param {Function} cb Callback which is executed when the ping is sent
   * @public
   */
  ping(data, mask, cb) {
    if (this.readyState === WebSocket.CONNECTING) {
      throw new Error('WebSocket is not open: readyState 0 (CONNECTING)');
    }

    if (typeof data === 'function') {
      cb = data;
      data = mask = undefined;
    } else if (typeof mask === 'function') {
      cb = mask;
      mask = undefined;
    }

    if (typeof data === 'number') data = data.toString();

    if (this.readyState !== WebSocket.OPEN) {
      sendAfterClose(this, data, cb);
      return;
    }

    if (mask === undefined) mask = !this._isServer;
    this._sender.ping(data || EMPTY_BUFFER, mask, cb);
  }

  /**
   * Send a pong.
   *
   * @param {*} data The data to send
   * @param {Boolean} mask Indicates whether or not to mask `data`
   * @param {Function} cb Callback which is executed when the pong is sent
   * @public
   */
  pong(data, mask, cb) {
    if (this.readyState === WebSocket.CONNECTING) {
      throw new Error('WebSocket is not open: readyState 0 (CONNECTING)');
    }

    if (typeof data === 'function') {
      cb = data;
      data = mask = undefined;
    } else if (typeof mask === 'function') {
      cb = mask;
      mask = undefined;
    }

    if (typeof data === 'number') data = data.toString();

    if (this.readyState !== WebSocket.OPEN) {
      sendAfterClose(this, data, cb);
      return;
    }

    if (mask === undefined) mask = !this._isServer;
    this._sender.pong(data || EMPTY_BUFFER, mask, cb);
  }

  /**
   * Send a data message.
   *
   * @param {*} data The message to send
   * @param {Object} options Options object
   * @param {Boolean} options.compress Specifies whether or not to compress
   *     `data`
   * @param {Boolean} options.binary Specifies whether `data` is binary or text
   * @param {Boolean} options.fin Specifies whether the fragment is the last one
   * @param {Boolean} options.mask Specifies whether or not to mask `data`
   * @param {Function} cb Callback which is executed when data is written out
   * @public
   */
  send(data, options, cb) {
    if (this.readyState === WebSocket.CONNECTING) {
      throw new Error('WebSocket is not open: readyState 0 (CONNECTING)');
    }

    if (typeof options === 'function') {
      cb = options;
      options = {};
    }

    if (typeof data === 'number') data = data.toString();

    if (this.readyState !== WebSocket.OPEN) {
      sendAfterClose(this, data, cb);
      return;
    }

    const opts = {
      binary: typeof data !== 'string',
      mask: !this._isServer,
      compress: true,
      fin: true,
      ...options
    };

    if (!this._extensions[PerMessageDeflate.extensionName]) {
      opts.compress = false;
    }

    this._sender.send(data || EMPTY_BUFFER, opts, cb);
  }

  /**
   * Forcibly close the connection.
   *
   * @public
   */
  terminate() {
    if (this.readyState === WebSocket.CLOSED) return;
    if (this.readyState === WebSocket.CONNECTING) {
      const msg = 'WebSocket was closed before the connection was established';
      return abortHandshake(this, this._req, msg);
    }

    if (this._socket) {
      this.readyState = WebSocket.CLOSING;
      this._socket.destroy();
    }
  }
}

readyStates.forEach((readyState, i) => {
  WebSocket[readyState] = i;
});

//
// Add the `onopen`, `onerror`, `onclose`, and `onmessage` attributes.
// See https://html.spec.whatwg.org/multipage/comms.html#the-websocket-interface
//
['open', 'error', 'close', 'message'].forEach((method) => {
  Object.defineProperty(WebSocket.prototype, `on${method}`, {
    /**
     * Return the listener of the event.
     *
     * @return {(Function|undefined)} The event listener or `undefined`
     * @public
     */
    get() {
      const listeners = this.listeners(method);
      for (let i = 0; i < listeners.length; i++) {
        if (listeners[i]._listener) return listeners[i]._listener;
      }

      return undefined;
    },
    /**
     * Add a listener for the event.
     *
     * @param {Function} listener The listener to add
     * @public
     */
    set(listener) {
      const listeners = this.listeners(method);
      for (let i = 0; i < listeners.length; i++) {
        //
        // Remove only the listeners added via `addEventListener`.
        //
        if (listeners[i]._listener) this.removeListener(method, listeners[i]);
      }
      this.addEventListener(method, listener);
    }
  });
});

WebSocket.prototype.addEventListener = addEventListener;
WebSocket.prototype.removeEventListener = removeEventListener;

module.exports = WebSocket;

/**
 * Initialize a WebSocket client.
 *
 * @param {WebSocket} websocket The client to initialize
 * @param {(String|url.URL)} address The URL to which to connect
 * @param {String} protocols The subprotocols
 * @param {Object} options Connection options
 * @param {(Boolean|Object)} options.perMessageDeflate Enable/disable
 *     permessage-deflate
 * @param {Number} options.handshakeTimeout Timeout in milliseconds for the
 *     handshake request
 * @param {Number} options.protocolVersion Value of the `Sec-WebSocket-Version`
 *     header
 * @param {String} options.origin Value of the `Origin` or
 *     `Sec-WebSocket-Origin` header
 * @param {Number} options.maxPayload The maximum allowed message size
 * @param {Boolean} options.followRedirects Whether or not to follow redirects
 * @param {Number} options.maxRedirects The maximum number of redirects allowed
 * @private
 */
function initAsClient(websocket, address, protocols, options) {
  const opts = {
    protocolVersion: protocolVersions[1],
    maxPayload: 100 * 1024 * 1024,
    perMessageDeflate: true,
    followRedirects: false,
    maxRedirects: 10,
    ...options,
    createConnection: undefined,
    socketPath: undefined,
    hostname: undefined,
    protocol: undefined,
    timeout: undefined,
    method: undefined,
    host: undefined,
    path: undefined,
    port: undefined
  };

  if (!protocolVersions.includes(opts.protocolVersion)) {
    throw new RangeError(
      `Unsupported protocol version: ${opts.protocolVersion} ` +
        `(supported versions: ${protocolVersions.join(', ')})`
    );
  }

  let parsedUrl;

  if (address instanceof URL) {
    parsedUrl = address;
    websocket.url = address.href;
  } else {
    parsedUrl = new URL(address);
    websocket.url = address;
  }

  const isUnixSocket = parsedUrl.protocol === 'ws+unix:';

  if (!parsedUrl.host && (!isUnixSocket || !parsedUrl.pathname)) {
    throw new Error(`Invalid URL: ${websocket.url}`);
  }

  const isSecure =
    parsedUrl.protocol === 'wss:' || parsedUrl.protocol === 'https:';
  const defaultPort = isSecure ? 443 : 80;
  const key = randomBytes(16).toString('base64');
  const get = isSecure ? https.get : http.get;
  let perMessageDeflate;

  opts.createConnection = isSecure ? tlsConnect : netConnect;
  opts.defaultPort = opts.defaultPort || defaultPort;
  opts.port = parsedUrl.port || defaultPort;
  opts.host = parsedUrl.hostname.startsWith('[')
    ? parsedUrl.hostname.slice(1, -1)
    : parsedUrl.hostname;
  opts.headers = {
    'Sec-WebSocket-Version': opts.protocolVersion,
    'Sec-WebSocket-Key': key,
    Connection: 'Upgrade',
    Upgrade: 'websocket',
    ...opts.headers
  };
  opts.path = parsedUrl.pathname + parsedUrl.search;
  opts.timeout = opts.handshakeTimeout;

  if (opts.perMessageDeflate) {
    perMessageDeflate = new PerMessageDeflate(
      opts.perMessageDeflate !== true ? opts.perMessageDeflate : {},
      false,
      opts.maxPayload
    );
    opts.headers['Sec-WebSocket-Extensions'] = format({
      [PerMessageDeflate.extensionName]: perMessageDeflate.offer()
    });
  }
  if (protocols) {
    opts.headers['Sec-WebSocket-Protocol'] = protocols;
  }
  if (opts.origin) {
    if (opts.protocolVersion < 13) {
      opts.headers['Sec-WebSocket-Origin'] = opts.origin;
    } else {
      opts.headers.Origin = opts.origin;
    }
  }
  if (parsedUrl.username || parsedUrl.password) {
    opts.auth = `${parsedUrl.username}:${parsedUrl.password}`;
  }

  if (isUnixSocket) {
    const parts = opts.path.split(':');

    opts.socketPath = parts[0];
    opts.path = parts[1];
  }

  let req = (websocket._req = get(opts));

  if (opts.timeout) {
    req.on('timeout', () => {
      abortHandshake(websocket, req, 'Opening handshake has timed out');
    });
  }

  req.on('error', (err) => {
    if (websocket._req.aborted) return;

    req = websocket._req = null;
    websocket.readyState = WebSocket.CLOSING;
    websocket.emit('error', err);
    websocket.emitClose();
  });

  req.on('response', (res) => {
    const location = res.headers.location;
    const statusCode = res.statusCode;

    if (
      location &&
      opts.followRedirects &&
      statusCode >= 300 &&
      statusCode < 400
    ) {
      if (++websocket._redirects > opts.maxRedirects) {
        abortHandshake(websocket, req, 'Maximum redirects exceeded');
        return;
      }

      req.abort();

      const addr = new URL(location, address);

      initAsClient(websocket, addr, protocols, options);
    } else if (!websocket.emit('unexpected-response', req, res)) {
      abortHandshake(
        websocket,
        req,
        `Unexpected server response: ${res.statusCode}`
      );
    }
  });

  req.on('upgrade', (res, socket, head) => {
    websocket.emit('upgrade', res);

    //
    // The user may have closed the connection from a listener of the `upgrade`
    // event.
    //
    if (websocket.readyState !== WebSocket.CONNECTING) return;

    req = websocket._req = null;

    const digest = createHash('sha1')
      .update(key + GUID)
      .digest('base64');

    if (res.headers['sec-websocket-accept'] !== digest) {
      abortHandshake(websocket, socket, 'Invalid Sec-WebSocket-Accept header');
      return;
    }

    const serverProt = res.headers['sec-websocket-protocol'];
    const protList = (protocols || '').split(/, */);
    let protError;

    if (!protocols && serverProt) {
      protError = 'Server sent a subprotocol but none was requested';
    } else if (protocols && !serverProt) {
      protError = 'Server sent no subprotocol';
    } else if (serverProt && !protList.includes(serverProt)) {
      protError = 'Server sent an invalid subprotocol';
    }

    if (protError) {
      abortHandshake(websocket, socket, protError);
      return;
    }

    if (serverProt) websocket.protocol = serverProt;

    if (perMessageDeflate) {
      try {
        const extensions = parse(res.headers['sec-websocket-extensions']);

        if (extensions[PerMessageDeflate.extensionName]) {
          perMessageDeflate.accept(extensions[PerMessageDeflate.extensionName]);
          websocket._extensions[
            PerMessageDeflate.extensionName
          ] = perMessageDeflate;
        }
      } catch (err) {
        abortHandshake(
          websocket,
          socket,
          'Invalid Sec-WebSocket-Extensions header'
        );
        return;
      }
    }

    websocket.setSocket(socket, head, opts.maxPayload);
  });
}

/**
 * Create a `net.Socket` and initiate a connection.
 *
 * @param {Object} options Connection options
 * @return {net.Socket} The newly created socket used to start the connection
 * @private
 */
function netConnect(options) {
  options.path = options.socketPath;
  return net.connect(options);
}

/**
 * Create a `tls.TLSSocket` and initiate a connection.
 *
 * @param {Object} options Connection options
 * @return {tls.TLSSocket} The newly created socket used to start the connection
 * @private
 */
function tlsConnect(options) {
  options.path = undefined;

  if (!options.servername && options.servername !== '') {
    options.servername = options.host;
  }

  return tls.connect(options);
}

/**
 * Abort the handshake and emit an error.
 *
 * @param {WebSocket} websocket The WebSocket instance
 * @param {(http.ClientRequest|net.Socket)} stream The request to abort or the
 *     socket to destroy
 * @param {String} message The error message
 * @private
 */
function abortHandshake(websocket, stream, message) {
  websocket.readyState = WebSocket.CLOSING;

  const err = new Error(message);
  Error.captureStackTrace(err, abortHandshake);

  if (stream.setHeader) {
    stream.abort();
    stream.once('abort', websocket.emitClose.bind(websocket));
    websocket.emit('error', err);
  } else {
    stream.destroy(err);
    stream.once('error', websocket.emit.bind(websocket, 'error'));
    stream.once('close', websocket.emitClose.bind(websocket));
  }
}

/**
 * Handle cases where the `ping()`, `pong()`, or `send()` methods are called
 * when the `readyState` attribute is `CLOSING` or `CLOSED`.
 *
 * @param {WebSocket} websocket The WebSocket instance
 * @param {*} data The data to send
 * @param {Function} cb Callback
 * @private
 */
function sendAfterClose(websocket, data, cb) {
  if (data) {
    const length = toBuffer(data).length;

    //
    // The `_bufferedAmount` property is used only when the peer is a client and
    // the opening handshake fails. Under these circumstances, in fact, the
    // `setSocket()` method is not called, so the `_socket` and `_sender`
    // properties are set to `null`.
    //
    if (websocket._socket) websocket._sender._bufferedBytes += length;
    else websocket._bufferedAmount += length;
  }

  if (cb) {
    const err = new Error(
      `WebSocket is not open: readyState ${websocket.readyState} ` +
        `(${readyStates[websocket.readyState]})`
    );
    cb(err);
  }
}

/**
 * The listener of the `Receiver` `'conclude'` event.
 *
 * @param {Number} code The status code
 * @param {String} reason The reason for closing
 * @private
 */
function receiverOnConclude(code, reason) {
  const websocket = this[kWebSocket];

  websocket._socket.removeListener('data', socketOnData);
  websocket._socket.resume();

  websocket._closeFrameReceived = true;
  websocket._closeMessage = reason;
  websocket._closeCode = code;

  if (code === 1005) websocket.close();
  else websocket.close(code, reason);
}

/**
 * The listener of the `Receiver` `'drain'` event.
 *
 * @private
 */
function receiverOnDrain() {
  this[kWebSocket]._socket.resume();
}

/**
 * The listener of the `Receiver` `'error'` event.
 *
 * @param {(RangeError|Error)} err The emitted error
 * @private
 */
function receiverOnError(err) {
  const websocket = this[kWebSocket];

  websocket._socket.removeListener('data', socketOnData);

  websocket.readyState = WebSocket.CLOSING;
  websocket._closeCode = err[kStatusCode];
  websocket.emit('error', err);
  websocket._socket.destroy();
}

/**
 * The listener of the `Receiver` `'finish'` event.
 *
 * @private
 */
function receiverOnFinish() {
  this[kWebSocket].emitClose();
}

/**
 * The listener of the `Receiver` `'message'` event.
 *
 * @param {(String|Buffer|ArrayBuffer|Buffer[])} data The message
 * @private
 */
function receiverOnMessage(data) {
  this[kWebSocket].emit('message', data);
}

/**
 * The listener of the `Receiver` `'ping'` event.
 *
 * @param {Buffer} data The data included in the ping frame
 * @private
 */
function receiverOnPing(data) {
  const websocket = this[kWebSocket];

  websocket.pong(data, !websocket._isServer, NOOP);
  websocket.emit('ping', data);
}

/**
 * The listener of the `Receiver` `'pong'` event.
 *
 * @param {Buffer} data The data included in the pong frame
 * @private
 */
function receiverOnPong(data) {
  this[kWebSocket].emit('pong', data);
}

/**
 * The listener of the `net.Socket` `'close'` event.
 *
 * @private
 */
function socketOnClose() {
  const websocket = this[kWebSocket];

  this.removeListener('close', socketOnClose);
  this.removeListener('end', socketOnEnd);

  websocket.readyState = WebSocket.CLOSING;

  //
  // The close frame might not have been received or the `'end'` event emitted,
  // for example, if the socket was destroyed due to an error. Ensure that the
  // `receiver` stream is closed after writing any remaining buffered data to
  // it. If the readable side of the socket is in flowing mode then there is no
  // buffered data as everything has been already written and `readable.read()`
  // will return `null`. If instead, the socket is paused, any possible buffered
  // data will be read as a single chunk and emitted synchronously in a single
  // `'data'` event.
  //
  websocket._socket.read();
  websocket._receiver.end();

  this.removeListener('data', socketOnData);
  this[kWebSocket] = undefined;

  clearTimeout(websocket._closeTimer);

  if (
    websocket._receiver._writableState.finished ||
    websocket._receiver._writableState.errorEmitted
  ) {
    websocket.emitClose();
  } else {
    websocket._receiver.on('error', receiverOnFinish);
    websocket._receiver.on('finish', receiverOnFinish);
  }
}

/**
 * The listener of the `net.Socket` `'data'` event.
 *
 * @param {Buffer} chunk A chunk of data
 * @private
 */
function socketOnData(chunk) {
  if (!this[kWebSocket]._receiver.write(chunk)) {
    this.pause();
  }
}

/**
 * The listener of the `net.Socket` `'end'` event.
 *
 * @private
 */
function socketOnEnd() {
  const websocket = this[kWebSocket];

  websocket.readyState = WebSocket.CLOSING;
  websocket._receiver.end();
  this.end();
}

/**
 * The listener of the `net.Socket` `'error'` event.
 *
 * @private
 */
function socketOnError() {
  const websocket = this[kWebSocket];

  this.removeListener('error', socketOnError);
  this.on('error', NOOP);

  if (websocket) {
    websocket.readyState = WebSocket.CLOSING;
    this.destroy();
  }
}


/***/ }),

/***/ "./src/MockDependencies.js":
/*!*********************************!*\
  !*** ./src/MockDependencies.js ***!
  \*********************************/
/*! exports provided: MockGUI, MockRenderer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MockGUI", function() { return MockGUI; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MockRenderer", function() { return MockRenderer; });
/* harmony import */ var three_src_math_Vector3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three/src/math/Vector3 */ "./node_modules/three/src/math/Vector3.js");
/* harmony import */ var three_src_math_Quaternion__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! three/src/math/Quaternion */ "./node_modules/three/src/math/Quaternion.js");
/* harmony import */ var three_src_core_Object3D__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! three/src/core/Object3D */ "./node_modules/three/src/core/Object3D.js");
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }





global.debug = function () {
  var _console;

  for (var _len = arguments.length, params = new Array(_len), _key = 0; _key < _len; _key++) {
    params[_key] = arguments[_key];
  }

  return (_console = console).log.apply(_console, ["[".concat(new Date().toLocaleTimeString(), "]")].concat(params));
};

var Obj3D = /*#__PURE__*/function (_Object3D) {
  _inherits(Obj3D, _Object3D);

  var _super = _createSuper(Obj3D);

  function Obj3D() {
    var _this;

    _classCallCheck(this, Obj3D);

    for (var _len2 = arguments.length, props = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      props[_key2] = arguments[_key2];
    }

    _this = _super.call.apply(_super, [this].concat(props));
    _this.scene = _assertThisInitialized(_this);
    return _this;
  }

  return Obj3D;
}(three_src_core_Object3D__WEBPACK_IMPORTED_MODULE_2__["Object3D"]);

global.THREE = {
  Vector3: three_src_math_Vector3__WEBPACK_IMPORTED_MODULE_0__["Vector3"],
  Quaternion: three_src_math_Quaternion__WEBPACK_IMPORTED_MODULE_1__["Quaternion"],
  Object3D: Obj3D,
  WebGLRenderer: function WebGLRenderer() {
    return {
      render: function render() {
        return {};
      },
      setSize: function setSize() {
        return {};
      },
      getContext: function getContext() {
        return {
          canvas: {
            width: 0,
            height: 0
          }
        };
      },
      shadowMap: {}
    };
  },
  Scene: Obj3D,
  Cache: {},
  Clock: function Clock() {
    return {};
  },
  AnimationMixer: function AnimationMixer() {
    return {
      update: function update() {
        return {};
      },
      clipAction: function clipAction() {
        return {
          stop: function stop() {
            return {};
          }
        };
      }
    };
  },
  PCFSoftShadowMap: function PCFSoftShadowMap() {
    return {};
  },
  PerspectiveCamera: Obj3D,
  Raycaster: function Raycaster() {
    return {};
  },
  TextureLoader: function TextureLoader() {
    return {
      load: function load() {
        return {};
      }
    };
  },
  Fog: function Fog() {
    return {};
  },
  RepeatWrapping: function RepeatWrapping() {
    return {};
  },
  Color: function Color() {
    return {};
  },
  Mesh: Obj3D,
  CubeGeometry: function CubeGeometry() {
    return {};
  },
  MeshLambertMaterial: function MeshLambertMaterial() {
    return {};
  },
  NormalBlending: function NormalBlending() {
    return {};
  },
  AdditiveBlending: function AdditiveBlending() {
    return {};
  },
  Geometry: function Geometry() {
    return {};
  },
  PointCloudMaterial: function PointCloudMaterial() {
    return {};
  },
  PointCloud: function PointCloud() {
    return {};
  },
  AmbientLight: function AmbientLight() {
    return {};
  },
  DirectionalLight: function DirectionalLight() {
    var light = new Obj3D();
    light.shadow = {
      camera: {},
      mapSize: {}
    };
    return light;
  },
  MeshBasicMaterial: function MeshBasicMaterial() {
    return {};
  },
  BackSide: function BackSide() {
    return {};
  },
  MeshFaceMaterial: function MeshFaceMaterial() {
    return {};
  }
};

global.GLTFLoader = function () {
  return {
    load: function load(url, callback) {
      return callback(new Obj3D());
    }
  };
};

global.window = {
  innerWidth: 0,
  innerHeight: 0,
  clearTimeout: 0,
  requestAnimationFrame: function requestAnimationFrame(fn) {
    return setTimeout(fn, 1000 / 60);
  },
  location: {
    reload: function reload() {
      return debug('reload page');
    }
  },
  addEventListener: function addEventListener() {
    for (var _len3 = arguments.length, params = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      params[_key3] = arguments[_key3];
    }

    return debug.apply(void 0, ['window.addEventListener'].concat(params));
  },
  setTimeout: setTimeout,
  WebSocket: function WebSocket() {
    return {
      onopen: function onopen() {
        for (var _len4 = arguments.length, params = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
          params[_key4] = arguments[_key4];
        }

        return debug.apply(void 0, ['window.WebSocket.onopen'].concat(params));
      },
      onerror: function onerror() {
        for (var _len5 = arguments.length, params = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
          params[_key5] = arguments[_key5];
        }

        return debug.apply(void 0, ['window.WebSocket.onerror'].concat(params));
      },
      onmessage: function onmessage() {
        for (var _len6 = arguments.length, params = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
          params[_key6] = arguments[_key6];
        }

        return debug.apply(void 0, ['window.WebSocket.onmessage'].concat(params));
      }
    };
  }
};
global.document = {
  body: {
    addEventListener: function addEventListener() {
      for (var _len7 = arguments.length, params = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
        params[_key7] = arguments[_key7];
      }

      return debug.apply(void 0, ['document.body.addEventListener'].concat(params));
    },
    removeEventListener: function removeEventListener() {
      for (var _len8 = arguments.length, params = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {
        params[_key8] = arguments[_key8];
      }

      return debug.apply(void 0, ['document.body.removeEventListener'].concat(params));
    }
  },
  dispatchEvent: function dispatchEvent() {
    for (var _len9 = arguments.length, params = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {
      params[_key9] = arguments[_key9];
    }

    return debug.apply(void 0, ['document.dispatchEvent'].concat(params));
  },
  getElementById: function getElementById() {
    for (var _len10 = arguments.length, params = new Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {
      params[_key10] = arguments[_key10];
    }

    return debug.apply(void 0, ['document.getElementById'].concat(params));
  },
  addEventListener: function addEventListener() {
    for (var _len11 = arguments.length, params = new Array(_len11), _key11 = 0; _key11 < _len11; _key11++) {
      params[_key11] = arguments[_key11];
    }

    return debug.apply(void 0, ['document.addEventListener'].concat(params));
  },
  removeEventListener: function removeEventListener() {
    for (var _len12 = arguments.length, params = new Array(_len12), _key12 = 0; _key12 < _len12; _key12++) {
      params[_key12] = arguments[_key12];
    }

    return debug.apply(void 0, ['document.removeEventListener'].concat(params));
  }
};
var MockGUI = {
  isServer: true,
  setRestartButtonVisible: function setRestartButtonVisible() {
    return null;
  },
  setPause: function setPause() {
    return null;
  },
  restartGame: function restartGame() {
    return null;
  },
  isPause: function isPause() {
    return false;
  },
  isThirdPerson: function isThirdPerson() {
    return false;
  },
  update: function update() {
    return null;
  },
  setConnectionRole: debug,
  updatePlayerParams: function updatePlayerParams() {
    return null;
  },
  clearHpBars: function clearHpBars() {
    return null;
  },
  switchCamera: function switchCamera() {
    return null;
  },
  setFps: function setFps() {
    return null;
  },
  setPing: function setPing() {
    return null;
  },
  notify: debug,
  setLoading: function setLoading() {
    return null;
  }
};
var MockRenderer = {
  fps: 1,
  targetFps: 1,
  renderer: new THREE.WebGLRenderer(),
  render: function render() {
    return {};
  }
};

/***/ }),

/***/ "./src/SocketServer.js":
/*!*****************************!*\
  !*** ./src/SocketServer.js ***!
  \*****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var ws__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ws */ "./node_modules/ws/index.js");
/* harmony import */ var ws__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(ws__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! fs */ "fs");
/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! path */ "path");
/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_2__);
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }




var WebSocketServer = ws__WEBPACK_IMPORTED_MODULE_0__["Server"];

var SocketServer = /*#__PURE__*/function () {
  function SocketServer() {
    _classCallCheck(this, SocketServer);

    this.createWebServer = this.createWebServer.bind(this);
    this.createSocketServer = this.createSocketServer.bind(this);
    this.saveUserData = this.saveUserData.bind(this);
    this.loadUserData = this.loadUserData.bind(this);
    this.startSocketServer = this.startSocketServer.bind(this);
    this.getConnectionId = this.getConnectionId.bind(this);
    this.sendToConnection = this.sendToConnection.bind(this);
    this.send = this.send.bind(this);
    var isProduction = "development" === 'production';
    this.config = {
      ssl: isProduction,
      port: 1337,
      sslKey: path__WEBPACK_IMPORTED_MODULE_2__["join"](__dirname, './private.pem'),
      sslCertificate: path__WEBPACK_IMPORTED_MODULE_2__["join"](__dirname, './fullchain.pem'),
      sessionsPath: path__WEBPACK_IMPORTED_MODULE_2__["join"](__dirname, './sessions/'),
      debug: false
    };
    this.db = {
      sequenceId: 0,
      hostId: null,
      connections: {},
      players: {},
      gameObjects: []
    };
    var socketServer = this.createSocketServer(this.config);
    this.startSocketServer(socketServer);
  }

  _createClass(SocketServer, [{
    key: "createWebServer",
    value: function createWebServer(config) {
      var processRequest = function processRequest(req, res) {
        res.writeHead(200);
        res.end("All glory to WebSockets!\n");
      };

      if (config.ssl) {
        var sslParams = {
          key: fs__WEBPACK_IMPORTED_MODULE_1__["readFileSync"](config.sslKey),
          cert: fs__WEBPACK_IMPORTED_MODULE_1__["readFileSync"](config.sslCertificate)
        };
        return __webpack_require__(/*! https */ "https").createServer(sslParams, processRequest).listen(config.port);
      } else {
        return __webpack_require__(/*! http */ "http").createServer(processRequest).listen(config.port);
      }
    }
  }, {
    key: "createSocketServer",
    value: function createSocketServer(config) {
      var server = this.createWebServer(config);
      var webSocketServer = new WebSocketServer({
        server: server
      });
      debug("Server is running on port ".concat(config.port, ". SSL is ").concat(config.ssl ? 'enabled' : 'disabled', "."));
      return webSocketServer;
    }
  }, {
    key: "saveUserData",
    value: function saveUserData(token, data) {
      try {
        if (!fs__WEBPACK_IMPORTED_MODULE_1__["existsSync"](this.config.sessionsPath)) {
          fs__WEBPACK_IMPORTED_MODULE_1__["mkdirSync"](this.config.sessionsPath);
        }

        fs__WEBPACK_IMPORTED_MODULE_1__["writeFileSync"]("".concat(this.config.sessionsPath, "/").concat(token), JSON.stringify(data));
        return true;
      } catch (e) {
        debug('Save user data error', e);
        return false;
      }
    }
  }, {
    key: "loadUserData",
    value: function loadUserData(token) {
      var tokenPath = "".concat(this.config.sessionsPath, "/").concat(token);

      try {
        if (fs__WEBPACK_IMPORTED_MODULE_1__["existsSync"](tokenPath)) {
          return JSON.parse(fs__WEBPACK_IMPORTED_MODULE_1__["readFileSync"](tokenPath, 'utf8'));
        }
      } catch (e) {
        debug('Load user data error', e);
      }

      return false;
    }
  }, {
    key: "getConnectionId",
    value: function getConnectionId(c) {
      return c._id;
    }
  }, {
    key: "sendToConnection",
    value: function sendToConnection(connectionId) {
      var players = this.db.players;
      var connection = this.db.connections[connectionId];
      var gameObjects = this.db.gameObjects.filter(function (gameObject) {
        return gameObject.type !== 'player';
      });
      var networkPlayers = Object.keys(players).filter(function (playerConnectionId) {
        return playerConnectionId !== String(connectionId);
      }).map(function (playerConnectionId) {
        return players[playerConnectionId];
      });
      this.send(connection, 'updateGameObjects', [].concat(gameObjects, networkPlayers));
    }
  }, {
    key: "send",
    value: function send(connection, messageType, data) {
      connection.send(JSON.stringify({
        meta: {
          server: {
            version: 1
          },
          role: this.getConnectionId(connection) === this.db.hostId ? 'host' : 'client',
          id: this.getConnectionId(connection),
          token: connection._meta.token,
          debug: this.config.debug
        },
        data: data,
        messageType: messageType
      }));
    }
  }, {
    key: "startSocketServer",
    value: function startSocketServer(socketServer) {
      var _this = this;

      var db = this.db;
      var loadUserData = this.loadUserData;
      var getConnectionId = this.getConnectionId;
      var send = this.send;
      var sendToConnection = this.sendToConnection;

      var getConnectionToken = function getConnectionToken(c) {
        return c._meta.token;
      };

      setInterval(function () {
        Object.values(db.connections).forEach(function (connection) {
          var connectionPlayer = db.players[getConnectionId(connection)];
          var token = getConnectionToken(connection);

          if (connectionPlayer && token) {
            _this.saveUserData(token, connectionPlayer);
          }
        });
      }, 10000);
      socketServer.on('connection', function (connection) {
        var id = ++db.sequenceId;
        debug('New connection, id:', id);
        db.connections[id] = connection;
        connection._meta = {
          id: id
        };
        connection._id = id;

        var onSocketClose = function onSocketClose() {
          var id = getConnectionId(connection);
          debug('Connection closed, id:', id);
          Object.values(db.connections).forEach(function (c) {
            send(c, 'disconnected', {
              connectionId: id
            });
          });
          delete db.connections[id];
          delete db.players[id];
        };

        var onSocketMessage = function onSocketMessage(message) {
          var _JSON$parse = JSON.parse(message),
              data = _JSON$parse.data,
              messageType = _JSON$parse.messageType,
              meta = _JSON$parse.meta;

          var connectionId = getConnectionId(connection);

          if (meta && meta.token && meta.token !== connection._meta.token) {
            debug("User #".concat(connectionId, " token changed from ").concat(connection._meta.token, " to ").concat(meta.token));
            connection._meta.token = meta.token;
          }

          var sendUserData = function sendUserData() {
            send(connection, 'setUserPlayer', loadUserData(connection._meta.token));
          };

          var updatePlayerData = function updatePlayerData(player) {
            db.players[connectionId] = player;
          };

          switch (messageType) {
            case 'loadCurrentUser':
              {
                sendUserData();
                break;
              }

            case 'updatePlayer':
              {
                // Process request
                updatePlayerData(data); // Send response

                sendToConnection(connectionId);
                break;
              }

            case 'restartServer':
              {
                // restartServer();
                break;
              }
          }
        };

        connection.on('message', onSocketMessage);
        connection.on('close', onSocketClose);
        send(connection, 'handshake');
      });
    }
  }]);

  return SocketServer;
}();

/* harmony default export */ __webpack_exports__["default"] = (SocketServer);

/***/ }),

/***/ "./standalone-server.js":
/*!******************************!*\
  !*** ./standalone-server.js ***!
  \******************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _src_MockDependencies__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./src/MockDependencies */ "./src/MockDependencies.js");
/* harmony import */ var _src_SocketServer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./src/SocketServer */ "./src/SocketServer.js");
/* harmony import */ var _client_src_js_Scene__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../client/src/js/Scene */ "../client/src/js/Scene.js");
/* harmony import */ var _client_src_js_Connection__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../client/src/js/Connection */ "../client/src/js/Connection.js");
/* harmony import */ var _client_src_js_GameObjects__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../client/src/js/GameObjects */ "../client/src/js/GameObjects.js");






function Server() {
  debug('Starting server scene initialization ...');
  var scene = new _client_src_js_Scene__WEBPACK_IMPORTED_MODULE_2__["default"](_src_MockDependencies__WEBPACK_IMPORTED_MODULE_0__["MockRenderer"], _src_MockDependencies__WEBPACK_IMPORTED_MODULE_0__["MockGUI"]);
  debug('Scene is loaded', {
    THREE: Boolean(THREE),
    document: Boolean(document),
    window: Boolean(window),
    GLTFLoader: Boolean(GLTFLoader),
    scene: Boolean(scene),
    sceneLocation: Boolean(scene.location),
    sceneColliders: scene.colliders.colliders.length,
    sceneAreas: scene.pathFinder.areas.length,
    aliveUnits: scene.units.getAliveUnits().length
  });
  var player = scene.getPlayer();

  if (player) {
    player.params.hp = 0;
  }

  debug('Starting socket server ...');
  var socketServer = new _src_SocketServer__WEBPACK_IMPORTED_MODULE_1__["default"]();

  var updateGameObjects = function updateGameObjects() {
    var data = [];
    scene.units.getAliveUnits().forEach(function (unit) {
      if (!(unit instanceof _client_src_js_GameObjects__WEBPACK_IMPORTED_MODULE_4__["Player"])) {
        var unitData = _client_src_js_Connection__WEBPACK_IMPORTED_MODULE_3__["default"].unitToNetwork(unit, null, 'dream-town');

        if (unitData) {
          data.push(unitData);
        }
      }
    });
    socketServer.db.gameObjects = data;
    Object.values(socketServer.db.players).forEach(scene.connection.updateNetworkPlayer);
  };

  setInterval(updateGameObjects, 100);
}

/* harmony default export */ __webpack_exports__["default"] = (Server);

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("crypto");

/***/ }),

/***/ "events":
/*!*************************!*\
  !*** external "events" ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("events");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("fs");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("https");

/***/ }),

/***/ "net":
/*!**********************!*\
  !*** external "net" ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("net");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("path");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("stream");

/***/ }),

/***/ "tls":
/*!**********************!*\
  !*** external "tls" ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("tls");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("url");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = require("zlib");

/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,